/**
* 
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 20220523
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "pistache/endpoint.h"
#include "pistache/http.h"
#include "pistache/router.h"
#ifdef __linux__
#include <vector>
#include <signal.h>
#include <unistd.h>
#endif

#include "AbilityApiImpl.h"
#include "BerryApiImpl.h"
#include "BerryFirmnessApiImpl.h"
#include "BerryFlavorApiImpl.h"
#include "CharacteristicApiImpl.h"
#include "ContestEffectApiImpl.h"
#include "ContestTypeApiImpl.h"
#include "EggGroupApiImpl.h"
#include "EncounterConditionApiImpl.h"
#include "EncounterConditionValueApiImpl.h"
#include "EncounterMethodApiImpl.h"
#include "EvolutionChainApiImpl.h"
#include "EvolutionTriggerApiImpl.h"
#include "GenderApiImpl.h"
#include "GenerationApiImpl.h"
#include "GrowthRateApiImpl.h"
#include "ItemApiImpl.h"
#include "ItemAttributeApiImpl.h"
#include "ItemCategoryApiImpl.h"
#include "ItemFlingEffectApiImpl.h"
#include "ItemPocketApiImpl.h"
#include "LanguageApiImpl.h"
#include "LocationApiImpl.h"
#include "LocationAreaApiImpl.h"
#include "MachineApiImpl.h"
#include "MoveApiImpl.h"
#include "MoveAilmentApiImpl.h"
#include "MoveBattleStyleApiImpl.h"
#include "MoveCategoryApiImpl.h"
#include "MoveDamageClassApiImpl.h"
#include "MoveLearnMethodApiImpl.h"
#include "MoveTargetApiImpl.h"
#include "NatureApiImpl.h"
#include "PalParkAreaApiImpl.h"
#include "PokeathlonStatApiImpl.h"
#include "PokedexApiImpl.h"
#include "PokemonApiImpl.h"
#include "PokemonColorApiImpl.h"
#include "PokemonFormApiImpl.h"
#include "PokemonHabitatApiImpl.h"
#include "PokemonShapeApiImpl.h"
#include "PokemonSpeciesApiImpl.h"
#include "RegionApiImpl.h"
#include "StatApiImpl.h"
#include "SuperContestEffectApiImpl.h"
#include "TypeApiImpl.h"
#include "VersionApiImpl.h"
#include "VersionGroupApiImpl.h"

#define PISTACHE_SERVER_THREADS     2
#define PISTACHE_SERVER_MAX_REQUEST_SIZE 32768
#define PISTACHE_SERVER_MAX_RESPONSE_SIZE 32768

static Pistache::Http::Endpoint *httpEndpoint;
#ifdef __linux__
static void sigHandler [[noreturn]] (int sig){
    switch(sig){
        case SIGINT:
        case SIGQUIT:
        case SIGTERM:
        case SIGHUP:
        default:
            httpEndpoint->shutdown();
            break;
    }
    exit(0);
}

static void setUpUnixSignals(std::vector<int> quitSignals) {
    sigset_t blocking_mask;
    sigemptyset(&blocking_mask);
    for (auto sig : quitSignals)
        sigaddset(&blocking_mask, sig);

    struct sigaction sa;
    sa.sa_handler = sigHandler;
    sa.sa_mask    = blocking_mask;
    sa.sa_flags   = 0;

    for (auto sig : quitSignals)
        sigaction(sig, &sa, nullptr);
}
#endif

using namespace org::openapitools::server::api;

int main() {
#ifdef __linux__
    std::vector<int> sigs{SIGQUIT, SIGINT, SIGTERM, SIGHUP};
    setUpUnixSignals(sigs);
#endif
    Pistache::Address addr(Pistache::Ipv4::any(), Pistache::Port(8080));

    httpEndpoint = new Pistache::Http::Endpoint((addr));
    auto router = std::make_shared<Pistache::Rest::Router>();

    auto opts = Pistache::Http::Endpoint::options()
        .threads(PISTACHE_SERVER_THREADS);
    opts.flags(Pistache::Tcp::Options::ReuseAddr);
    opts.maxRequestSize(PISTACHE_SERVER_MAX_REQUEST_SIZE);
    opts.maxResponseSize(PISTACHE_SERVER_MAX_RESPONSE_SIZE);
    httpEndpoint->init(opts);

    
    AbilityApiImpl AbilityApiserver(router);
    AbilityApiserver.init();
    BerryApiImpl BerryApiserver(router);
    BerryApiserver.init();
    BerryFirmnessApiImpl BerryFirmnessApiserver(router);
    BerryFirmnessApiserver.init();
    BerryFlavorApiImpl BerryFlavorApiserver(router);
    BerryFlavorApiserver.init();
    CharacteristicApiImpl CharacteristicApiserver(router);
    CharacteristicApiserver.init();
    ContestEffectApiImpl ContestEffectApiserver(router);
    ContestEffectApiserver.init();
    ContestTypeApiImpl ContestTypeApiserver(router);
    ContestTypeApiserver.init();
    EggGroupApiImpl EggGroupApiserver(router);
    EggGroupApiserver.init();
    EncounterConditionApiImpl EncounterConditionApiserver(router);
    EncounterConditionApiserver.init();
    EncounterConditionValueApiImpl EncounterConditionValueApiserver(router);
    EncounterConditionValueApiserver.init();
    EncounterMethodApiImpl EncounterMethodApiserver(router);
    EncounterMethodApiserver.init();
    EvolutionChainApiImpl EvolutionChainApiserver(router);
    EvolutionChainApiserver.init();
    EvolutionTriggerApiImpl EvolutionTriggerApiserver(router);
    EvolutionTriggerApiserver.init();
    GenderApiImpl GenderApiserver(router);
    GenderApiserver.init();
    GenerationApiImpl GenerationApiserver(router);
    GenerationApiserver.init();
    GrowthRateApiImpl GrowthRateApiserver(router);
    GrowthRateApiserver.init();
    ItemApiImpl ItemApiserver(router);
    ItemApiserver.init();
    ItemAttributeApiImpl ItemAttributeApiserver(router);
    ItemAttributeApiserver.init();
    ItemCategoryApiImpl ItemCategoryApiserver(router);
    ItemCategoryApiserver.init();
    ItemFlingEffectApiImpl ItemFlingEffectApiserver(router);
    ItemFlingEffectApiserver.init();
    ItemPocketApiImpl ItemPocketApiserver(router);
    ItemPocketApiserver.init();
    LanguageApiImpl LanguageApiserver(router);
    LanguageApiserver.init();
    LocationApiImpl LocationApiserver(router);
    LocationApiserver.init();
    LocationAreaApiImpl LocationAreaApiserver(router);
    LocationAreaApiserver.init();
    MachineApiImpl MachineApiserver(router);
    MachineApiserver.init();
    MoveApiImpl MoveApiserver(router);
    MoveApiserver.init();
    MoveAilmentApiImpl MoveAilmentApiserver(router);
    MoveAilmentApiserver.init();
    MoveBattleStyleApiImpl MoveBattleStyleApiserver(router);
    MoveBattleStyleApiserver.init();
    MoveCategoryApiImpl MoveCategoryApiserver(router);
    MoveCategoryApiserver.init();
    MoveDamageClassApiImpl MoveDamageClassApiserver(router);
    MoveDamageClassApiserver.init();
    MoveLearnMethodApiImpl MoveLearnMethodApiserver(router);
    MoveLearnMethodApiserver.init();
    MoveTargetApiImpl MoveTargetApiserver(router);
    MoveTargetApiserver.init();
    NatureApiImpl NatureApiserver(router);
    NatureApiserver.init();
    PalParkAreaApiImpl PalParkAreaApiserver(router);
    PalParkAreaApiserver.init();
    PokeathlonStatApiImpl PokeathlonStatApiserver(router);
    PokeathlonStatApiserver.init();
    PokedexApiImpl PokedexApiserver(router);
    PokedexApiserver.init();
    PokemonApiImpl PokemonApiserver(router);
    PokemonApiserver.init();
    PokemonColorApiImpl PokemonColorApiserver(router);
    PokemonColorApiserver.init();
    PokemonFormApiImpl PokemonFormApiserver(router);
    PokemonFormApiserver.init();
    PokemonHabitatApiImpl PokemonHabitatApiserver(router);
    PokemonHabitatApiserver.init();
    PokemonShapeApiImpl PokemonShapeApiserver(router);
    PokemonShapeApiserver.init();
    PokemonSpeciesApiImpl PokemonSpeciesApiserver(router);
    PokemonSpeciesApiserver.init();
    RegionApiImpl RegionApiserver(router);
    RegionApiserver.init();
    StatApiImpl StatApiserver(router);
    StatApiserver.init();
    SuperContestEffectApiImpl SuperContestEffectApiserver(router);
    SuperContestEffectApiserver.init();
    TypeApiImpl TypeApiserver(router);
    TypeApiserver.init();
    VersionApiImpl VersionApiserver(router);
    VersionApiserver.init();
    VersionGroupApiImpl VersionGroupApiserver(router);
    VersionGroupApiserver.init();

    httpEndpoint->setHandler(router->handler());
    httpEndpoint->serve();

    httpEndpoint->shutdown();

}
