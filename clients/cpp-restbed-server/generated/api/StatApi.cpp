/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20220523
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "StatApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

StatApiException::StatApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int StatApiException::getStatus() const
{
    return m_status;
}
const char* StatApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

StatApiApiV2StatResource::StatApiApiV2StatResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/api/v2/stat//");
	this->set_method_handler("GET",
		std::bind(&StatApiApiV2StatResource::handler_GET_internal, this,
			std::placeholders::_1));
}

StatApiApiV2StatResource::~StatApiApiV2StatResource()
{
}

std::pair<int, std::string> StatApiApiV2StatResource::handleStatApiException(const StatApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> StatApiApiV2StatResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> StatApiApiV2StatResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void StatApiApiV2StatResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void StatApiApiV2StatResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void StatApiApiV2StatResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void StatApiApiV2StatResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const int32_t limit = getQueryParam_limit(request);
    const int32_t offset = getQueryParam_offset(request);


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(limit, offset);
    }
    catch(const StatApiException& e) {
        std::tie(status_code, result) = handleStatApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 0) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Default response" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> StatApiApiV2StatResource::handler_GET(
        int32_t const & limit, int32_t const & offset)
{
    throw StatApiException(501, "Not implemented");
}


std::string StatApiApiV2StatResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
StatApiApiV2StatIdResource::StatApiApiV2StatIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/api/v2/stat/{id: .*}//");
	this->set_method_handler("GET",
		std::bind(&StatApiApiV2StatIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

StatApiApiV2StatIdResource::~StatApiApiV2StatIdResource()
{
}

std::pair<int, std::string> StatApiApiV2StatIdResource::handleStatApiException(const StatApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> StatApiApiV2StatIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> StatApiApiV2StatIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void StatApiApiV2StatIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void StatApiApiV2StatIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void StatApiApiV2StatIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void StatApiApiV2StatIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int32_t id = getPathParam_id(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(id);
    }
    catch(const StatApiException& e) {
        std::tie(status_code, result) = handleStatApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 0) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Default response" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> StatApiApiV2StatIdResource::handler_GET(
        int32_t const & id)
{
    throw StatApiException(501, "Not implemented");
}


std::string StatApiApiV2StatIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

StatApi::StatApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

StatApi::~StatApi() {}

void StatApi::setStatApiApiV2StatResource(std::shared_ptr<StatApiApiV2StatResource> spStatApiApiV2StatResource) {
    m_spStatApiApiV2StatResource = spStatApiApiV2StatResource;
    m_service->publish(m_spStatApiApiV2StatResource);
}
void StatApi::setStatApiApiV2StatIdResource(std::shared_ptr<StatApiApiV2StatIdResource> spStatApiApiV2StatIdResource) {
    m_spStatApiApiV2StatIdResource = spStatApiApiV2StatIdResource;
    m_service->publish(m_spStatApiApiV2StatIdResource);
}


void StatApi::publishDefaultResources() {
    if (!m_spStatApiApiV2StatResource) {
        setStatApiApiV2StatResource(std::make_shared<StatApiApiV2StatResource>());
    }
    if (!m_spStatApiApiV2StatIdResource) {
        setStatApiApiV2StatIdResource(std::make_shared<StatApiApiV2StatIdResource>());
    }
}

std::shared_ptr<restbed::Service> StatApi::service() {
    return m_service;
}


}
}
}
}

