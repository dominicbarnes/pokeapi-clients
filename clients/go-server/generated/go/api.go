/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 20220523
 * Contact: blah@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// AbilityApiRouter defines the required methods for binding the api requests to a responses for the AbilityApi
// The AbilityApiRouter implementation should parse necessary information from the http request,
// pass the data to a AbilityApiServicer to perform the required actions, then write the service results to the http response.
type AbilityApiRouter interface { 
	AbilityList(http.ResponseWriter, *http.Request)
	AbilityRead(http.ResponseWriter, *http.Request)
}
// BerryApiRouter defines the required methods for binding the api requests to a responses for the BerryApi
// The BerryApiRouter implementation should parse necessary information from the http request,
// pass the data to a BerryApiServicer to perform the required actions, then write the service results to the http response.
type BerryApiRouter interface { 
	BerryList(http.ResponseWriter, *http.Request)
	BerryRead(http.ResponseWriter, *http.Request)
}
// BerryFirmnessApiRouter defines the required methods for binding the api requests to a responses for the BerryFirmnessApi
// The BerryFirmnessApiRouter implementation should parse necessary information from the http request,
// pass the data to a BerryFirmnessApiServicer to perform the required actions, then write the service results to the http response.
type BerryFirmnessApiRouter interface { 
	BerryFirmnessList(http.ResponseWriter, *http.Request)
	BerryFirmnessRead(http.ResponseWriter, *http.Request)
}
// BerryFlavorApiRouter defines the required methods for binding the api requests to a responses for the BerryFlavorApi
// The BerryFlavorApiRouter implementation should parse necessary information from the http request,
// pass the data to a BerryFlavorApiServicer to perform the required actions, then write the service results to the http response.
type BerryFlavorApiRouter interface { 
	BerryFlavorList(http.ResponseWriter, *http.Request)
	BerryFlavorRead(http.ResponseWriter, *http.Request)
}
// CharacteristicApiRouter defines the required methods for binding the api requests to a responses for the CharacteristicApi
// The CharacteristicApiRouter implementation should parse necessary information from the http request,
// pass the data to a CharacteristicApiServicer to perform the required actions, then write the service results to the http response.
type CharacteristicApiRouter interface { 
	CharacteristicList(http.ResponseWriter, *http.Request)
	CharacteristicRead(http.ResponseWriter, *http.Request)
}
// ContestEffectApiRouter defines the required methods for binding the api requests to a responses for the ContestEffectApi
// The ContestEffectApiRouter implementation should parse necessary information from the http request,
// pass the data to a ContestEffectApiServicer to perform the required actions, then write the service results to the http response.
type ContestEffectApiRouter interface { 
	ContestEffectList(http.ResponseWriter, *http.Request)
	ContestEffectRead(http.ResponseWriter, *http.Request)
}
// ContestTypeApiRouter defines the required methods for binding the api requests to a responses for the ContestTypeApi
// The ContestTypeApiRouter implementation should parse necessary information from the http request,
// pass the data to a ContestTypeApiServicer to perform the required actions, then write the service results to the http response.
type ContestTypeApiRouter interface { 
	ContestTypeList(http.ResponseWriter, *http.Request)
	ContestTypeRead(http.ResponseWriter, *http.Request)
}
// EggGroupApiRouter defines the required methods for binding the api requests to a responses for the EggGroupApi
// The EggGroupApiRouter implementation should parse necessary information from the http request,
// pass the data to a EggGroupApiServicer to perform the required actions, then write the service results to the http response.
type EggGroupApiRouter interface { 
	EggGroupList(http.ResponseWriter, *http.Request)
	EggGroupRead(http.ResponseWriter, *http.Request)
}
// EncounterConditionApiRouter defines the required methods for binding the api requests to a responses for the EncounterConditionApi
// The EncounterConditionApiRouter implementation should parse necessary information from the http request,
// pass the data to a EncounterConditionApiServicer to perform the required actions, then write the service results to the http response.
type EncounterConditionApiRouter interface { 
	EncounterConditionList(http.ResponseWriter, *http.Request)
	EncounterConditionRead(http.ResponseWriter, *http.Request)
}
// EncounterConditionValueApiRouter defines the required methods for binding the api requests to a responses for the EncounterConditionValueApi
// The EncounterConditionValueApiRouter implementation should parse necessary information from the http request,
// pass the data to a EncounterConditionValueApiServicer to perform the required actions, then write the service results to the http response.
type EncounterConditionValueApiRouter interface { 
	EncounterConditionValueList(http.ResponseWriter, *http.Request)
	EncounterConditionValueRead(http.ResponseWriter, *http.Request)
}
// EncounterMethodApiRouter defines the required methods for binding the api requests to a responses for the EncounterMethodApi
// The EncounterMethodApiRouter implementation should parse necessary information from the http request,
// pass the data to a EncounterMethodApiServicer to perform the required actions, then write the service results to the http response.
type EncounterMethodApiRouter interface { 
	EncounterMethodList(http.ResponseWriter, *http.Request)
	EncounterMethodRead(http.ResponseWriter, *http.Request)
}
// EvolutionChainApiRouter defines the required methods for binding the api requests to a responses for the EvolutionChainApi
// The EvolutionChainApiRouter implementation should parse necessary information from the http request,
// pass the data to a EvolutionChainApiServicer to perform the required actions, then write the service results to the http response.
type EvolutionChainApiRouter interface { 
	EvolutionChainList(http.ResponseWriter, *http.Request)
	EvolutionChainRead(http.ResponseWriter, *http.Request)
}
// EvolutionTriggerApiRouter defines the required methods for binding the api requests to a responses for the EvolutionTriggerApi
// The EvolutionTriggerApiRouter implementation should parse necessary information from the http request,
// pass the data to a EvolutionTriggerApiServicer to perform the required actions, then write the service results to the http response.
type EvolutionTriggerApiRouter interface { 
	EvolutionTriggerList(http.ResponseWriter, *http.Request)
	EvolutionTriggerRead(http.ResponseWriter, *http.Request)
}
// GenderApiRouter defines the required methods for binding the api requests to a responses for the GenderApi
// The GenderApiRouter implementation should parse necessary information from the http request,
// pass the data to a GenderApiServicer to perform the required actions, then write the service results to the http response.
type GenderApiRouter interface { 
	GenderList(http.ResponseWriter, *http.Request)
	GenderRead(http.ResponseWriter, *http.Request)
}
// GenerationApiRouter defines the required methods for binding the api requests to a responses for the GenerationApi
// The GenerationApiRouter implementation should parse necessary information from the http request,
// pass the data to a GenerationApiServicer to perform the required actions, then write the service results to the http response.
type GenerationApiRouter interface { 
	GenerationList(http.ResponseWriter, *http.Request)
	GenerationRead(http.ResponseWriter, *http.Request)
}
// GrowthRateApiRouter defines the required methods for binding the api requests to a responses for the GrowthRateApi
// The GrowthRateApiRouter implementation should parse necessary information from the http request,
// pass the data to a GrowthRateApiServicer to perform the required actions, then write the service results to the http response.
type GrowthRateApiRouter interface { 
	GrowthRateList(http.ResponseWriter, *http.Request)
	GrowthRateRead(http.ResponseWriter, *http.Request)
}
// ItemApiRouter defines the required methods for binding the api requests to a responses for the ItemApi
// The ItemApiRouter implementation should parse necessary information from the http request,
// pass the data to a ItemApiServicer to perform the required actions, then write the service results to the http response.
type ItemApiRouter interface { 
	ItemList(http.ResponseWriter, *http.Request)
	ItemRead(http.ResponseWriter, *http.Request)
}
// ItemAttributeApiRouter defines the required methods for binding the api requests to a responses for the ItemAttributeApi
// The ItemAttributeApiRouter implementation should parse necessary information from the http request,
// pass the data to a ItemAttributeApiServicer to perform the required actions, then write the service results to the http response.
type ItemAttributeApiRouter interface { 
	ItemAttributeList(http.ResponseWriter, *http.Request)
	ItemAttributeRead(http.ResponseWriter, *http.Request)
}
// ItemCategoryApiRouter defines the required methods for binding the api requests to a responses for the ItemCategoryApi
// The ItemCategoryApiRouter implementation should parse necessary information from the http request,
// pass the data to a ItemCategoryApiServicer to perform the required actions, then write the service results to the http response.
type ItemCategoryApiRouter interface { 
	ItemCategoryList(http.ResponseWriter, *http.Request)
	ItemCategoryRead(http.ResponseWriter, *http.Request)
}
// ItemFlingEffectApiRouter defines the required methods for binding the api requests to a responses for the ItemFlingEffectApi
// The ItemFlingEffectApiRouter implementation should parse necessary information from the http request,
// pass the data to a ItemFlingEffectApiServicer to perform the required actions, then write the service results to the http response.
type ItemFlingEffectApiRouter interface { 
	ItemFlingEffectList(http.ResponseWriter, *http.Request)
	ItemFlingEffectRead(http.ResponseWriter, *http.Request)
}
// ItemPocketApiRouter defines the required methods for binding the api requests to a responses for the ItemPocketApi
// The ItemPocketApiRouter implementation should parse necessary information from the http request,
// pass the data to a ItemPocketApiServicer to perform the required actions, then write the service results to the http response.
type ItemPocketApiRouter interface { 
	ItemPocketList(http.ResponseWriter, *http.Request)
	ItemPocketRead(http.ResponseWriter, *http.Request)
}
// LanguageApiRouter defines the required methods for binding the api requests to a responses for the LanguageApi
// The LanguageApiRouter implementation should parse necessary information from the http request,
// pass the data to a LanguageApiServicer to perform the required actions, then write the service results to the http response.
type LanguageApiRouter interface { 
	LanguageList(http.ResponseWriter, *http.Request)
	LanguageRead(http.ResponseWriter, *http.Request)
}
// LocationApiRouter defines the required methods for binding the api requests to a responses for the LocationApi
// The LocationApiRouter implementation should parse necessary information from the http request,
// pass the data to a LocationApiServicer to perform the required actions, then write the service results to the http response.
type LocationApiRouter interface { 
	LocationList(http.ResponseWriter, *http.Request)
	LocationRead(http.ResponseWriter, *http.Request)
}
// LocationAreaApiRouter defines the required methods for binding the api requests to a responses for the LocationAreaApi
// The LocationAreaApiRouter implementation should parse necessary information from the http request,
// pass the data to a LocationAreaApiServicer to perform the required actions, then write the service results to the http response.
type LocationAreaApiRouter interface { 
	LocationAreaList(http.ResponseWriter, *http.Request)
	LocationAreaRead(http.ResponseWriter, *http.Request)
}
// MachineApiRouter defines the required methods for binding the api requests to a responses for the MachineApi
// The MachineApiRouter implementation should parse necessary information from the http request,
// pass the data to a MachineApiServicer to perform the required actions, then write the service results to the http response.
type MachineApiRouter interface { 
	MachineList(http.ResponseWriter, *http.Request)
	MachineRead(http.ResponseWriter, *http.Request)
}
// MoveApiRouter defines the required methods for binding the api requests to a responses for the MoveApi
// The MoveApiRouter implementation should parse necessary information from the http request,
// pass the data to a MoveApiServicer to perform the required actions, then write the service results to the http response.
type MoveApiRouter interface { 
	MoveList(http.ResponseWriter, *http.Request)
	MoveRead(http.ResponseWriter, *http.Request)
}
// MoveAilmentApiRouter defines the required methods for binding the api requests to a responses for the MoveAilmentApi
// The MoveAilmentApiRouter implementation should parse necessary information from the http request,
// pass the data to a MoveAilmentApiServicer to perform the required actions, then write the service results to the http response.
type MoveAilmentApiRouter interface { 
	MoveAilmentList(http.ResponseWriter, *http.Request)
	MoveAilmentRead(http.ResponseWriter, *http.Request)
}
// MoveBattleStyleApiRouter defines the required methods for binding the api requests to a responses for the MoveBattleStyleApi
// The MoveBattleStyleApiRouter implementation should parse necessary information from the http request,
// pass the data to a MoveBattleStyleApiServicer to perform the required actions, then write the service results to the http response.
type MoveBattleStyleApiRouter interface { 
	MoveBattleStyleList(http.ResponseWriter, *http.Request)
	MoveBattleStyleRead(http.ResponseWriter, *http.Request)
}
// MoveCategoryApiRouter defines the required methods for binding the api requests to a responses for the MoveCategoryApi
// The MoveCategoryApiRouter implementation should parse necessary information from the http request,
// pass the data to a MoveCategoryApiServicer to perform the required actions, then write the service results to the http response.
type MoveCategoryApiRouter interface { 
	MoveCategoryList(http.ResponseWriter, *http.Request)
	MoveCategoryRead(http.ResponseWriter, *http.Request)
}
// MoveDamageClassApiRouter defines the required methods for binding the api requests to a responses for the MoveDamageClassApi
// The MoveDamageClassApiRouter implementation should parse necessary information from the http request,
// pass the data to a MoveDamageClassApiServicer to perform the required actions, then write the service results to the http response.
type MoveDamageClassApiRouter interface { 
	MoveDamageClassList(http.ResponseWriter, *http.Request)
	MoveDamageClassRead(http.ResponseWriter, *http.Request)
}
// MoveLearnMethodApiRouter defines the required methods for binding the api requests to a responses for the MoveLearnMethodApi
// The MoveLearnMethodApiRouter implementation should parse necessary information from the http request,
// pass the data to a MoveLearnMethodApiServicer to perform the required actions, then write the service results to the http response.
type MoveLearnMethodApiRouter interface { 
	MoveLearnMethodList(http.ResponseWriter, *http.Request)
	MoveLearnMethodRead(http.ResponseWriter, *http.Request)
}
// MoveTargetApiRouter defines the required methods for binding the api requests to a responses for the MoveTargetApi
// The MoveTargetApiRouter implementation should parse necessary information from the http request,
// pass the data to a MoveTargetApiServicer to perform the required actions, then write the service results to the http response.
type MoveTargetApiRouter interface { 
	MoveTargetList(http.ResponseWriter, *http.Request)
	MoveTargetRead(http.ResponseWriter, *http.Request)
}
// NatureApiRouter defines the required methods for binding the api requests to a responses for the NatureApi
// The NatureApiRouter implementation should parse necessary information from the http request,
// pass the data to a NatureApiServicer to perform the required actions, then write the service results to the http response.
type NatureApiRouter interface { 
	NatureList(http.ResponseWriter, *http.Request)
	NatureRead(http.ResponseWriter, *http.Request)
}
// PalParkAreaApiRouter defines the required methods for binding the api requests to a responses for the PalParkAreaApi
// The PalParkAreaApiRouter implementation should parse necessary information from the http request,
// pass the data to a PalParkAreaApiServicer to perform the required actions, then write the service results to the http response.
type PalParkAreaApiRouter interface { 
	PalParkAreaList(http.ResponseWriter, *http.Request)
	PalParkAreaRead(http.ResponseWriter, *http.Request)
}
// PokeathlonStatApiRouter defines the required methods for binding the api requests to a responses for the PokeathlonStatApi
// The PokeathlonStatApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokeathlonStatApiServicer to perform the required actions, then write the service results to the http response.
type PokeathlonStatApiRouter interface { 
	PokeathlonStatList(http.ResponseWriter, *http.Request)
	PokeathlonStatRead(http.ResponseWriter, *http.Request)
}
// PokedexApiRouter defines the required methods for binding the api requests to a responses for the PokedexApi
// The PokedexApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokedexApiServicer to perform the required actions, then write the service results to the http response.
type PokedexApiRouter interface { 
	PokedexList(http.ResponseWriter, *http.Request)
	PokedexRead(http.ResponseWriter, *http.Request)
}
// PokemonApiRouter defines the required methods for binding the api requests to a responses for the PokemonApi
// The PokemonApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonApiServicer to perform the required actions, then write the service results to the http response.
type PokemonApiRouter interface { 
	PokemonList(http.ResponseWriter, *http.Request)
	PokemonRead(http.ResponseWriter, *http.Request)
}
// PokemonColorApiRouter defines the required methods for binding the api requests to a responses for the PokemonColorApi
// The PokemonColorApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonColorApiServicer to perform the required actions, then write the service results to the http response.
type PokemonColorApiRouter interface { 
	PokemonColorList(http.ResponseWriter, *http.Request)
	PokemonColorRead(http.ResponseWriter, *http.Request)
}
// PokemonFormApiRouter defines the required methods for binding the api requests to a responses for the PokemonFormApi
// The PokemonFormApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonFormApiServicer to perform the required actions, then write the service results to the http response.
type PokemonFormApiRouter interface { 
	PokemonFormList(http.ResponseWriter, *http.Request)
	PokemonFormRead(http.ResponseWriter, *http.Request)
}
// PokemonHabitatApiRouter defines the required methods for binding the api requests to a responses for the PokemonHabitatApi
// The PokemonHabitatApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonHabitatApiServicer to perform the required actions, then write the service results to the http response.
type PokemonHabitatApiRouter interface { 
	PokemonHabitatList(http.ResponseWriter, *http.Request)
	PokemonHabitatRead(http.ResponseWriter, *http.Request)
}
// PokemonShapeApiRouter defines the required methods for binding the api requests to a responses for the PokemonShapeApi
// The PokemonShapeApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonShapeApiServicer to perform the required actions, then write the service results to the http response.
type PokemonShapeApiRouter interface { 
	PokemonShapeList(http.ResponseWriter, *http.Request)
	PokemonShapeRead(http.ResponseWriter, *http.Request)
}
// PokemonSpeciesApiRouter defines the required methods for binding the api requests to a responses for the PokemonSpeciesApi
// The PokemonSpeciesApiRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonSpeciesApiServicer to perform the required actions, then write the service results to the http response.
type PokemonSpeciesApiRouter interface { 
	PokemonSpeciesList(http.ResponseWriter, *http.Request)
	PokemonSpeciesRead(http.ResponseWriter, *http.Request)
}
// RegionApiRouter defines the required methods for binding the api requests to a responses for the RegionApi
// The RegionApiRouter implementation should parse necessary information from the http request,
// pass the data to a RegionApiServicer to perform the required actions, then write the service results to the http response.
type RegionApiRouter interface { 
	RegionList(http.ResponseWriter, *http.Request)
	RegionRead(http.ResponseWriter, *http.Request)
}
// StatApiRouter defines the required methods for binding the api requests to a responses for the StatApi
// The StatApiRouter implementation should parse necessary information from the http request,
// pass the data to a StatApiServicer to perform the required actions, then write the service results to the http response.
type StatApiRouter interface { 
	StatList(http.ResponseWriter, *http.Request)
	StatRead(http.ResponseWriter, *http.Request)
}
// SuperContestEffectApiRouter defines the required methods for binding the api requests to a responses for the SuperContestEffectApi
// The SuperContestEffectApiRouter implementation should parse necessary information from the http request,
// pass the data to a SuperContestEffectApiServicer to perform the required actions, then write the service results to the http response.
type SuperContestEffectApiRouter interface { 
	SuperContestEffectList(http.ResponseWriter, *http.Request)
	SuperContestEffectRead(http.ResponseWriter, *http.Request)
}
// TypeApiRouter defines the required methods for binding the api requests to a responses for the TypeApi
// The TypeApiRouter implementation should parse necessary information from the http request,
// pass the data to a TypeApiServicer to perform the required actions, then write the service results to the http response.
type TypeApiRouter interface { 
	TypeList(http.ResponseWriter, *http.Request)
	TypeRead(http.ResponseWriter, *http.Request)
}
// VersionApiRouter defines the required methods for binding the api requests to a responses for the VersionApi
// The VersionApiRouter implementation should parse necessary information from the http request,
// pass the data to a VersionApiServicer to perform the required actions, then write the service results to the http response.
type VersionApiRouter interface { 
	VersionList(http.ResponseWriter, *http.Request)
	VersionRead(http.ResponseWriter, *http.Request)
}
// VersionGroupApiRouter defines the required methods for binding the api requests to a responses for the VersionGroupApi
// The VersionGroupApiRouter implementation should parse necessary information from the http request,
// pass the data to a VersionGroupApiServicer to perform the required actions, then write the service results to the http response.
type VersionGroupApiRouter interface { 
	VersionGroupList(http.ResponseWriter, *http.Request)
	VersionGroupRead(http.ResponseWriter, *http.Request)
}


// AbilityApiServicer defines the api actions for the AbilityApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AbilityApiServicer interface { 
	AbilityList(context.Context, int32, int32) (ImplResponse, error)
	AbilityRead(context.Context, int32) (ImplResponse, error)
}


// BerryApiServicer defines the api actions for the BerryApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BerryApiServicer interface { 
	BerryList(context.Context, int32, int32) (ImplResponse, error)
	BerryRead(context.Context, int32) (ImplResponse, error)
}


// BerryFirmnessApiServicer defines the api actions for the BerryFirmnessApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BerryFirmnessApiServicer interface { 
	BerryFirmnessList(context.Context, int32, int32) (ImplResponse, error)
	BerryFirmnessRead(context.Context, int32) (ImplResponse, error)
}


// BerryFlavorApiServicer defines the api actions for the BerryFlavorApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BerryFlavorApiServicer interface { 
	BerryFlavorList(context.Context, int32, int32) (ImplResponse, error)
	BerryFlavorRead(context.Context, int32) (ImplResponse, error)
}


// CharacteristicApiServicer defines the api actions for the CharacteristicApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CharacteristicApiServicer interface { 
	CharacteristicList(context.Context, int32, int32) (ImplResponse, error)
	CharacteristicRead(context.Context, int32) (ImplResponse, error)
}


// ContestEffectApiServicer defines the api actions for the ContestEffectApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ContestEffectApiServicer interface { 
	ContestEffectList(context.Context, int32, int32) (ImplResponse, error)
	ContestEffectRead(context.Context, int32) (ImplResponse, error)
}


// ContestTypeApiServicer defines the api actions for the ContestTypeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ContestTypeApiServicer interface { 
	ContestTypeList(context.Context, int32, int32) (ImplResponse, error)
	ContestTypeRead(context.Context, int32) (ImplResponse, error)
}


// EggGroupApiServicer defines the api actions for the EggGroupApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EggGroupApiServicer interface { 
	EggGroupList(context.Context, int32, int32) (ImplResponse, error)
	EggGroupRead(context.Context, int32) (ImplResponse, error)
}


// EncounterConditionApiServicer defines the api actions for the EncounterConditionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EncounterConditionApiServicer interface { 
	EncounterConditionList(context.Context, int32, int32) (ImplResponse, error)
	EncounterConditionRead(context.Context, int32) (ImplResponse, error)
}


// EncounterConditionValueApiServicer defines the api actions for the EncounterConditionValueApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EncounterConditionValueApiServicer interface { 
	EncounterConditionValueList(context.Context, int32, int32) (ImplResponse, error)
	EncounterConditionValueRead(context.Context, int32) (ImplResponse, error)
}


// EncounterMethodApiServicer defines the api actions for the EncounterMethodApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EncounterMethodApiServicer interface { 
	EncounterMethodList(context.Context, int32, int32) (ImplResponse, error)
	EncounterMethodRead(context.Context, int32) (ImplResponse, error)
}


// EvolutionChainApiServicer defines the api actions for the EvolutionChainApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EvolutionChainApiServicer interface { 
	EvolutionChainList(context.Context, int32, int32) (ImplResponse, error)
	EvolutionChainRead(context.Context, int32) (ImplResponse, error)
}


// EvolutionTriggerApiServicer defines the api actions for the EvolutionTriggerApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EvolutionTriggerApiServicer interface { 
	EvolutionTriggerList(context.Context, int32, int32) (ImplResponse, error)
	EvolutionTriggerRead(context.Context, int32) (ImplResponse, error)
}


// GenderApiServicer defines the api actions for the GenderApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GenderApiServicer interface { 
	GenderList(context.Context, int32, int32) (ImplResponse, error)
	GenderRead(context.Context, int32) (ImplResponse, error)
}


// GenerationApiServicer defines the api actions for the GenerationApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GenerationApiServicer interface { 
	GenerationList(context.Context, int32, int32) (ImplResponse, error)
	GenerationRead(context.Context, int32) (ImplResponse, error)
}


// GrowthRateApiServicer defines the api actions for the GrowthRateApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GrowthRateApiServicer interface { 
	GrowthRateList(context.Context, int32, int32) (ImplResponse, error)
	GrowthRateRead(context.Context, int32) (ImplResponse, error)
}


// ItemApiServicer defines the api actions for the ItemApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemApiServicer interface { 
	ItemList(context.Context, int32, int32) (ImplResponse, error)
	ItemRead(context.Context, int32) (ImplResponse, error)
}


// ItemAttributeApiServicer defines the api actions for the ItemAttributeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemAttributeApiServicer interface { 
	ItemAttributeList(context.Context, int32, int32) (ImplResponse, error)
	ItemAttributeRead(context.Context, int32) (ImplResponse, error)
}


// ItemCategoryApiServicer defines the api actions for the ItemCategoryApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemCategoryApiServicer interface { 
	ItemCategoryList(context.Context, int32, int32) (ImplResponse, error)
	ItemCategoryRead(context.Context, int32) (ImplResponse, error)
}


// ItemFlingEffectApiServicer defines the api actions for the ItemFlingEffectApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemFlingEffectApiServicer interface { 
	ItemFlingEffectList(context.Context, int32, int32) (ImplResponse, error)
	ItemFlingEffectRead(context.Context, int32) (ImplResponse, error)
}


// ItemPocketApiServicer defines the api actions for the ItemPocketApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemPocketApiServicer interface { 
	ItemPocketList(context.Context, int32, int32) (ImplResponse, error)
	ItemPocketRead(context.Context, int32) (ImplResponse, error)
}


// LanguageApiServicer defines the api actions for the LanguageApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LanguageApiServicer interface { 
	LanguageList(context.Context, int32, int32) (ImplResponse, error)
	LanguageRead(context.Context, int32) (ImplResponse, error)
}


// LocationApiServicer defines the api actions for the LocationApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LocationApiServicer interface { 
	LocationList(context.Context, int32, int32) (ImplResponse, error)
	LocationRead(context.Context, int32) (ImplResponse, error)
}


// LocationAreaApiServicer defines the api actions for the LocationAreaApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LocationAreaApiServicer interface { 
	LocationAreaList(context.Context, int32, int32) (ImplResponse, error)
	LocationAreaRead(context.Context, int32) (ImplResponse, error)
}


// MachineApiServicer defines the api actions for the MachineApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MachineApiServicer interface { 
	MachineList(context.Context, int32, int32) (ImplResponse, error)
	MachineRead(context.Context, int32) (ImplResponse, error)
}


// MoveApiServicer defines the api actions for the MoveApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveApiServicer interface { 
	MoveList(context.Context, int32, int32) (ImplResponse, error)
	MoveRead(context.Context, int32) (ImplResponse, error)
}


// MoveAilmentApiServicer defines the api actions for the MoveAilmentApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveAilmentApiServicer interface { 
	MoveAilmentList(context.Context, int32, int32) (ImplResponse, error)
	MoveAilmentRead(context.Context, int32) (ImplResponse, error)
}


// MoveBattleStyleApiServicer defines the api actions for the MoveBattleStyleApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveBattleStyleApiServicer interface { 
	MoveBattleStyleList(context.Context, int32, int32) (ImplResponse, error)
	MoveBattleStyleRead(context.Context, int32) (ImplResponse, error)
}


// MoveCategoryApiServicer defines the api actions for the MoveCategoryApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveCategoryApiServicer interface { 
	MoveCategoryList(context.Context, int32, int32) (ImplResponse, error)
	MoveCategoryRead(context.Context, int32) (ImplResponse, error)
}


// MoveDamageClassApiServicer defines the api actions for the MoveDamageClassApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveDamageClassApiServicer interface { 
	MoveDamageClassList(context.Context, int32, int32) (ImplResponse, error)
	MoveDamageClassRead(context.Context, int32) (ImplResponse, error)
}


// MoveLearnMethodApiServicer defines the api actions for the MoveLearnMethodApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveLearnMethodApiServicer interface { 
	MoveLearnMethodList(context.Context, int32, int32) (ImplResponse, error)
	MoveLearnMethodRead(context.Context, int32) (ImplResponse, error)
}


// MoveTargetApiServicer defines the api actions for the MoveTargetApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveTargetApiServicer interface { 
	MoveTargetList(context.Context, int32, int32) (ImplResponse, error)
	MoveTargetRead(context.Context, int32) (ImplResponse, error)
}


// NatureApiServicer defines the api actions for the NatureApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NatureApiServicer interface { 
	NatureList(context.Context, int32, int32) (ImplResponse, error)
	NatureRead(context.Context, int32) (ImplResponse, error)
}


// PalParkAreaApiServicer defines the api actions for the PalParkAreaApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PalParkAreaApiServicer interface { 
	PalParkAreaList(context.Context, int32, int32) (ImplResponse, error)
	PalParkAreaRead(context.Context, int32) (ImplResponse, error)
}


// PokeathlonStatApiServicer defines the api actions for the PokeathlonStatApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokeathlonStatApiServicer interface { 
	PokeathlonStatList(context.Context, int32, int32) (ImplResponse, error)
	PokeathlonStatRead(context.Context, int32) (ImplResponse, error)
}


// PokedexApiServicer defines the api actions for the PokedexApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokedexApiServicer interface { 
	PokedexList(context.Context, int32, int32) (ImplResponse, error)
	PokedexRead(context.Context, int32) (ImplResponse, error)
}


// PokemonApiServicer defines the api actions for the PokemonApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonApiServicer interface { 
	PokemonList(context.Context, int32, int32) (ImplResponse, error)
	PokemonRead(context.Context, int32) (ImplResponse, error)
}


// PokemonColorApiServicer defines the api actions for the PokemonColorApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonColorApiServicer interface { 
	PokemonColorList(context.Context, int32, int32) (ImplResponse, error)
	PokemonColorRead(context.Context, int32) (ImplResponse, error)
}


// PokemonFormApiServicer defines the api actions for the PokemonFormApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonFormApiServicer interface { 
	PokemonFormList(context.Context, int32, int32) (ImplResponse, error)
	PokemonFormRead(context.Context, int32) (ImplResponse, error)
}


// PokemonHabitatApiServicer defines the api actions for the PokemonHabitatApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonHabitatApiServicer interface { 
	PokemonHabitatList(context.Context, int32, int32) (ImplResponse, error)
	PokemonHabitatRead(context.Context, int32) (ImplResponse, error)
}


// PokemonShapeApiServicer defines the api actions for the PokemonShapeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonShapeApiServicer interface { 
	PokemonShapeList(context.Context, int32, int32) (ImplResponse, error)
	PokemonShapeRead(context.Context, int32) (ImplResponse, error)
}


// PokemonSpeciesApiServicer defines the api actions for the PokemonSpeciesApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonSpeciesApiServicer interface { 
	PokemonSpeciesList(context.Context, int32, int32) (ImplResponse, error)
	PokemonSpeciesRead(context.Context, int32) (ImplResponse, error)
}


// RegionApiServicer defines the api actions for the RegionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RegionApiServicer interface { 
	RegionList(context.Context, int32, int32) (ImplResponse, error)
	RegionRead(context.Context, int32) (ImplResponse, error)
}


// StatApiServicer defines the api actions for the StatApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatApiServicer interface { 
	StatList(context.Context, int32, int32) (ImplResponse, error)
	StatRead(context.Context, int32) (ImplResponse, error)
}


// SuperContestEffectApiServicer defines the api actions for the SuperContestEffectApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SuperContestEffectApiServicer interface { 
	SuperContestEffectList(context.Context, int32, int32) (ImplResponse, error)
	SuperContestEffectRead(context.Context, int32) (ImplResponse, error)
}


// TypeApiServicer defines the api actions for the TypeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TypeApiServicer interface { 
	TypeList(context.Context, int32, int32) (ImplResponse, error)
	TypeRead(context.Context, int32) (ImplResponse, error)
}


// VersionApiServicer defines the api actions for the VersionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VersionApiServicer interface { 
	VersionList(context.Context, int32, int32) (ImplResponse, error)
	VersionRead(context.Context, int32) (ImplResponse, error)
}


// VersionGroupApiServicer defines the api actions for the VersionGroupApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VersionGroupApiServicer interface { 
	VersionGroupList(context.Context, int32, int32) (ImplResponse, error)
	VersionGroupRead(context.Context, int32) (ImplResponse, error)
}
