/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 20220523
 * Contact: blah@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AbilityApiController binds http requests to an api service and writes the service results to the http response
type AbilityApiController struct {
	service AbilityApiServicer
	errorHandler ErrorHandler
}

// AbilityApiOption for how the controller is set up.
type AbilityApiOption func(*AbilityApiController)

// WithAbilityApiErrorHandler inject ErrorHandler into controller
func WithAbilityApiErrorHandler(h ErrorHandler) AbilityApiOption {
	return func(c *AbilityApiController) {
		c.errorHandler = h
	}
}

// NewAbilityApiController creates a default api controller
func NewAbilityApiController(s AbilityApiServicer, opts ...AbilityApiOption) Router {
	controller := &AbilityApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AbilityApiController
func (c *AbilityApiController) Routes() Routes {
	return Routes{ 
		{
			"AbilityList",
			strings.ToUpper("Get"),
			"/api/v2/ability/",
			c.AbilityList,
		},
		{
			"AbilityRead",
			strings.ToUpper("Get"),
			"/api/v2/ability/{id}/",
			c.AbilityRead,
		},
	}
}

// AbilityList - 
func (c *AbilityApiController) AbilityList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AbilityList(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AbilityRead - 
func (c *AbilityApiController) AbilityRead(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.AbilityRead(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
