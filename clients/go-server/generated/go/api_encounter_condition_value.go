/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 20220523
 * Contact: blah@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// EncounterConditionValueApiController binds http requests to an api service and writes the service results to the http response
type EncounterConditionValueApiController struct {
	service EncounterConditionValueApiServicer
	errorHandler ErrorHandler
}

// EncounterConditionValueApiOption for how the controller is set up.
type EncounterConditionValueApiOption func(*EncounterConditionValueApiController)

// WithEncounterConditionValueApiErrorHandler inject ErrorHandler into controller
func WithEncounterConditionValueApiErrorHandler(h ErrorHandler) EncounterConditionValueApiOption {
	return func(c *EncounterConditionValueApiController) {
		c.errorHandler = h
	}
}

// NewEncounterConditionValueApiController creates a default api controller
func NewEncounterConditionValueApiController(s EncounterConditionValueApiServicer, opts ...EncounterConditionValueApiOption) Router {
	controller := &EncounterConditionValueApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EncounterConditionValueApiController
func (c *EncounterConditionValueApiController) Routes() Routes {
	return Routes{ 
		{
			"EncounterConditionValueList",
			strings.ToUpper("Get"),
			"/api/v2/encounter-condition-value/",
			c.EncounterConditionValueList,
		},
		{
			"EncounterConditionValueRead",
			strings.ToUpper("Get"),
			"/api/v2/encounter-condition-value/{id}/",
			c.EncounterConditionValueRead,
		},
	}
}

// EncounterConditionValueList - 
func (c *EncounterConditionValueApiController) EncounterConditionValueList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.EncounterConditionValueList(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EncounterConditionValueRead - 
func (c *EncounterConditionValueApiController) EncounterConditionValueRead(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.EncounterConditionValueRead(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
