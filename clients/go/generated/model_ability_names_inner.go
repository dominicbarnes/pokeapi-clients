/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AbilityNamesInner struct for AbilityNamesInner
type AbilityNamesInner struct {
	// The localized name for an API resource in a specific language.
	Name *string `json:"name,omitempty"`
	Language *AbilityNamesInnerLanguage `json:"language,omitempty"`
}

// NewAbilityNamesInner instantiates a new AbilityNamesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbilityNamesInner() *AbilityNamesInner {
	this := AbilityNamesInner{}
	return &this
}

// NewAbilityNamesInnerWithDefaults instantiates a new AbilityNamesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbilityNamesInnerWithDefaults() *AbilityNamesInner {
	this := AbilityNamesInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AbilityNamesInner) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbilityNamesInner) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AbilityNamesInner) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AbilityNamesInner) SetName(v string) {
	o.Name = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AbilityNamesInner) GetLanguage() AbilityNamesInnerLanguage {
	if o == nil || isNil(o.Language) {
		var ret AbilityNamesInnerLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbilityNamesInner) GetLanguageOk() (*AbilityNamesInnerLanguage, bool) {
	if o == nil || isNil(o.Language) {
    return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AbilityNamesInner) HasLanguage() bool {
	if o != nil && !isNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given AbilityNamesInnerLanguage and assigns it to the Language field.
func (o *AbilityNamesInner) SetLanguage(v AbilityNamesInnerLanguage) {
	o.Language = &v
}

func (o AbilityNamesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}

type NullableAbilityNamesInner struct {
	value *AbilityNamesInner
	isSet bool
}

func (v NullableAbilityNamesInner) Get() *AbilityNamesInner {
	return v.value
}

func (v *NullableAbilityNamesInner) Set(val *AbilityNamesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityNamesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityNamesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityNamesInner(val *AbilityNamesInner) *NullableAbilityNamesInner {
	return &NullableAbilityNamesInner{value: val, isSet: true}
}

func (v NullableAbilityNamesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityNamesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


