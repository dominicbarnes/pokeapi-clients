/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AbilityNamesInnerLanguage struct for AbilityNamesInnerLanguage
type AbilityNamesInnerLanguage struct {
	// The name of the language.
	Name *string `json:"name,omitempty"`
	// The URL of the API endpoint for the language.
	Url *string `json:"url,omitempty"`
}

// NewAbilityNamesInnerLanguage instantiates a new AbilityNamesInnerLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbilityNamesInnerLanguage() *AbilityNamesInnerLanguage {
	this := AbilityNamesInnerLanguage{}
	return &this
}

// NewAbilityNamesInnerLanguageWithDefaults instantiates a new AbilityNamesInnerLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbilityNamesInnerLanguageWithDefaults() *AbilityNamesInnerLanguage {
	this := AbilityNamesInnerLanguage{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AbilityNamesInnerLanguage) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbilityNamesInnerLanguage) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AbilityNamesInnerLanguage) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AbilityNamesInnerLanguage) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AbilityNamesInnerLanguage) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbilityNamesInnerLanguage) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
    return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AbilityNamesInnerLanguage) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AbilityNamesInnerLanguage) SetUrl(v string) {
	o.Url = &v
}

func (o AbilityNamesInnerLanguage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableAbilityNamesInnerLanguage struct {
	value *AbilityNamesInnerLanguage
	isSet bool
}

func (v NullableAbilityNamesInnerLanguage) Get() *AbilityNamesInnerLanguage {
	return v.value
}

func (v *NullableAbilityNamesInnerLanguage) Set(val *AbilityNamesInnerLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityNamesInnerLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityNamesInnerLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityNamesInnerLanguage(val *AbilityNamesInnerLanguage) *NullableAbilityNamesInnerLanguage {
	return &NullableAbilityNamesInnerLanguage{value: val, isSet: true}
}

func (v NullableAbilityNamesInnerLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityNamesInnerLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


