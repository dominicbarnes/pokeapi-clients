/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Berry struct for Berry
type Berry struct {
	// The identifier for this berry resource
	Id int32 `json:"id"`
	// The name for this berry resource
	Name string `json:"name"`
	// Time it takes the tree to grow one stage, in hours. Berry trees go through four of these growth stages before they can be picked.
	GrowthTime int32 `json:"growth_time"`
	// The maximum number of these berries that can grow on one tree in Generation IV
	MaxHarvest int32 `json:"max_harvest"`
	// The power of the move \"Natural Gift\" when used with this Berry
	NaturalGiftPower int32 `json:"natural_gift_power"`
	// The size of this Berry, in millimeters
	Size int32 `json:"size"`
	// The smoothness of this Berry, used in making Pok√©blocks or Poffins
	Smoothness int32 `json:"smoothness"`
	// The speed at which this Berry dries out the soil as it grows. A higher rate means the soil dries more quickly.
	SoilDryness int32 `json:"soil_dryness"`
	Firmness BerryFirmness `json:"firmness"`
	// A list of references to each flavor a berry can have and the potency of each of those flavors in regard to this berry.
	Flavors []BerryFlavorMap `json:"flavors"`
}

// NewBerry instantiates a new Berry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBerry(id int32, name string, growthTime int32, maxHarvest int32, naturalGiftPower int32, size int32, smoothness int32, soilDryness int32, firmness BerryFirmness, flavors []BerryFlavorMap) *Berry {
	this := Berry{}
	this.Id = id
	this.Name = name
	this.GrowthTime = growthTime
	this.MaxHarvest = maxHarvest
	this.NaturalGiftPower = naturalGiftPower
	this.Size = size
	this.Smoothness = smoothness
	this.SoilDryness = soilDryness
	this.Firmness = firmness
	this.Flavors = flavors
	return &this
}

// NewBerryWithDefaults instantiates a new Berry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBerryWithDefaults() *Berry {
	this := Berry{}
	return &this
}

// GetId returns the Id field value
func (o *Berry) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Berry) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Berry) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Berry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Berry) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Berry) SetName(v string) {
	o.Name = v
}

// GetGrowthTime returns the GrowthTime field value
func (o *Berry) GetGrowthTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GrowthTime
}

// GetGrowthTimeOk returns a tuple with the GrowthTime field value
// and a boolean to check if the value has been set.
func (o *Berry) GetGrowthTimeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GrowthTime, true
}

// SetGrowthTime sets field value
func (o *Berry) SetGrowthTime(v int32) {
	o.GrowthTime = v
}

// GetMaxHarvest returns the MaxHarvest field value
func (o *Berry) GetMaxHarvest() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxHarvest
}

// GetMaxHarvestOk returns a tuple with the MaxHarvest field value
// and a boolean to check if the value has been set.
func (o *Berry) GetMaxHarvestOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MaxHarvest, true
}

// SetMaxHarvest sets field value
func (o *Berry) SetMaxHarvest(v int32) {
	o.MaxHarvest = v
}

// GetNaturalGiftPower returns the NaturalGiftPower field value
func (o *Berry) GetNaturalGiftPower() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NaturalGiftPower
}

// GetNaturalGiftPowerOk returns a tuple with the NaturalGiftPower field value
// and a boolean to check if the value has been set.
func (o *Berry) GetNaturalGiftPowerOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NaturalGiftPower, true
}

// SetNaturalGiftPower sets field value
func (o *Berry) SetNaturalGiftPower(v int32) {
	o.NaturalGiftPower = v
}

// GetSize returns the Size field value
func (o *Berry) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Berry) GetSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Berry) SetSize(v int32) {
	o.Size = v
}

// GetSmoothness returns the Smoothness field value
func (o *Berry) GetSmoothness() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Smoothness
}

// GetSmoothnessOk returns a tuple with the Smoothness field value
// and a boolean to check if the value has been set.
func (o *Berry) GetSmoothnessOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Smoothness, true
}

// SetSmoothness sets field value
func (o *Berry) SetSmoothness(v int32) {
	o.Smoothness = v
}

// GetSoilDryness returns the SoilDryness field value
func (o *Berry) GetSoilDryness() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoilDryness
}

// GetSoilDrynessOk returns a tuple with the SoilDryness field value
// and a boolean to check if the value has been set.
func (o *Berry) GetSoilDrynessOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SoilDryness, true
}

// SetSoilDryness sets field value
func (o *Berry) SetSoilDryness(v int32) {
	o.SoilDryness = v
}

// GetFirmness returns the Firmness field value
func (o *Berry) GetFirmness() BerryFirmness {
	if o == nil {
		var ret BerryFirmness
		return ret
	}

	return o.Firmness
}

// GetFirmnessOk returns a tuple with the Firmness field value
// and a boolean to check if the value has been set.
func (o *Berry) GetFirmnessOk() (*BerryFirmness, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Firmness, true
}

// SetFirmness sets field value
func (o *Berry) SetFirmness(v BerryFirmness) {
	o.Firmness = v
}

// GetFlavors returns the Flavors field value
func (o *Berry) GetFlavors() []BerryFlavorMap {
	if o == nil {
		var ret []BerryFlavorMap
		return ret
	}

	return o.Flavors
}

// GetFlavorsOk returns a tuple with the Flavors field value
// and a boolean to check if the value has been set.
func (o *Berry) GetFlavorsOk() ([]BerryFlavorMap, bool) {
	if o == nil {
    return nil, false
	}
	return o.Flavors, true
}

// SetFlavors sets field value
func (o *Berry) SetFlavors(v []BerryFlavorMap) {
	o.Flavors = v
}

func (o Berry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["growth_time"] = o.GrowthTime
	}
	if true {
		toSerialize["max_harvest"] = o.MaxHarvest
	}
	if true {
		toSerialize["natural_gift_power"] = o.NaturalGiftPower
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["smoothness"] = o.Smoothness
	}
	if true {
		toSerialize["soil_dryness"] = o.SoilDryness
	}
	if true {
		toSerialize["firmness"] = o.Firmness
	}
	if true {
		toSerialize["flavors"] = o.Flavors
	}
	return json.Marshal(toSerialize)
}

type NullableBerry struct {
	value *Berry
	isSet bool
}

func (v NullableBerry) Get() *Berry {
	return v.value
}

func (v *NullableBerry) Set(val *Berry) {
	v.value = val
	v.isSet = true
}

func (v NullableBerry) IsSet() bool {
	return v.isSet
}

func (v *NullableBerry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBerry(val *Berry) *NullableBerry {
	return &NullableBerry{value: val, isSet: true}
}

func (v NullableBerry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBerry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


