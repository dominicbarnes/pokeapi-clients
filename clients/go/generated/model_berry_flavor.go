/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BerryFlavor struct for BerryFlavor
type BerryFlavor struct {
	// The identifier for this berry flavor resource
	Id int32 `json:"id"`
	// The name for this berry flavor resource
	Name string `json:"name"`
	// A list of the berries with this flavor
	Berries []BerryFlavorMap `json:"berries,omitempty"`
}

// NewBerryFlavor instantiates a new BerryFlavor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBerryFlavor(id int32, name string) *BerryFlavor {
	this := BerryFlavor{}
	this.Id = id
	this.Name = name
	return &this
}

// NewBerryFlavorWithDefaults instantiates a new BerryFlavor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBerryFlavorWithDefaults() *BerryFlavor {
	this := BerryFlavor{}
	return &this
}

// GetId returns the Id field value
func (o *BerryFlavor) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BerryFlavor) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BerryFlavor) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *BerryFlavor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BerryFlavor) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BerryFlavor) SetName(v string) {
	o.Name = v
}

// GetBerries returns the Berries field value if set, zero value otherwise.
func (o *BerryFlavor) GetBerries() []BerryFlavorMap {
	if o == nil || isNil(o.Berries) {
		var ret []BerryFlavorMap
		return ret
	}
	return o.Berries
}

// GetBerriesOk returns a tuple with the Berries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BerryFlavor) GetBerriesOk() ([]BerryFlavorMap, bool) {
	if o == nil || isNil(o.Berries) {
    return nil, false
	}
	return o.Berries, true
}

// HasBerries returns a boolean if a field has been set.
func (o *BerryFlavor) HasBerries() bool {
	if o != nil && !isNil(o.Berries) {
		return true
	}

	return false
}

// SetBerries gets a reference to the given []BerryFlavorMap and assigns it to the Berries field.
func (o *BerryFlavor) SetBerries(v []BerryFlavorMap) {
	o.Berries = v
}

func (o BerryFlavor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Berries) {
		toSerialize["berries"] = o.Berries
	}
	return json.Marshal(toSerialize)
}

type NullableBerryFlavor struct {
	value *BerryFlavor
	isSet bool
}

func (v NullableBerryFlavor) Get() *BerryFlavor {
	return v.value
}

func (v *NullableBerryFlavor) Set(val *BerryFlavor) {
	v.value = val
	v.isSet = true
}

func (v NullableBerryFlavor) IsSet() bool {
	return v.isSet
}

func (v *NullableBerryFlavor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBerryFlavor(val *BerryFlavor) *NullableBerryFlavor {
	return &NullableBerryFlavor{value: val, isSet: true}
}

func (v NullableBerryFlavor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBerryFlavor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


