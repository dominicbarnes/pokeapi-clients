/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BerryFlavorMap struct for BerryFlavorMap
type BerryFlavorMap struct {
	// How powerful the referenced flavor is for this berry
	Potency int32 `json:"potency"`
	Flavor BerryFlavor `json:"flavor"`
}

// NewBerryFlavorMap instantiates a new BerryFlavorMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBerryFlavorMap(potency int32, flavor BerryFlavor) *BerryFlavorMap {
	this := BerryFlavorMap{}
	this.Potency = potency
	this.Flavor = flavor
	return &this
}

// NewBerryFlavorMapWithDefaults instantiates a new BerryFlavorMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBerryFlavorMapWithDefaults() *BerryFlavorMap {
	this := BerryFlavorMap{}
	return &this
}

// GetPotency returns the Potency field value
func (o *BerryFlavorMap) GetPotency() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Potency
}

// GetPotencyOk returns a tuple with the Potency field value
// and a boolean to check if the value has been set.
func (o *BerryFlavorMap) GetPotencyOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Potency, true
}

// SetPotency sets field value
func (o *BerryFlavorMap) SetPotency(v int32) {
	o.Potency = v
}

// GetFlavor returns the Flavor field value
func (o *BerryFlavorMap) GetFlavor() BerryFlavor {
	if o == nil {
		var ret BerryFlavor
		return ret
	}

	return o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value
// and a boolean to check if the value has been set.
func (o *BerryFlavorMap) GetFlavorOk() (*BerryFlavor, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Flavor, true
}

// SetFlavor sets field value
func (o *BerryFlavorMap) SetFlavor(v BerryFlavor) {
	o.Flavor = v
}

func (o BerryFlavorMap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["potency"] = o.Potency
	}
	if true {
		toSerialize["flavor"] = o.Flavor
	}
	return json.Marshal(toSerialize)
}

type NullableBerryFlavorMap struct {
	value *BerryFlavorMap
	isSet bool
}

func (v NullableBerryFlavorMap) Get() *BerryFlavorMap {
	return v.value
}

func (v *NullableBerryFlavorMap) Set(val *BerryFlavorMap) {
	v.value = val
	v.isSet = true
}

func (v NullableBerryFlavorMap) IsSet() bool {
	return v.isSet
}

func (v *NullableBerryFlavorMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBerryFlavorMap(val *BerryFlavorMap) *NullableBerryFlavorMap {
	return &NullableBerryFlavorMap{value: val, isSet: true}
}

func (v NullableBerryFlavorMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBerryFlavorMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


