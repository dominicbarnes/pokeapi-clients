/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Characteristic struct for Characteristic
type Characteristic struct {
	// The identifier for this characteristic resource
	Id int32 `json:"id"`
	// The remainder of the highest stat/IV divided by 5
	GeneModulo int32 `json:"gene_modulo"`
	// The possible values of the highest stat that would result in a Pok√©mon recieving this characteristic when divided by 5
	PossibleValues []int32 `json:"possible_values"`
}

// NewCharacteristic instantiates a new Characteristic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharacteristic(id int32, geneModulo int32, possibleValues []int32) *Characteristic {
	this := Characteristic{}
	this.Id = id
	this.GeneModulo = geneModulo
	this.PossibleValues = possibleValues
	return &this
}

// NewCharacteristicWithDefaults instantiates a new Characteristic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCharacteristicWithDefaults() *Characteristic {
	this := Characteristic{}
	return &this
}

// GetId returns the Id field value
func (o *Characteristic) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Characteristic) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Characteristic) SetId(v int32) {
	o.Id = v
}

// GetGeneModulo returns the GeneModulo field value
func (o *Characteristic) GetGeneModulo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GeneModulo
}

// GetGeneModuloOk returns a tuple with the GeneModulo field value
// and a boolean to check if the value has been set.
func (o *Characteristic) GetGeneModuloOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GeneModulo, true
}

// SetGeneModulo sets field value
func (o *Characteristic) SetGeneModulo(v int32) {
	o.GeneModulo = v
}

// GetPossibleValues returns the PossibleValues field value
func (o *Characteristic) GetPossibleValues() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.PossibleValues
}

// GetPossibleValuesOk returns a tuple with the PossibleValues field value
// and a boolean to check if the value has been set.
func (o *Characteristic) GetPossibleValuesOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.PossibleValues, true
}

// SetPossibleValues sets field value
func (o *Characteristic) SetPossibleValues(v []int32) {
	o.PossibleValues = v
}

func (o Characteristic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["gene_modulo"] = o.GeneModulo
	}
	if true {
		toSerialize["possible_values"] = o.PossibleValues
	}
	return json.Marshal(toSerialize)
}

type NullableCharacteristic struct {
	value *Characteristic
	isSet bool
}

func (v NullableCharacteristic) Get() *Characteristic {
	return v.value
}

func (v *NullableCharacteristic) Set(val *Characteristic) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacteristic) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacteristic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacteristic(val *Characteristic) *NullableCharacteristic {
	return &NullableCharacteristic{value: val, isSet: true}
}

func (v NullableCharacteristic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacteristic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


