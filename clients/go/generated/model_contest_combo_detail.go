/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContestComboDetail struct for ContestComboDetail
type ContestComboDetail struct {
	// A list of moves to use before this move.
	UseBefore []Move `json:"use_before,omitempty"`
	// A list of moves to use after this move.
	UseAfter []Move `json:"use_after,omitempty"`
}

// NewContestComboDetail instantiates a new ContestComboDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContestComboDetail() *ContestComboDetail {
	this := ContestComboDetail{}
	return &this
}

// NewContestComboDetailWithDefaults instantiates a new ContestComboDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContestComboDetailWithDefaults() *ContestComboDetail {
	this := ContestComboDetail{}
	return &this
}

// GetUseBefore returns the UseBefore field value if set, zero value otherwise.
func (o *ContestComboDetail) GetUseBefore() []Move {
	if o == nil || isNil(o.UseBefore) {
		var ret []Move
		return ret
	}
	return o.UseBefore
}

// GetUseBeforeOk returns a tuple with the UseBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestComboDetail) GetUseBeforeOk() ([]Move, bool) {
	if o == nil || isNil(o.UseBefore) {
    return nil, false
	}
	return o.UseBefore, true
}

// HasUseBefore returns a boolean if a field has been set.
func (o *ContestComboDetail) HasUseBefore() bool {
	if o != nil && !isNil(o.UseBefore) {
		return true
	}

	return false
}

// SetUseBefore gets a reference to the given []Move and assigns it to the UseBefore field.
func (o *ContestComboDetail) SetUseBefore(v []Move) {
	o.UseBefore = v
}

// GetUseAfter returns the UseAfter field value if set, zero value otherwise.
func (o *ContestComboDetail) GetUseAfter() []Move {
	if o == nil || isNil(o.UseAfter) {
		var ret []Move
		return ret
	}
	return o.UseAfter
}

// GetUseAfterOk returns a tuple with the UseAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestComboDetail) GetUseAfterOk() ([]Move, bool) {
	if o == nil || isNil(o.UseAfter) {
    return nil, false
	}
	return o.UseAfter, true
}

// HasUseAfter returns a boolean if a field has been set.
func (o *ContestComboDetail) HasUseAfter() bool {
	if o != nil && !isNil(o.UseAfter) {
		return true
	}

	return false
}

// SetUseAfter gets a reference to the given []Move and assigns it to the UseAfter field.
func (o *ContestComboDetail) SetUseAfter(v []Move) {
	o.UseAfter = v
}

func (o ContestComboDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UseBefore) {
		toSerialize["use_before"] = o.UseBefore
	}
	if !isNil(o.UseAfter) {
		toSerialize["use_after"] = o.UseAfter
	}
	return json.Marshal(toSerialize)
}

type NullableContestComboDetail struct {
	value *ContestComboDetail
	isSet bool
}

func (v NullableContestComboDetail) Get() *ContestComboDetail {
	return v.value
}

func (v *NullableContestComboDetail) Set(val *ContestComboDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableContestComboDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableContestComboDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContestComboDetail(val *ContestComboDetail) *NullableContestComboDetail {
	return &NullableContestComboDetail{value: val, isSet: true}
}

func (v NullableContestComboDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContestComboDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


