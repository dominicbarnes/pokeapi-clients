/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContestComboSets struct for ContestComboSets
type ContestComboSets struct {
	Normal *ContestComboDetail `json:"normal,omitempty"`
	Super *ContestComboDetail `json:"super,omitempty"`
}

// NewContestComboSets instantiates a new ContestComboSets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContestComboSets() *ContestComboSets {
	this := ContestComboSets{}
	return &this
}

// NewContestComboSetsWithDefaults instantiates a new ContestComboSets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContestComboSetsWithDefaults() *ContestComboSets {
	this := ContestComboSets{}
	return &this
}

// GetNormal returns the Normal field value if set, zero value otherwise.
func (o *ContestComboSets) GetNormal() ContestComboDetail {
	if o == nil || isNil(o.Normal) {
		var ret ContestComboDetail
		return ret
	}
	return *o.Normal
}

// GetNormalOk returns a tuple with the Normal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestComboSets) GetNormalOk() (*ContestComboDetail, bool) {
	if o == nil || isNil(o.Normal) {
    return nil, false
	}
	return o.Normal, true
}

// HasNormal returns a boolean if a field has been set.
func (o *ContestComboSets) HasNormal() bool {
	if o != nil && !isNil(o.Normal) {
		return true
	}

	return false
}

// SetNormal gets a reference to the given ContestComboDetail and assigns it to the Normal field.
func (o *ContestComboSets) SetNormal(v ContestComboDetail) {
	o.Normal = &v
}

// GetSuper returns the Super field value if set, zero value otherwise.
func (o *ContestComboSets) GetSuper() ContestComboDetail {
	if o == nil || isNil(o.Super) {
		var ret ContestComboDetail
		return ret
	}
	return *o.Super
}

// GetSuperOk returns a tuple with the Super field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestComboSets) GetSuperOk() (*ContestComboDetail, bool) {
	if o == nil || isNil(o.Super) {
    return nil, false
	}
	return o.Super, true
}

// HasSuper returns a boolean if a field has been set.
func (o *ContestComboSets) HasSuper() bool {
	if o != nil && !isNil(o.Super) {
		return true
	}

	return false
}

// SetSuper gets a reference to the given ContestComboDetail and assigns it to the Super field.
func (o *ContestComboSets) SetSuper(v ContestComboDetail) {
	o.Super = &v
}

func (o ContestComboSets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Normal) {
		toSerialize["normal"] = o.Normal
	}
	if !isNil(o.Super) {
		toSerialize["super"] = o.Super
	}
	return json.Marshal(toSerialize)
}

type NullableContestComboSets struct {
	value *ContestComboSets
	isSet bool
}

func (v NullableContestComboSets) Get() *ContestComboSets {
	return v.value
}

func (v *NullableContestComboSets) Set(val *ContestComboSets) {
	v.value = val
	v.isSet = true
}

func (v NullableContestComboSets) IsSet() bool {
	return v.isSet
}

func (v *NullableContestComboSets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContestComboSets(val *ContestComboSets) *NullableContestComboSets {
	return &NullableContestComboSets{value: val, isSet: true}
}

func (v NullableContestComboSets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContestComboSets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


