/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContestType struct for ContestType
type ContestType struct {
	// The identifier for this contest type resource
	Id int32 `json:"id"`
	// The name for this contest type resource
	Name string `json:"name"`
	BerryFlavor BerryFlavor `json:"berry_flavor"`
	// The name of this contest type listed in different languages
	Names []ContestName `json:"names"`
}

// NewContestType instantiates a new ContestType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContestType(id int32, name string, berryFlavor BerryFlavor, names []ContestName) *ContestType {
	this := ContestType{}
	this.Id = id
	this.Name = name
	this.BerryFlavor = berryFlavor
	this.Names = names
	return &this
}

// NewContestTypeWithDefaults instantiates a new ContestType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContestTypeWithDefaults() *ContestType {
	this := ContestType{}
	return &this
}

// GetId returns the Id field value
func (o *ContestType) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContestType) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContestType) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ContestType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContestType) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContestType) SetName(v string) {
	o.Name = v
}

// GetBerryFlavor returns the BerryFlavor field value
func (o *ContestType) GetBerryFlavor() BerryFlavor {
	if o == nil {
		var ret BerryFlavor
		return ret
	}

	return o.BerryFlavor
}

// GetBerryFlavorOk returns a tuple with the BerryFlavor field value
// and a boolean to check if the value has been set.
func (o *ContestType) GetBerryFlavorOk() (*BerryFlavor, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BerryFlavor, true
}

// SetBerryFlavor sets field value
func (o *ContestType) SetBerryFlavor(v BerryFlavor) {
	o.BerryFlavor = v
}

// GetNames returns the Names field value
func (o *ContestType) GetNames() []ContestName {
	if o == nil {
		var ret []ContestName
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *ContestType) GetNamesOk() ([]ContestName, bool) {
	if o == nil {
    return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *ContestType) SetNames(v []ContestName) {
	o.Names = v
}

func (o ContestType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["berry_flavor"] = o.BerryFlavor
	}
	if true {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableContestType struct {
	value *ContestType
	isSet bool
}

func (v NullableContestType) Get() *ContestType {
	return v.value
}

func (v *NullableContestType) Set(val *ContestType) {
	v.value = val
	v.isSet = true
}

func (v NullableContestType) IsSet() bool {
	return v.isSet
}

func (v *NullableContestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContestType(val *ContestType) *NullableContestType {
	return &NullableContestType{value: val, isSet: true}
}

func (v NullableContestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


