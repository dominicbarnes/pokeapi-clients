/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Effect An effect that occurs in a game, e.g. causing a Pok√©mon to fall asleep.
type Effect struct {
	// The identifier for this effect resource
	Id *int32 `json:"id,omitempty"`
	// The name for this effect resource
	Name *string `json:"name,omitempty"`
	// The list of effect text entries
	EffectEntries []EffectEffect `json:"effect_entries,omitempty"`
	// The flavor text entries that describe this effect
	PokemonFlavorTextEntries []EffectEffect `json:"pokemon_flavor_text_entries,omitempty"`
	TargetSpecies *PokemonSpecies `json:"target_species,omitempty"`
	// The list of effects that are changed by this ability
	EffectChanges []AbilityEffectChange `json:"effect_changes,omitempty"`
	// The flavor text entries that describe this effect
	FlavorTextEntries []FlavorText `json:"flavor_text_entries,omitempty"`
	Generation *Generation `json:"generation,omitempty"`
	// The machines that teach this move
	Machines []MachineVersionDetail `json:"machines,omitempty"`
	Meta *MoveMetaData `json:"meta,omitempty"`
	// The short description of this effect listed in different languages
	ShortEffect *string `json:"short_effect,omitempty"`
	// The chance of this move having an additional effect listed in percentage
	EffectChance *int32 `json:"effect_chance,omitempty"`
	// The list of stat changes that are caused by this effect
	StatChanges []MoveStatChange `json:"stat_changes,omitempty"`
	SuperContestEffect *SuperContestEffect `json:"super_contest_effect,omitempty"`
	ContestCombos *ContestComboSets `json:"contest_combos,omitempty"`
	ContestType *ContestType `json:"contest_type,omitempty"`
}

// NewEffect instantiates a new Effect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEffect() *Effect {
	this := Effect{}
	return &this
}

// NewEffectWithDefaults instantiates a new Effect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEffectWithDefaults() *Effect {
	this := Effect{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Effect) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Effect) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Effect) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Effect) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Effect) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Effect) SetName(v string) {
	o.Name = &v
}

// GetEffectEntries returns the EffectEntries field value if set, zero value otherwise.
func (o *Effect) GetEffectEntries() []EffectEffect {
	if o == nil || isNil(o.EffectEntries) {
		var ret []EffectEffect
		return ret
	}
	return o.EffectEntries
}

// GetEffectEntriesOk returns a tuple with the EffectEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetEffectEntriesOk() ([]EffectEffect, bool) {
	if o == nil || isNil(o.EffectEntries) {
    return nil, false
	}
	return o.EffectEntries, true
}

// HasEffectEntries returns a boolean if a field has been set.
func (o *Effect) HasEffectEntries() bool {
	if o != nil && !isNil(o.EffectEntries) {
		return true
	}

	return false
}

// SetEffectEntries gets a reference to the given []EffectEffect and assigns it to the EffectEntries field.
func (o *Effect) SetEffectEntries(v []EffectEffect) {
	o.EffectEntries = v
}

// GetPokemonFlavorTextEntries returns the PokemonFlavorTextEntries field value if set, zero value otherwise.
func (o *Effect) GetPokemonFlavorTextEntries() []EffectEffect {
	if o == nil || isNil(o.PokemonFlavorTextEntries) {
		var ret []EffectEffect
		return ret
	}
	return o.PokemonFlavorTextEntries
}

// GetPokemonFlavorTextEntriesOk returns a tuple with the PokemonFlavorTextEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetPokemonFlavorTextEntriesOk() ([]EffectEffect, bool) {
	if o == nil || isNil(o.PokemonFlavorTextEntries) {
    return nil, false
	}
	return o.PokemonFlavorTextEntries, true
}

// HasPokemonFlavorTextEntries returns a boolean if a field has been set.
func (o *Effect) HasPokemonFlavorTextEntries() bool {
	if o != nil && !isNil(o.PokemonFlavorTextEntries) {
		return true
	}

	return false
}

// SetPokemonFlavorTextEntries gets a reference to the given []EffectEffect and assigns it to the PokemonFlavorTextEntries field.
func (o *Effect) SetPokemonFlavorTextEntries(v []EffectEffect) {
	o.PokemonFlavorTextEntries = v
}

// GetTargetSpecies returns the TargetSpecies field value if set, zero value otherwise.
func (o *Effect) GetTargetSpecies() PokemonSpecies {
	if o == nil || isNil(o.TargetSpecies) {
		var ret PokemonSpecies
		return ret
	}
	return *o.TargetSpecies
}

// GetTargetSpeciesOk returns a tuple with the TargetSpecies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetTargetSpeciesOk() (*PokemonSpecies, bool) {
	if o == nil || isNil(o.TargetSpecies) {
    return nil, false
	}
	return o.TargetSpecies, true
}

// HasTargetSpecies returns a boolean if a field has been set.
func (o *Effect) HasTargetSpecies() bool {
	if o != nil && !isNil(o.TargetSpecies) {
		return true
	}

	return false
}

// SetTargetSpecies gets a reference to the given PokemonSpecies and assigns it to the TargetSpecies field.
func (o *Effect) SetTargetSpecies(v PokemonSpecies) {
	o.TargetSpecies = &v
}

// GetEffectChanges returns the EffectChanges field value if set, zero value otherwise.
func (o *Effect) GetEffectChanges() []AbilityEffectChange {
	if o == nil || isNil(o.EffectChanges) {
		var ret []AbilityEffectChange
		return ret
	}
	return o.EffectChanges
}

// GetEffectChangesOk returns a tuple with the EffectChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetEffectChangesOk() ([]AbilityEffectChange, bool) {
	if o == nil || isNil(o.EffectChanges) {
    return nil, false
	}
	return o.EffectChanges, true
}

// HasEffectChanges returns a boolean if a field has been set.
func (o *Effect) HasEffectChanges() bool {
	if o != nil && !isNil(o.EffectChanges) {
		return true
	}

	return false
}

// SetEffectChanges gets a reference to the given []AbilityEffectChange and assigns it to the EffectChanges field.
func (o *Effect) SetEffectChanges(v []AbilityEffectChange) {
	o.EffectChanges = v
}

// GetFlavorTextEntries returns the FlavorTextEntries field value if set, zero value otherwise.
func (o *Effect) GetFlavorTextEntries() []FlavorText {
	if o == nil || isNil(o.FlavorTextEntries) {
		var ret []FlavorText
		return ret
	}
	return o.FlavorTextEntries
}

// GetFlavorTextEntriesOk returns a tuple with the FlavorTextEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetFlavorTextEntriesOk() ([]FlavorText, bool) {
	if o == nil || isNil(o.FlavorTextEntries) {
    return nil, false
	}
	return o.FlavorTextEntries, true
}

// HasFlavorTextEntries returns a boolean if a field has been set.
func (o *Effect) HasFlavorTextEntries() bool {
	if o != nil && !isNil(o.FlavorTextEntries) {
		return true
	}

	return false
}

// SetFlavorTextEntries gets a reference to the given []FlavorText and assigns it to the FlavorTextEntries field.
func (o *Effect) SetFlavorTextEntries(v []FlavorText) {
	o.FlavorTextEntries = v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *Effect) GetGeneration() Generation {
	if o == nil || isNil(o.Generation) {
		var ret Generation
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetGenerationOk() (*Generation, bool) {
	if o == nil || isNil(o.Generation) {
    return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *Effect) HasGeneration() bool {
	if o != nil && !isNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given Generation and assigns it to the Generation field.
func (o *Effect) SetGeneration(v Generation) {
	o.Generation = &v
}

// GetMachines returns the Machines field value if set, zero value otherwise.
func (o *Effect) GetMachines() []MachineVersionDetail {
	if o == nil || isNil(o.Machines) {
		var ret []MachineVersionDetail
		return ret
	}
	return o.Machines
}

// GetMachinesOk returns a tuple with the Machines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetMachinesOk() ([]MachineVersionDetail, bool) {
	if o == nil || isNil(o.Machines) {
    return nil, false
	}
	return o.Machines, true
}

// HasMachines returns a boolean if a field has been set.
func (o *Effect) HasMachines() bool {
	if o != nil && !isNil(o.Machines) {
		return true
	}

	return false
}

// SetMachines gets a reference to the given []MachineVersionDetail and assigns it to the Machines field.
func (o *Effect) SetMachines(v []MachineVersionDetail) {
	o.Machines = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Effect) GetMeta() MoveMetaData {
	if o == nil || isNil(o.Meta) {
		var ret MoveMetaData
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetMetaOk() (*MoveMetaData, bool) {
	if o == nil || isNil(o.Meta) {
    return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Effect) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MoveMetaData and assigns it to the Meta field.
func (o *Effect) SetMeta(v MoveMetaData) {
	o.Meta = &v
}

// GetShortEffect returns the ShortEffect field value if set, zero value otherwise.
func (o *Effect) GetShortEffect() string {
	if o == nil || isNil(o.ShortEffect) {
		var ret string
		return ret
	}
	return *o.ShortEffect
}

// GetShortEffectOk returns a tuple with the ShortEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetShortEffectOk() (*string, bool) {
	if o == nil || isNil(o.ShortEffect) {
    return nil, false
	}
	return o.ShortEffect, true
}

// HasShortEffect returns a boolean if a field has been set.
func (o *Effect) HasShortEffect() bool {
	if o != nil && !isNil(o.ShortEffect) {
		return true
	}

	return false
}

// SetShortEffect gets a reference to the given string and assigns it to the ShortEffect field.
func (o *Effect) SetShortEffect(v string) {
	o.ShortEffect = &v
}

// GetEffectChance returns the EffectChance field value if set, zero value otherwise.
func (o *Effect) GetEffectChance() int32 {
	if o == nil || isNil(o.EffectChance) {
		var ret int32
		return ret
	}
	return *o.EffectChance
}

// GetEffectChanceOk returns a tuple with the EffectChance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetEffectChanceOk() (*int32, bool) {
	if o == nil || isNil(o.EffectChance) {
    return nil, false
	}
	return o.EffectChance, true
}

// HasEffectChance returns a boolean if a field has been set.
func (o *Effect) HasEffectChance() bool {
	if o != nil && !isNil(o.EffectChance) {
		return true
	}

	return false
}

// SetEffectChance gets a reference to the given int32 and assigns it to the EffectChance field.
func (o *Effect) SetEffectChance(v int32) {
	o.EffectChance = &v
}

// GetStatChanges returns the StatChanges field value if set, zero value otherwise.
func (o *Effect) GetStatChanges() []MoveStatChange {
	if o == nil || isNil(o.StatChanges) {
		var ret []MoveStatChange
		return ret
	}
	return o.StatChanges
}

// GetStatChangesOk returns a tuple with the StatChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetStatChangesOk() ([]MoveStatChange, bool) {
	if o == nil || isNil(o.StatChanges) {
    return nil, false
	}
	return o.StatChanges, true
}

// HasStatChanges returns a boolean if a field has been set.
func (o *Effect) HasStatChanges() bool {
	if o != nil && !isNil(o.StatChanges) {
		return true
	}

	return false
}

// SetStatChanges gets a reference to the given []MoveStatChange and assigns it to the StatChanges field.
func (o *Effect) SetStatChanges(v []MoveStatChange) {
	o.StatChanges = v
}

// GetSuperContestEffect returns the SuperContestEffect field value if set, zero value otherwise.
func (o *Effect) GetSuperContestEffect() SuperContestEffect {
	if o == nil || isNil(o.SuperContestEffect) {
		var ret SuperContestEffect
		return ret
	}
	return *o.SuperContestEffect
}

// GetSuperContestEffectOk returns a tuple with the SuperContestEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetSuperContestEffectOk() (*SuperContestEffect, bool) {
	if o == nil || isNil(o.SuperContestEffect) {
    return nil, false
	}
	return o.SuperContestEffect, true
}

// HasSuperContestEffect returns a boolean if a field has been set.
func (o *Effect) HasSuperContestEffect() bool {
	if o != nil && !isNil(o.SuperContestEffect) {
		return true
	}

	return false
}

// SetSuperContestEffect gets a reference to the given SuperContestEffect and assigns it to the SuperContestEffect field.
func (o *Effect) SetSuperContestEffect(v SuperContestEffect) {
	o.SuperContestEffect = &v
}

// GetContestCombos returns the ContestCombos field value if set, zero value otherwise.
func (o *Effect) GetContestCombos() ContestComboSets {
	if o == nil || isNil(o.ContestCombos) {
		var ret ContestComboSets
		return ret
	}
	return *o.ContestCombos
}

// GetContestCombosOk returns a tuple with the ContestCombos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetContestCombosOk() (*ContestComboSets, bool) {
	if o == nil || isNil(o.ContestCombos) {
    return nil, false
	}
	return o.ContestCombos, true
}

// HasContestCombos returns a boolean if a field has been set.
func (o *Effect) HasContestCombos() bool {
	if o != nil && !isNil(o.ContestCombos) {
		return true
	}

	return false
}

// SetContestCombos gets a reference to the given ContestComboSets and assigns it to the ContestCombos field.
func (o *Effect) SetContestCombos(v ContestComboSets) {
	o.ContestCombos = &v
}

// GetContestType returns the ContestType field value if set, zero value otherwise.
func (o *Effect) GetContestType() ContestType {
	if o == nil || isNil(o.ContestType) {
		var ret ContestType
		return ret
	}
	return *o.ContestType
}

// GetContestTypeOk returns a tuple with the ContestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Effect) GetContestTypeOk() (*ContestType, bool) {
	if o == nil || isNil(o.ContestType) {
    return nil, false
	}
	return o.ContestType, true
}

// HasContestType returns a boolean if a field has been set.
func (o *Effect) HasContestType() bool {
	if o != nil && !isNil(o.ContestType) {
		return true
	}

	return false
}

// SetContestType gets a reference to the given ContestType and assigns it to the ContestType field.
func (o *Effect) SetContestType(v ContestType) {
	o.ContestType = &v
}

func (o Effect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.EffectEntries) {
		toSerialize["effect_entries"] = o.EffectEntries
	}
	if !isNil(o.PokemonFlavorTextEntries) {
		toSerialize["pokemon_flavor_text_entries"] = o.PokemonFlavorTextEntries
	}
	if !isNil(o.TargetSpecies) {
		toSerialize["target_species"] = o.TargetSpecies
	}
	if !isNil(o.EffectChanges) {
		toSerialize["effect_changes"] = o.EffectChanges
	}
	if !isNil(o.FlavorTextEntries) {
		toSerialize["flavor_text_entries"] = o.FlavorTextEntries
	}
	if !isNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !isNil(o.Machines) {
		toSerialize["machines"] = o.Machines
	}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.ShortEffect) {
		toSerialize["short_effect"] = o.ShortEffect
	}
	if !isNil(o.EffectChance) {
		toSerialize["effect_chance"] = o.EffectChance
	}
	if !isNil(o.StatChanges) {
		toSerialize["stat_changes"] = o.StatChanges
	}
	if !isNil(o.SuperContestEffect) {
		toSerialize["super_contest_effect"] = o.SuperContestEffect
	}
	if !isNil(o.ContestCombos) {
		toSerialize["contest_combos"] = o.ContestCombos
	}
	if !isNil(o.ContestType) {
		toSerialize["contest_type"] = o.ContestType
	}
	return json.Marshal(toSerialize)
}

type NullableEffect struct {
	value *Effect
	isSet bool
}

func (v NullableEffect) Get() *Effect {
	return v.value
}

func (v *NullableEffect) Set(val *Effect) {
	v.value = val
	v.isSet = true
}

func (v NullableEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEffect(val *Effect) *NullableEffect {
	return &NullableEffect{value: val, isSet: true}
}

func (v NullableEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


