/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Encounter struct for Encounter
type Encounter struct {
	// The lowest level the Pokémon could be encountered at.
	MinLevel int32 `json:"min_level"`
	// The highest level the Pokémon could be encountered at.
	MaxLevel int32 `json:"max_level"`
	// The condition which triggers this encounter.
	ConditionValues []EncounterConditionValue `json:"condition_values,omitempty"`
	// Percent chance that this encounter will occur.
	Chance *int32 `json:"chance,omitempty"`
	Method EncounterMethod `json:"method"`
}

// NewEncounter instantiates a new Encounter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncounter(minLevel int32, maxLevel int32, method EncounterMethod) *Encounter {
	this := Encounter{}
	this.MinLevel = minLevel
	this.MaxLevel = maxLevel
	this.Method = method
	return &this
}

// NewEncounterWithDefaults instantiates a new Encounter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncounterWithDefaults() *Encounter {
	this := Encounter{}
	return &this
}

// GetMinLevel returns the MinLevel field value
func (o *Encounter) GetMinLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinLevel
}

// GetMinLevelOk returns a tuple with the MinLevel field value
// and a boolean to check if the value has been set.
func (o *Encounter) GetMinLevelOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MinLevel, true
}

// SetMinLevel sets field value
func (o *Encounter) SetMinLevel(v int32) {
	o.MinLevel = v
}

// GetMaxLevel returns the MaxLevel field value
func (o *Encounter) GetMaxLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxLevel
}

// GetMaxLevelOk returns a tuple with the MaxLevel field value
// and a boolean to check if the value has been set.
func (o *Encounter) GetMaxLevelOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MaxLevel, true
}

// SetMaxLevel sets field value
func (o *Encounter) SetMaxLevel(v int32) {
	o.MaxLevel = v
}

// GetConditionValues returns the ConditionValues field value if set, zero value otherwise.
func (o *Encounter) GetConditionValues() []EncounterConditionValue {
	if o == nil || isNil(o.ConditionValues) {
		var ret []EncounterConditionValue
		return ret
	}
	return o.ConditionValues
}

// GetConditionValuesOk returns a tuple with the ConditionValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encounter) GetConditionValuesOk() ([]EncounterConditionValue, bool) {
	if o == nil || isNil(o.ConditionValues) {
    return nil, false
	}
	return o.ConditionValues, true
}

// HasConditionValues returns a boolean if a field has been set.
func (o *Encounter) HasConditionValues() bool {
	if o != nil && !isNil(o.ConditionValues) {
		return true
	}

	return false
}

// SetConditionValues gets a reference to the given []EncounterConditionValue and assigns it to the ConditionValues field.
func (o *Encounter) SetConditionValues(v []EncounterConditionValue) {
	o.ConditionValues = v
}

// GetChance returns the Chance field value if set, zero value otherwise.
func (o *Encounter) GetChance() int32 {
	if o == nil || isNil(o.Chance) {
		var ret int32
		return ret
	}
	return *o.Chance
}

// GetChanceOk returns a tuple with the Chance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encounter) GetChanceOk() (*int32, bool) {
	if o == nil || isNil(o.Chance) {
    return nil, false
	}
	return o.Chance, true
}

// HasChance returns a boolean if a field has been set.
func (o *Encounter) HasChance() bool {
	if o != nil && !isNil(o.Chance) {
		return true
	}

	return false
}

// SetChance gets a reference to the given int32 and assigns it to the Chance field.
func (o *Encounter) SetChance(v int32) {
	o.Chance = &v
}

// GetMethod returns the Method field value
func (o *Encounter) GetMethod() EncounterMethod {
	if o == nil {
		var ret EncounterMethod
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *Encounter) GetMethodOk() (*EncounterMethod, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *Encounter) SetMethod(v EncounterMethod) {
	o.Method = v
}

func (o Encounter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["min_level"] = o.MinLevel
	}
	if true {
		toSerialize["max_level"] = o.MaxLevel
	}
	if !isNil(o.ConditionValues) {
		toSerialize["condition_values"] = o.ConditionValues
	}
	if !isNil(o.Chance) {
		toSerialize["chance"] = o.Chance
	}
	if true {
		toSerialize["method"] = o.Method
	}
	return json.Marshal(toSerialize)
}

type NullableEncounter struct {
	value *Encounter
	isSet bool
}

func (v NullableEncounter) Get() *Encounter {
	return v.value
}

func (v *NullableEncounter) Set(val *Encounter) {
	v.value = val
	v.isSet = true
}

func (v NullableEncounter) IsSet() bool {
	return v.isSet
}

func (v *NullableEncounter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncounter(val *Encounter) *NullableEncounter {
	return &NullableEncounter{value: val, isSet: true}
}

func (v NullableEncounter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncounter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


