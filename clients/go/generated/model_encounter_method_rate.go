/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EncounterMethodRate struct for EncounterMethodRate
type EncounterMethodRate struct {
	EncounterMethod *EncounterMethod `json:"encounter_method,omitempty"`
	VersionDetails []EncounterVersionDetails `json:"version_details,omitempty"`
}

// NewEncounterMethodRate instantiates a new EncounterMethodRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncounterMethodRate() *EncounterMethodRate {
	this := EncounterMethodRate{}
	return &this
}

// NewEncounterMethodRateWithDefaults instantiates a new EncounterMethodRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncounterMethodRateWithDefaults() *EncounterMethodRate {
	this := EncounterMethodRate{}
	return &this
}

// GetEncounterMethod returns the EncounterMethod field value if set, zero value otherwise.
func (o *EncounterMethodRate) GetEncounterMethod() EncounterMethod {
	if o == nil || isNil(o.EncounterMethod) {
		var ret EncounterMethod
		return ret
	}
	return *o.EncounterMethod
}

// GetEncounterMethodOk returns a tuple with the EncounterMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncounterMethodRate) GetEncounterMethodOk() (*EncounterMethod, bool) {
	if o == nil || isNil(o.EncounterMethod) {
    return nil, false
	}
	return o.EncounterMethod, true
}

// HasEncounterMethod returns a boolean if a field has been set.
func (o *EncounterMethodRate) HasEncounterMethod() bool {
	if o != nil && !isNil(o.EncounterMethod) {
		return true
	}

	return false
}

// SetEncounterMethod gets a reference to the given EncounterMethod and assigns it to the EncounterMethod field.
func (o *EncounterMethodRate) SetEncounterMethod(v EncounterMethod) {
	o.EncounterMethod = &v
}

// GetVersionDetails returns the VersionDetails field value if set, zero value otherwise.
func (o *EncounterMethodRate) GetVersionDetails() []EncounterVersionDetails {
	if o == nil || isNil(o.VersionDetails) {
		var ret []EncounterVersionDetails
		return ret
	}
	return o.VersionDetails
}

// GetVersionDetailsOk returns a tuple with the VersionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncounterMethodRate) GetVersionDetailsOk() ([]EncounterVersionDetails, bool) {
	if o == nil || isNil(o.VersionDetails) {
    return nil, false
	}
	return o.VersionDetails, true
}

// HasVersionDetails returns a boolean if a field has been set.
func (o *EncounterMethodRate) HasVersionDetails() bool {
	if o != nil && !isNil(o.VersionDetails) {
		return true
	}

	return false
}

// SetVersionDetails gets a reference to the given []EncounterVersionDetails and assigns it to the VersionDetails field.
func (o *EncounterMethodRate) SetVersionDetails(v []EncounterVersionDetails) {
	o.VersionDetails = v
}

func (o EncounterMethodRate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EncounterMethod) {
		toSerialize["encounter_method"] = o.EncounterMethod
	}
	if !isNil(o.VersionDetails) {
		toSerialize["version_details"] = o.VersionDetails
	}
	return json.Marshal(toSerialize)
}

type NullableEncounterMethodRate struct {
	value *EncounterMethodRate
	isSet bool
}

func (v NullableEncounterMethodRate) Get() *EncounterMethodRate {
	return v.value
}

func (v *NullableEncounterMethodRate) Set(val *EncounterMethodRate) {
	v.value = val
	v.isSet = true
}

func (v NullableEncounterMethodRate) IsSet() bool {
	return v.isSet
}

func (v *NullableEncounterMethodRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncounterMethodRate(val *EncounterMethodRate) *NullableEncounterMethodRate {
	return &NullableEncounterMethodRate{value: val, isSet: true}
}

func (v NullableEncounterMethodRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncounterMethodRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


