/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EncounterVersionDetails Version details of an encounter.
type EncounterVersionDetails struct {
	Version *NamedAPIResource `json:"version,omitempty"`
	// The total percentage of all encounter potential.
	MaxChance *int32 `json:"max_chance,omitempty"`
	// A list of encounters and their specifics.
	EncounterDetails []Encounter `json:"encounter_details,omitempty"`
}

// NewEncounterVersionDetails instantiates a new EncounterVersionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncounterVersionDetails() *EncounterVersionDetails {
	this := EncounterVersionDetails{}
	return &this
}

// NewEncounterVersionDetailsWithDefaults instantiates a new EncounterVersionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncounterVersionDetailsWithDefaults() *EncounterVersionDetails {
	this := EncounterVersionDetails{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *EncounterVersionDetails) GetVersion() NamedAPIResource {
	if o == nil || isNil(o.Version) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncounterVersionDetails) GetVersionOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *EncounterVersionDetails) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NamedAPIResource and assigns it to the Version field.
func (o *EncounterVersionDetails) SetVersion(v NamedAPIResource) {
	o.Version = &v
}

// GetMaxChance returns the MaxChance field value if set, zero value otherwise.
func (o *EncounterVersionDetails) GetMaxChance() int32 {
	if o == nil || isNil(o.MaxChance) {
		var ret int32
		return ret
	}
	return *o.MaxChance
}

// GetMaxChanceOk returns a tuple with the MaxChance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncounterVersionDetails) GetMaxChanceOk() (*int32, bool) {
	if o == nil || isNil(o.MaxChance) {
    return nil, false
	}
	return o.MaxChance, true
}

// HasMaxChance returns a boolean if a field has been set.
func (o *EncounterVersionDetails) HasMaxChance() bool {
	if o != nil && !isNil(o.MaxChance) {
		return true
	}

	return false
}

// SetMaxChance gets a reference to the given int32 and assigns it to the MaxChance field.
func (o *EncounterVersionDetails) SetMaxChance(v int32) {
	o.MaxChance = &v
}

// GetEncounterDetails returns the EncounterDetails field value if set, zero value otherwise.
func (o *EncounterVersionDetails) GetEncounterDetails() []Encounter {
	if o == nil || isNil(o.EncounterDetails) {
		var ret []Encounter
		return ret
	}
	return o.EncounterDetails
}

// GetEncounterDetailsOk returns a tuple with the EncounterDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncounterVersionDetails) GetEncounterDetailsOk() ([]Encounter, bool) {
	if o == nil || isNil(o.EncounterDetails) {
    return nil, false
	}
	return o.EncounterDetails, true
}

// HasEncounterDetails returns a boolean if a field has been set.
func (o *EncounterVersionDetails) HasEncounterDetails() bool {
	if o != nil && !isNil(o.EncounterDetails) {
		return true
	}

	return false
}

// SetEncounterDetails gets a reference to the given []Encounter and assigns it to the EncounterDetails field.
func (o *EncounterVersionDetails) SetEncounterDetails(v []Encounter) {
	o.EncounterDetails = v
}

func (o EncounterVersionDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !isNil(o.MaxChance) {
		toSerialize["max_chance"] = o.MaxChance
	}
	if !isNil(o.EncounterDetails) {
		toSerialize["encounter_details"] = o.EncounterDetails
	}
	return json.Marshal(toSerialize)
}

type NullableEncounterVersionDetails struct {
	value *EncounterVersionDetails
	isSet bool
}

func (v NullableEncounterVersionDetails) Get() *EncounterVersionDetails {
	return v.value
}

func (v *NullableEncounterVersionDetails) Set(val *EncounterVersionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEncounterVersionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEncounterVersionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncounterVersionDetails(val *EncounterVersionDetails) *NullableEncounterVersionDetails {
	return &NullableEncounterVersionDetails{value: val, isSet: true}
}

func (v NullableEncounterVersionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncounterVersionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


