/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EvolutionChainBabyTriggerItem - The item that a baby PokÃ©mon would be holding when born during a forced evolution
type EvolutionChainBabyTriggerItem struct {
	Item *Item
	Interface{} *interface{}
}

// ItemAsEvolutionChainBabyTriggerItem is a convenience function that returns Item wrapped in EvolutionChainBabyTriggerItem
func ItemAsEvolutionChainBabyTriggerItem(v *Item) EvolutionChainBabyTriggerItem {
	return EvolutionChainBabyTriggerItem{
		Item: v,
	}
}

// interface{}AsEvolutionChainBabyTriggerItem is a convenience function that returns interface{} wrapped in EvolutionChainBabyTriggerItem
func Interface{}AsEvolutionChainBabyTriggerItem(v *interface{}) EvolutionChainBabyTriggerItem {
	return EvolutionChainBabyTriggerItem{
		Interface{}: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EvolutionChainBabyTriggerItem) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into Item
	err = newStrictDecoder(data).Decode(&dst.Item)
	if err == nil {
		jsonItem, _ := json.Marshal(dst.Item)
		if string(jsonItem) == "{}" { // empty struct
			dst.Item = nil
		} else {
			match++
		}
	} else {
		dst.Item = nil
	}

	// try to unmarshal data into Interface{}
	err = newStrictDecoder(data).Decode(&dst.Interface{})
	if err == nil {
		jsonInterface{}, _ := json.Marshal(dst.Interface{})
		if string(jsonInterface{}) == "{}" { // empty struct
			dst.Interface{} = nil
		} else {
			match++
		}
	} else {
		dst.Interface{} = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Item = nil
		dst.Interface{} = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EvolutionChainBabyTriggerItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EvolutionChainBabyTriggerItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EvolutionChainBabyTriggerItem) MarshalJSON() ([]byte, error) {
	if src.Item != nil {
		return json.Marshal(&src.Item)
	}

	if src.Interface{} != nil {
		return json.Marshal(&src.Interface{})
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EvolutionChainBabyTriggerItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Item != nil {
		return obj.Item
	}

	if obj.Interface{} != nil {
		return obj.Interface{}
	}

	// all schemas are nil
	return nil
}

type NullableEvolutionChainBabyTriggerItem struct {
	value *EvolutionChainBabyTriggerItem
	isSet bool
}

func (v NullableEvolutionChainBabyTriggerItem) Get() *EvolutionChainBabyTriggerItem {
	return v.value
}

func (v *NullableEvolutionChainBabyTriggerItem) Set(val *EvolutionChainBabyTriggerItem) {
	v.value = val
	v.isSet = true
}

func (v NullableEvolutionChainBabyTriggerItem) IsSet() bool {
	return v.isSet
}

func (v *NullableEvolutionChainBabyTriggerItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvolutionChainBabyTriggerItem(val *EvolutionChainBabyTriggerItem) *NullableEvolutionChainBabyTriggerItem {
	return &NullableEvolutionChainBabyTriggerItem{value: val, isSet: true}
}

func (v NullableEvolutionChainBabyTriggerItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvolutionChainBabyTriggerItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


