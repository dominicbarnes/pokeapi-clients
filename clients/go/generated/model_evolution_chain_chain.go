/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EvolutionChainChain struct for EvolutionChainChain
type EvolutionChainChain struct {
	// Whether or not this is a baby Pokémon
	IsBaby *bool `json:"is_baby,omitempty"`
	Species *PokemonSpecies `json:"species,omitempty"`
	// The chain of Pokémon species that forms part of this evolution chain
	EvolutionDetails []EvolutionChainChainEvolutionDetailsInner `json:"evolution_details,omitempty"`
}

// NewEvolutionChainChain instantiates a new EvolutionChainChain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvolutionChainChain() *EvolutionChainChain {
	this := EvolutionChainChain{}
	return &this
}

// NewEvolutionChainChainWithDefaults instantiates a new EvolutionChainChain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvolutionChainChainWithDefaults() *EvolutionChainChain {
	this := EvolutionChainChain{}
	return &this
}

// GetIsBaby returns the IsBaby field value if set, zero value otherwise.
func (o *EvolutionChainChain) GetIsBaby() bool {
	if o == nil || isNil(o.IsBaby) {
		var ret bool
		return ret
	}
	return *o.IsBaby
}

// GetIsBabyOk returns a tuple with the IsBaby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvolutionChainChain) GetIsBabyOk() (*bool, bool) {
	if o == nil || isNil(o.IsBaby) {
    return nil, false
	}
	return o.IsBaby, true
}

// HasIsBaby returns a boolean if a field has been set.
func (o *EvolutionChainChain) HasIsBaby() bool {
	if o != nil && !isNil(o.IsBaby) {
		return true
	}

	return false
}

// SetIsBaby gets a reference to the given bool and assigns it to the IsBaby field.
func (o *EvolutionChainChain) SetIsBaby(v bool) {
	o.IsBaby = &v
}

// GetSpecies returns the Species field value if set, zero value otherwise.
func (o *EvolutionChainChain) GetSpecies() PokemonSpecies {
	if o == nil || isNil(o.Species) {
		var ret PokemonSpecies
		return ret
	}
	return *o.Species
}

// GetSpeciesOk returns a tuple with the Species field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvolutionChainChain) GetSpeciesOk() (*PokemonSpecies, bool) {
	if o == nil || isNil(o.Species) {
    return nil, false
	}
	return o.Species, true
}

// HasSpecies returns a boolean if a field has been set.
func (o *EvolutionChainChain) HasSpecies() bool {
	if o != nil && !isNil(o.Species) {
		return true
	}

	return false
}

// SetSpecies gets a reference to the given PokemonSpecies and assigns it to the Species field.
func (o *EvolutionChainChain) SetSpecies(v PokemonSpecies) {
	o.Species = &v
}

// GetEvolutionDetails returns the EvolutionDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EvolutionChainChain) GetEvolutionDetails() []EvolutionChainChainEvolutionDetailsInner {
	if o == nil {
		var ret []EvolutionChainChainEvolutionDetailsInner
		return ret
	}
	return o.EvolutionDetails
}

// GetEvolutionDetailsOk returns a tuple with the EvolutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EvolutionChainChain) GetEvolutionDetailsOk() ([]EvolutionChainChainEvolutionDetailsInner, bool) {
	if o == nil || isNil(o.EvolutionDetails) {
    return nil, false
	}
	return o.EvolutionDetails, true
}

// HasEvolutionDetails returns a boolean if a field has been set.
func (o *EvolutionChainChain) HasEvolutionDetails() bool {
	if o != nil && isNil(o.EvolutionDetails) {
		return true
	}

	return false
}

// SetEvolutionDetails gets a reference to the given []EvolutionChainChainEvolutionDetailsInner and assigns it to the EvolutionDetails field.
func (o *EvolutionChainChain) SetEvolutionDetails(v []EvolutionChainChainEvolutionDetailsInner) {
	o.EvolutionDetails = v
}

func (o EvolutionChainChain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsBaby) {
		toSerialize["is_baby"] = o.IsBaby
	}
	if !isNil(o.Species) {
		toSerialize["species"] = o.Species
	}
	if o.EvolutionDetails != nil {
		toSerialize["evolution_details"] = o.EvolutionDetails
	}
	return json.Marshal(toSerialize)
}

type NullableEvolutionChainChain struct {
	value *EvolutionChainChain
	isSet bool
}

func (v NullableEvolutionChainChain) Get() *EvolutionChainChain {
	return v.value
}

func (v *NullableEvolutionChainChain) Set(val *EvolutionChainChain) {
	v.value = val
	v.isSet = true
}

func (v NullableEvolutionChainChain) IsSet() bool {
	return v.isSet
}

func (v *NullableEvolutionChainChain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvolutionChainChain(val *EvolutionChainChain) *NullableEvolutionChainChain {
	return &NullableEvolutionChainChain{value: val, isSet: true}
}

func (v NullableEvolutionChainChain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvolutionChainChain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


