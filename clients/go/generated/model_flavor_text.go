/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FlavorText struct for FlavorText
type FlavorText struct {
	FlavorText *string `json:"flavor_text,omitempty"`
	Language *NamedAPIResource `json:"language,omitempty"`
	Version *NamedAPIResource `json:"version,omitempty"`
}

// NewFlavorText instantiates a new FlavorText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorText() *FlavorText {
	this := FlavorText{}
	return &this
}

// NewFlavorTextWithDefaults instantiates a new FlavorText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorTextWithDefaults() *FlavorText {
	this := FlavorText{}
	return &this
}

// GetFlavorText returns the FlavorText field value if set, zero value otherwise.
func (o *FlavorText) GetFlavorText() string {
	if o == nil || isNil(o.FlavorText) {
		var ret string
		return ret
	}
	return *o.FlavorText
}

// GetFlavorTextOk returns a tuple with the FlavorText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorText) GetFlavorTextOk() (*string, bool) {
	if o == nil || isNil(o.FlavorText) {
    return nil, false
	}
	return o.FlavorText, true
}

// HasFlavorText returns a boolean if a field has been set.
func (o *FlavorText) HasFlavorText() bool {
	if o != nil && !isNil(o.FlavorText) {
		return true
	}

	return false
}

// SetFlavorText gets a reference to the given string and assigns it to the FlavorText field.
func (o *FlavorText) SetFlavorText(v string) {
	o.FlavorText = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *FlavorText) GetLanguage() NamedAPIResource {
	if o == nil || isNil(o.Language) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorText) GetLanguageOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Language) {
    return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *FlavorText) HasLanguage() bool {
	if o != nil && !isNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NamedAPIResource and assigns it to the Language field.
func (o *FlavorText) SetLanguage(v NamedAPIResource) {
	o.Language = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FlavorText) GetVersion() NamedAPIResource {
	if o == nil || isNil(o.Version) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorText) GetVersionOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FlavorText) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NamedAPIResource and assigns it to the Version field.
func (o *FlavorText) SetVersion(v NamedAPIResource) {
	o.Version = &v
}

func (o FlavorText) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FlavorText) {
		toSerialize["flavor_text"] = o.FlavorText
	}
	if !isNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableFlavorText struct {
	value *FlavorText
	isSet bool
}

func (v NullableFlavorText) Get() *FlavorText {
	return v.value
}

func (v *NullableFlavorText) Set(val *FlavorText) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorText) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorText(val *FlavorText) *NullableFlavorText {
	return &NullableFlavorText{value: val, isSet: true}
}

func (v NullableFlavorText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


