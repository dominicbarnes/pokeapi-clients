/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Gender struct for Gender
type Gender struct {
	// The identifier for this gender resource
	Id *int32 `json:"id,omitempty"`
	// The name for this gender resource
	Name *string `json:"name,omitempty"`
	PokemonSpeciesDetails []GenderPokemonSpeciesDetailsInner `json:"pokemon_species_details,omitempty"`
}

// NewGender instantiates a new Gender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGender() *Gender {
	this := Gender{}
	return &this
}

// NewGenderWithDefaults instantiates a new Gender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenderWithDefaults() *Gender {
	this := Gender{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Gender) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gender) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Gender) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Gender) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Gender) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gender) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Gender) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Gender) SetName(v string) {
	o.Name = &v
}

// GetPokemonSpeciesDetails returns the PokemonSpeciesDetails field value if set, zero value otherwise.
func (o *Gender) GetPokemonSpeciesDetails() []GenderPokemonSpeciesDetailsInner {
	if o == nil || isNil(o.PokemonSpeciesDetails) {
		var ret []GenderPokemonSpeciesDetailsInner
		return ret
	}
	return o.PokemonSpeciesDetails
}

// GetPokemonSpeciesDetailsOk returns a tuple with the PokemonSpeciesDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gender) GetPokemonSpeciesDetailsOk() ([]GenderPokemonSpeciesDetailsInner, bool) {
	if o == nil || isNil(o.PokemonSpeciesDetails) {
    return nil, false
	}
	return o.PokemonSpeciesDetails, true
}

// HasPokemonSpeciesDetails returns a boolean if a field has been set.
func (o *Gender) HasPokemonSpeciesDetails() bool {
	if o != nil && !isNil(o.PokemonSpeciesDetails) {
		return true
	}

	return false
}

// SetPokemonSpeciesDetails gets a reference to the given []GenderPokemonSpeciesDetailsInner and assigns it to the PokemonSpeciesDetails field.
func (o *Gender) SetPokemonSpeciesDetails(v []GenderPokemonSpeciesDetailsInner) {
	o.PokemonSpeciesDetails = v
}

func (o Gender) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.PokemonSpeciesDetails) {
		toSerialize["pokemon_species_details"] = o.PokemonSpeciesDetails
	}
	return json.Marshal(toSerialize)
}

type NullableGender struct {
	value *Gender
	isSet bool
}

func (v NullableGender) Get() *Gender {
	return v.value
}

func (v *NullableGender) Set(val *Gender) {
	v.value = val
	v.isSet = true
}

func (v NullableGender) IsSet() bool {
	return v.isSet
}

func (v *NullableGender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGender(val *Gender) *NullableGender {
	return &NullableGender{value: val, isSet: true}
}

func (v NullableGender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


