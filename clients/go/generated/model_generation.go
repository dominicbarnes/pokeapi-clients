/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Generation struct for Generation
type Generation struct {
	// The identifier for this generation resource
	Id *int32 `json:"id,omitempty"`
	// The name for this generation resource
	Name *string `json:"name,omitempty"`
	Abilities []GenerationAbilitiesInner `json:"abilities,omitempty"`
	Names []GenerationNamesInner `json:"names,omitempty"`
}

// NewGeneration instantiates a new Generation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneration() *Generation {
	this := Generation{}
	return &this
}

// NewGenerationWithDefaults instantiates a new Generation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerationWithDefaults() *Generation {
	this := Generation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Generation) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Generation) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Generation) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Generation) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Generation) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Generation) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Generation) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Generation) SetName(v string) {
	o.Name = &v
}

// GetAbilities returns the Abilities field value if set, zero value otherwise.
func (o *Generation) GetAbilities() []GenerationAbilitiesInner {
	if o == nil || isNil(o.Abilities) {
		var ret []GenerationAbilitiesInner
		return ret
	}
	return o.Abilities
}

// GetAbilitiesOk returns a tuple with the Abilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Generation) GetAbilitiesOk() ([]GenerationAbilitiesInner, bool) {
	if o == nil || isNil(o.Abilities) {
    return nil, false
	}
	return o.Abilities, true
}

// HasAbilities returns a boolean if a field has been set.
func (o *Generation) HasAbilities() bool {
	if o != nil && !isNil(o.Abilities) {
		return true
	}

	return false
}

// SetAbilities gets a reference to the given []GenerationAbilitiesInner and assigns it to the Abilities field.
func (o *Generation) SetAbilities(v []GenerationAbilitiesInner) {
	o.Abilities = v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *Generation) GetNames() []GenerationNamesInner {
	if o == nil || isNil(o.Names) {
		var ret []GenerationNamesInner
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Generation) GetNamesOk() ([]GenerationNamesInner, bool) {
	if o == nil || isNil(o.Names) {
    return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Generation) HasNames() bool {
	if o != nil && !isNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []GenerationNamesInner and assigns it to the Names field.
func (o *Generation) SetNames(v []GenerationNamesInner) {
	o.Names = v
}

func (o Generation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Abilities) {
		toSerialize["abilities"] = o.Abilities
	}
	if !isNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableGeneration struct {
	value *Generation
	isSet bool
}

func (v NullableGeneration) Get() *Generation {
	return v.value
}

func (v *NullableGeneration) Set(val *Generation) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneration) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneration(val *Generation) *NullableGeneration {
	return &NullableGeneration{value: val, isSet: true}
}

func (v NullableGeneration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


