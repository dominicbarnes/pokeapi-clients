/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GenerationNamesInner struct for GenerationNamesInner
type GenerationNamesInner struct {
	// The localized name for an API resource in a specific language
	Name *string `json:"name,omitempty"`
	Language *Language `json:"language,omitempty"`
}

// NewGenerationNamesInner instantiates a new GenerationNamesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerationNamesInner() *GenerationNamesInner {
	this := GenerationNamesInner{}
	return &this
}

// NewGenerationNamesInnerWithDefaults instantiates a new GenerationNamesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerationNamesInnerWithDefaults() *GenerationNamesInner {
	this := GenerationNamesInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GenerationNamesInner) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerationNamesInner) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GenerationNamesInner) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GenerationNamesInner) SetName(v string) {
	o.Name = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *GenerationNamesInner) GetLanguage() Language {
	if o == nil || isNil(o.Language) {
		var ret Language
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerationNamesInner) GetLanguageOk() (*Language, bool) {
	if o == nil || isNil(o.Language) {
    return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *GenerationNamesInner) HasLanguage() bool {
	if o != nil && !isNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given Language and assigns it to the Language field.
func (o *GenerationNamesInner) SetLanguage(v Language) {
	o.Language = &v
}

func (o GenerationNamesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}

type NullableGenerationNamesInner struct {
	value *GenerationNamesInner
	isSet bool
}

func (v NullableGenerationNamesInner) Get() *GenerationNamesInner {
	return v.value
}

func (v *NullableGenerationNamesInner) Set(val *GenerationNamesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerationNamesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerationNamesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerationNamesInner(val *GenerationNamesInner) *NullableGenerationNamesInner {
	return &NullableGenerationNamesInner{value: val, isSet: true}
}

func (v NullableGenerationNamesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerationNamesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


