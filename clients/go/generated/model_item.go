/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Item struct for Item
type Item struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Cost *int32 `json:"cost,omitempty"`
	FlingPower *int32 `json:"fling_power,omitempty"`
	EffectEntries []VerboseEffect `json:"effect_entries,omitempty"`
	FlavorTextEntries []FlavorText `json:"flavor_text_entries,omitempty"`
	Attributes []ItemAttribute `json:"attributes,omitempty"`
	Category *ItemCategory `json:"category,omitempty"`
	FlingEffect *ItemFlingEffect `json:"fling_effect,omitempty"`
}

// NewItem instantiates a new Item object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItem() *Item {
	this := Item{}
	return &this
}

// NewItemWithDefaults instantiates a new Item object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithDefaults() *Item {
	this := Item{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Item) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Item) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Item) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Item) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Item) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Item) SetName(v string) {
	o.Name = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *Item) GetCost() int32 {
	if o == nil || isNil(o.Cost) {
		var ret int32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCostOk() (*int32, bool) {
	if o == nil || isNil(o.Cost) {
    return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *Item) HasCost() bool {
	if o != nil && !isNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given int32 and assigns it to the Cost field.
func (o *Item) SetCost(v int32) {
	o.Cost = &v
}

// GetFlingPower returns the FlingPower field value if set, zero value otherwise.
func (o *Item) GetFlingPower() int32 {
	if o == nil || isNil(o.FlingPower) {
		var ret int32
		return ret
	}
	return *o.FlingPower
}

// GetFlingPowerOk returns a tuple with the FlingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetFlingPowerOk() (*int32, bool) {
	if o == nil || isNil(o.FlingPower) {
    return nil, false
	}
	return o.FlingPower, true
}

// HasFlingPower returns a boolean if a field has been set.
func (o *Item) HasFlingPower() bool {
	if o != nil && !isNil(o.FlingPower) {
		return true
	}

	return false
}

// SetFlingPower gets a reference to the given int32 and assigns it to the FlingPower field.
func (o *Item) SetFlingPower(v int32) {
	o.FlingPower = &v
}

// GetEffectEntries returns the EffectEntries field value if set, zero value otherwise.
func (o *Item) GetEffectEntries() []VerboseEffect {
	if o == nil || isNil(o.EffectEntries) {
		var ret []VerboseEffect
		return ret
	}
	return o.EffectEntries
}

// GetEffectEntriesOk returns a tuple with the EffectEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetEffectEntriesOk() ([]VerboseEffect, bool) {
	if o == nil || isNil(o.EffectEntries) {
    return nil, false
	}
	return o.EffectEntries, true
}

// HasEffectEntries returns a boolean if a field has been set.
func (o *Item) HasEffectEntries() bool {
	if o != nil && !isNil(o.EffectEntries) {
		return true
	}

	return false
}

// SetEffectEntries gets a reference to the given []VerboseEffect and assigns it to the EffectEntries field.
func (o *Item) SetEffectEntries(v []VerboseEffect) {
	o.EffectEntries = v
}

// GetFlavorTextEntries returns the FlavorTextEntries field value if set, zero value otherwise.
func (o *Item) GetFlavorTextEntries() []FlavorText {
	if o == nil || isNil(o.FlavorTextEntries) {
		var ret []FlavorText
		return ret
	}
	return o.FlavorTextEntries
}

// GetFlavorTextEntriesOk returns a tuple with the FlavorTextEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetFlavorTextEntriesOk() ([]FlavorText, bool) {
	if o == nil || isNil(o.FlavorTextEntries) {
    return nil, false
	}
	return o.FlavorTextEntries, true
}

// HasFlavorTextEntries returns a boolean if a field has been set.
func (o *Item) HasFlavorTextEntries() bool {
	if o != nil && !isNil(o.FlavorTextEntries) {
		return true
	}

	return false
}

// SetFlavorTextEntries gets a reference to the given []FlavorText and assigns it to the FlavorTextEntries field.
func (o *Item) SetFlavorTextEntries(v []FlavorText) {
	o.FlavorTextEntries = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Item) GetAttributes() []ItemAttribute {
	if o == nil || isNil(o.Attributes) {
		var ret []ItemAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetAttributesOk() ([]ItemAttribute, bool) {
	if o == nil || isNil(o.Attributes) {
    return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Item) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ItemAttribute and assigns it to the Attributes field.
func (o *Item) SetAttributes(v []ItemAttribute) {
	o.Attributes = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Item) GetCategory() ItemCategory {
	if o == nil || isNil(o.Category) {
		var ret ItemCategory
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCategoryOk() (*ItemCategory, bool) {
	if o == nil || isNil(o.Category) {
    return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Item) HasCategory() bool {
	if o != nil && !isNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given ItemCategory and assigns it to the Category field.
func (o *Item) SetCategory(v ItemCategory) {
	o.Category = &v
}

// GetFlingEffect returns the FlingEffect field value if set, zero value otherwise.
func (o *Item) GetFlingEffect() ItemFlingEffect {
	if o == nil || isNil(o.FlingEffect) {
		var ret ItemFlingEffect
		return ret
	}
	return *o.FlingEffect
}

// GetFlingEffectOk returns a tuple with the FlingEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetFlingEffectOk() (*ItemFlingEffect, bool) {
	if o == nil || isNil(o.FlingEffect) {
    return nil, false
	}
	return o.FlingEffect, true
}

// HasFlingEffect returns a boolean if a field has been set.
func (o *Item) HasFlingEffect() bool {
	if o != nil && !isNil(o.FlingEffect) {
		return true
	}

	return false
}

// SetFlingEffect gets a reference to the given ItemFlingEffect and assigns it to the FlingEffect field.
func (o *Item) SetFlingEffect(v ItemFlingEffect) {
	o.FlingEffect = &v
}

func (o Item) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !isNil(o.FlingPower) {
		toSerialize["fling_power"] = o.FlingPower
	}
	if !isNil(o.EffectEntries) {
		toSerialize["effect_entries"] = o.EffectEntries
	}
	if !isNil(o.FlavorTextEntries) {
		toSerialize["flavor_text_entries"] = o.FlavorTextEntries
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !isNil(o.FlingEffect) {
		toSerialize["fling_effect"] = o.FlingEffect
	}
	return json.Marshal(toSerialize)
}

type NullableItem struct {
	value *Item
	isSet bool
}

func (v NullableItem) Get() *Item {
	return v.value
}

func (v *NullableItem) Set(val *Item) {
	v.value = val
	v.isSet = true
}

func (v NullableItem) IsSet() bool {
	return v.isSet
}

func (v *NullableItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItem(val *Item) *NullableItem {
	return &NullableItem{value: val, isSet: true}
}

func (v NullableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


