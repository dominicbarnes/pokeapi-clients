/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ItemPocket struct for ItemPocket
type ItemPocket struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Categories []ItemCategory `json:"categories,omitempty"`
}

// NewItemPocket instantiates a new ItemPocket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemPocket() *ItemPocket {
	this := ItemPocket{}
	return &this
}

// NewItemPocketWithDefaults instantiates a new ItemPocket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemPocketWithDefaults() *ItemPocket {
	this := ItemPocket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ItemPocket) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPocket) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ItemPocket) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ItemPocket) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ItemPocket) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPocket) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ItemPocket) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ItemPocket) SetName(v string) {
	o.Name = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ItemPocket) GetCategories() []ItemCategory {
	if o == nil || isNil(o.Categories) {
		var ret []ItemCategory
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPocket) GetCategoriesOk() ([]ItemCategory, bool) {
	if o == nil || isNil(o.Categories) {
    return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ItemPocket) HasCategories() bool {
	if o != nil && !isNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []ItemCategory and assigns it to the Categories field.
func (o *ItemPocket) SetCategories(v []ItemCategory) {
	o.Categories = v
}

func (o ItemPocket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return json.Marshal(toSerialize)
}

type NullableItemPocket struct {
	value *ItemPocket
	isSet bool
}

func (v NullableItemPocket) Get() *ItemPocket {
	return v.value
}

func (v *NullableItemPocket) Set(val *ItemPocket) {
	v.value = val
	v.isSet = true
}

func (v NullableItemPocket) IsSet() bool {
	return v.isSet
}

func (v *NullableItemPocket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemPocket(val *ItemPocket) *NullableItemPocket {
	return &NullableItemPocket{value: val, isSet: true}
}

func (v NullableItemPocket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemPocket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


