/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Language struct for Language
type Language struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Official *bool `json:"official,omitempty"`
	Iso639 *string `json:"iso639,omitempty"`
	Iso3166 *string `json:"iso3166,omitempty"`
	Names []Name `json:"names,omitempty"`
}

// NewLanguage instantiates a new Language object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguage() *Language {
	this := Language{}
	return &this
}

// NewLanguageWithDefaults instantiates a new Language object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageWithDefaults() *Language {
	this := Language{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Language) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Language) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Language) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Language) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Language) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Language) SetName(v string) {
	o.Name = &v
}

// GetOfficial returns the Official field value if set, zero value otherwise.
func (o *Language) GetOfficial() bool {
	if o == nil || isNil(o.Official) {
		var ret bool
		return ret
	}
	return *o.Official
}

// GetOfficialOk returns a tuple with the Official field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetOfficialOk() (*bool, bool) {
	if o == nil || isNil(o.Official) {
    return nil, false
	}
	return o.Official, true
}

// HasOfficial returns a boolean if a field has been set.
func (o *Language) HasOfficial() bool {
	if o != nil && !isNil(o.Official) {
		return true
	}

	return false
}

// SetOfficial gets a reference to the given bool and assigns it to the Official field.
func (o *Language) SetOfficial(v bool) {
	o.Official = &v
}

// GetIso639 returns the Iso639 field value if set, zero value otherwise.
func (o *Language) GetIso639() string {
	if o == nil || isNil(o.Iso639) {
		var ret string
		return ret
	}
	return *o.Iso639
}

// GetIso639Ok returns a tuple with the Iso639 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetIso639Ok() (*string, bool) {
	if o == nil || isNil(o.Iso639) {
    return nil, false
	}
	return o.Iso639, true
}

// HasIso639 returns a boolean if a field has been set.
func (o *Language) HasIso639() bool {
	if o != nil && !isNil(o.Iso639) {
		return true
	}

	return false
}

// SetIso639 gets a reference to the given string and assigns it to the Iso639 field.
func (o *Language) SetIso639(v string) {
	o.Iso639 = &v
}

// GetIso3166 returns the Iso3166 field value if set, zero value otherwise.
func (o *Language) GetIso3166() string {
	if o == nil || isNil(o.Iso3166) {
		var ret string
		return ret
	}
	return *o.Iso3166
}

// GetIso3166Ok returns a tuple with the Iso3166 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetIso3166Ok() (*string, bool) {
	if o == nil || isNil(o.Iso3166) {
    return nil, false
	}
	return o.Iso3166, true
}

// HasIso3166 returns a boolean if a field has been set.
func (o *Language) HasIso3166() bool {
	if o != nil && !isNil(o.Iso3166) {
		return true
	}

	return false
}

// SetIso3166 gets a reference to the given string and assigns it to the Iso3166 field.
func (o *Language) SetIso3166(v string) {
	o.Iso3166 = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *Language) GetNames() []Name {
	if o == nil || isNil(o.Names) {
		var ret []Name
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetNamesOk() ([]Name, bool) {
	if o == nil || isNil(o.Names) {
    return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Language) HasNames() bool {
	if o != nil && !isNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []Name and assigns it to the Names field.
func (o *Language) SetNames(v []Name) {
	o.Names = v
}

func (o Language) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Official) {
		toSerialize["official"] = o.Official
	}
	if !isNil(o.Iso639) {
		toSerialize["iso639"] = o.Iso639
	}
	if !isNil(o.Iso3166) {
		toSerialize["iso3166"] = o.Iso3166
	}
	if !isNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableLanguage struct {
	value *Language
	isSet bool
}

func (v NullableLanguage) Get() *Language {
	return v.value
}

func (v *NullableLanguage) Set(val *Language) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguage(val *Language) *NullableLanguage {
	return &NullableLanguage{value: val, isSet: true}
}

func (v NullableLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


