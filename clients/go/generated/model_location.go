/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Location struct for Location
type Location struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Region *NamedAPIResource `json:"region,omitempty"`
	Names []Name `json:"names,omitempty"`
	GameIndices []GenerationGameIndex `json:"game_indices,omitempty"`
	Areas []NamedAPIResource `json:"areas,omitempty"`
}

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation() *Location {
	this := Location{}
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Location) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Location) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Location) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Location) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Location) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Location) SetName(v string) {
	o.Name = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Location) GetRegion() NamedAPIResource {
	if o == nil || isNil(o.Region) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetRegionOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Region) {
    return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Location) HasRegion() bool {
	if o != nil && !isNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NamedAPIResource and assigns it to the Region field.
func (o *Location) SetRegion(v NamedAPIResource) {
	o.Region = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *Location) GetNames() []Name {
	if o == nil || isNil(o.Names) {
		var ret []Name
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetNamesOk() ([]Name, bool) {
	if o == nil || isNil(o.Names) {
    return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Location) HasNames() bool {
	if o != nil && !isNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []Name and assigns it to the Names field.
func (o *Location) SetNames(v []Name) {
	o.Names = v
}

// GetGameIndices returns the GameIndices field value if set, zero value otherwise.
func (o *Location) GetGameIndices() []GenerationGameIndex {
	if o == nil || isNil(o.GameIndices) {
		var ret []GenerationGameIndex
		return ret
	}
	return o.GameIndices
}

// GetGameIndicesOk returns a tuple with the GameIndices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetGameIndicesOk() ([]GenerationGameIndex, bool) {
	if o == nil || isNil(o.GameIndices) {
    return nil, false
	}
	return o.GameIndices, true
}

// HasGameIndices returns a boolean if a field has been set.
func (o *Location) HasGameIndices() bool {
	if o != nil && !isNil(o.GameIndices) {
		return true
	}

	return false
}

// SetGameIndices gets a reference to the given []GenerationGameIndex and assigns it to the GameIndices field.
func (o *Location) SetGameIndices(v []GenerationGameIndex) {
	o.GameIndices = v
}

// GetAreas returns the Areas field value if set, zero value otherwise.
func (o *Location) GetAreas() []NamedAPIResource {
	if o == nil || isNil(o.Areas) {
		var ret []NamedAPIResource
		return ret
	}
	return o.Areas
}

// GetAreasOk returns a tuple with the Areas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetAreasOk() ([]NamedAPIResource, bool) {
	if o == nil || isNil(o.Areas) {
    return nil, false
	}
	return o.Areas, true
}

// HasAreas returns a boolean if a field has been set.
func (o *Location) HasAreas() bool {
	if o != nil && !isNil(o.Areas) {
		return true
	}

	return false
}

// SetAreas gets a reference to the given []NamedAPIResource and assigns it to the Areas field.
func (o *Location) SetAreas(v []NamedAPIResource) {
	o.Areas = v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !isNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !isNil(o.GameIndices) {
		toSerialize["game_indices"] = o.GameIndices
	}
	if !isNil(o.Areas) {
		toSerialize["areas"] = o.Areas
	}
	return json.Marshal(toSerialize)
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


