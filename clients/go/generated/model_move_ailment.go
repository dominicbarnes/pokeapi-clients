/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MoveAilment struct for MoveAilment
type MoveAilment struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Moves []Move `json:"moves"`
}

// NewMoveAilment instantiates a new MoveAilment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveAilment(id int32, name string, moves []Move) *MoveAilment {
	this := MoveAilment{}
	this.Id = id
	this.Name = name
	this.Moves = moves
	return &this
}

// NewMoveAilmentWithDefaults instantiates a new MoveAilment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveAilmentWithDefaults() *MoveAilment {
	this := MoveAilment{}
	return &this
}

// GetId returns the Id field value
func (o *MoveAilment) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MoveAilment) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MoveAilment) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MoveAilment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MoveAilment) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MoveAilment) SetName(v string) {
	o.Name = v
}

// GetMoves returns the Moves field value
func (o *MoveAilment) GetMoves() []Move {
	if o == nil {
		var ret []Move
		return ret
	}

	return o.Moves
}

// GetMovesOk returns a tuple with the Moves field value
// and a boolean to check if the value has been set.
func (o *MoveAilment) GetMovesOk() ([]Move, bool) {
	if o == nil {
    return nil, false
	}
	return o.Moves, true
}

// SetMoves sets field value
func (o *MoveAilment) SetMoves(v []Move) {
	o.Moves = v
}

func (o MoveAilment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["moves"] = o.Moves
	}
	return json.Marshal(toSerialize)
}

type NullableMoveAilment struct {
	value *MoveAilment
	isSet bool
}

func (v NullableMoveAilment) Get() *MoveAilment {
	return v.value
}

func (v *NullableMoveAilment) Set(val *MoveAilment) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveAilment) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveAilment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveAilment(val *MoveAilment) *NullableMoveAilment {
	return &NullableMoveAilment{value: val, isSet: true}
}

func (v NullableMoveAilment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveAilment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


