/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MoveTarget Targets moves can be directed at during battle. Targets can be Pok√©mon, adjacent positions, all opponents, etc.
type MoveTarget struct {
	// The identifier for this move target resource
	Id int32 `json:"id"`
	// The name for this move target resource
	Name string `json:"name"`
	// The description of this move target listed in different languages
	Descriptions []Description `json:"descriptions"`
}

// NewMoveTarget instantiates a new MoveTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveTarget(id int32, name string, descriptions []Description) *MoveTarget {
	this := MoveTarget{}
	this.Id = id
	this.Name = name
	this.Descriptions = descriptions
	return &this
}

// NewMoveTargetWithDefaults instantiates a new MoveTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveTargetWithDefaults() *MoveTarget {
	this := MoveTarget{}
	return &this
}

// GetId returns the Id field value
func (o *MoveTarget) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MoveTarget) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MoveTarget) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MoveTarget) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MoveTarget) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MoveTarget) SetName(v string) {
	o.Name = v
}

// GetDescriptions returns the Descriptions field value
func (o *MoveTarget) GetDescriptions() []Description {
	if o == nil {
		var ret []Description
		return ret
	}

	return o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value
// and a boolean to check if the value has been set.
func (o *MoveTarget) GetDescriptionsOk() ([]Description, bool) {
	if o == nil {
    return nil, false
	}
	return o.Descriptions, true
}

// SetDescriptions sets field value
func (o *MoveTarget) SetDescriptions(v []Description) {
	o.Descriptions = v
}

func (o MoveTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["descriptions"] = o.Descriptions
	}
	return json.Marshal(toSerialize)
}

type NullableMoveTarget struct {
	value *MoveTarget
	isSet bool
}

func (v NullableMoveTarget) Get() *MoveTarget {
	return v.value
}

func (v *NullableMoveTarget) Set(val *MoveTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveTarget(val *MoveTarget) *NullableMoveTarget {
	return &NullableMoveTarget{value: val, isSet: true}
}

func (v NullableMoveTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


