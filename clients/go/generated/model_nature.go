/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Nature struct for Nature
type Nature struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	DecreasedStat string `json:"decreased_stat"`
	IncreasedStat string `json:"increased_stat"`
	HatesFlavor string `json:"hates_flavor"`
	LikesFlavor string `json:"likes_flavor"`
	PokeathlonStatChanges []NatureStatChange `json:"pokeathlon_stat_changes,omitempty"`
	MoveBattleStylePreferences []MoveBattleStylePreference `json:"move_battle_style_preferences,omitempty"`
}

// NewNature instantiates a new Nature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNature(id int32, name string, decreasedStat string, increasedStat string, hatesFlavor string, likesFlavor string) *Nature {
	this := Nature{}
	this.Id = id
	this.Name = name
	this.DecreasedStat = decreasedStat
	this.IncreasedStat = increasedStat
	this.HatesFlavor = hatesFlavor
	this.LikesFlavor = likesFlavor
	return &this
}

// NewNatureWithDefaults instantiates a new Nature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatureWithDefaults() *Nature {
	this := Nature{}
	return &this
}

// GetId returns the Id field value
func (o *Nature) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Nature) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Nature) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Nature) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Nature) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Nature) SetName(v string) {
	o.Name = v
}

// GetDecreasedStat returns the DecreasedStat field value
func (o *Nature) GetDecreasedStat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DecreasedStat
}

// GetDecreasedStatOk returns a tuple with the DecreasedStat field value
// and a boolean to check if the value has been set.
func (o *Nature) GetDecreasedStatOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DecreasedStat, true
}

// SetDecreasedStat sets field value
func (o *Nature) SetDecreasedStat(v string) {
	o.DecreasedStat = v
}

// GetIncreasedStat returns the IncreasedStat field value
func (o *Nature) GetIncreasedStat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncreasedStat
}

// GetIncreasedStatOk returns a tuple with the IncreasedStat field value
// and a boolean to check if the value has been set.
func (o *Nature) GetIncreasedStatOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IncreasedStat, true
}

// SetIncreasedStat sets field value
func (o *Nature) SetIncreasedStat(v string) {
	o.IncreasedStat = v
}

// GetHatesFlavor returns the HatesFlavor field value
func (o *Nature) GetHatesFlavor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HatesFlavor
}

// GetHatesFlavorOk returns a tuple with the HatesFlavor field value
// and a boolean to check if the value has been set.
func (o *Nature) GetHatesFlavorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HatesFlavor, true
}

// SetHatesFlavor sets field value
func (o *Nature) SetHatesFlavor(v string) {
	o.HatesFlavor = v
}

// GetLikesFlavor returns the LikesFlavor field value
func (o *Nature) GetLikesFlavor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LikesFlavor
}

// GetLikesFlavorOk returns a tuple with the LikesFlavor field value
// and a boolean to check if the value has been set.
func (o *Nature) GetLikesFlavorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LikesFlavor, true
}

// SetLikesFlavor sets field value
func (o *Nature) SetLikesFlavor(v string) {
	o.LikesFlavor = v
}

// GetPokeathlonStatChanges returns the PokeathlonStatChanges field value if set, zero value otherwise.
func (o *Nature) GetPokeathlonStatChanges() []NatureStatChange {
	if o == nil || isNil(o.PokeathlonStatChanges) {
		var ret []NatureStatChange
		return ret
	}
	return o.PokeathlonStatChanges
}

// GetPokeathlonStatChangesOk returns a tuple with the PokeathlonStatChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nature) GetPokeathlonStatChangesOk() ([]NatureStatChange, bool) {
	if o == nil || isNil(o.PokeathlonStatChanges) {
    return nil, false
	}
	return o.PokeathlonStatChanges, true
}

// HasPokeathlonStatChanges returns a boolean if a field has been set.
func (o *Nature) HasPokeathlonStatChanges() bool {
	if o != nil && !isNil(o.PokeathlonStatChanges) {
		return true
	}

	return false
}

// SetPokeathlonStatChanges gets a reference to the given []NatureStatChange and assigns it to the PokeathlonStatChanges field.
func (o *Nature) SetPokeathlonStatChanges(v []NatureStatChange) {
	o.PokeathlonStatChanges = v
}

// GetMoveBattleStylePreferences returns the MoveBattleStylePreferences field value if set, zero value otherwise.
func (o *Nature) GetMoveBattleStylePreferences() []MoveBattleStylePreference {
	if o == nil || isNil(o.MoveBattleStylePreferences) {
		var ret []MoveBattleStylePreference
		return ret
	}
	return o.MoveBattleStylePreferences
}

// GetMoveBattleStylePreferencesOk returns a tuple with the MoveBattleStylePreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nature) GetMoveBattleStylePreferencesOk() ([]MoveBattleStylePreference, bool) {
	if o == nil || isNil(o.MoveBattleStylePreferences) {
    return nil, false
	}
	return o.MoveBattleStylePreferences, true
}

// HasMoveBattleStylePreferences returns a boolean if a field has been set.
func (o *Nature) HasMoveBattleStylePreferences() bool {
	if o != nil && !isNil(o.MoveBattleStylePreferences) {
		return true
	}

	return false
}

// SetMoveBattleStylePreferences gets a reference to the given []MoveBattleStylePreference and assigns it to the MoveBattleStylePreferences field.
func (o *Nature) SetMoveBattleStylePreferences(v []MoveBattleStylePreference) {
	o.MoveBattleStylePreferences = v
}

func (o Nature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["decreased_stat"] = o.DecreasedStat
	}
	if true {
		toSerialize["increased_stat"] = o.IncreasedStat
	}
	if true {
		toSerialize["hates_flavor"] = o.HatesFlavor
	}
	if true {
		toSerialize["likes_flavor"] = o.LikesFlavor
	}
	if !isNil(o.PokeathlonStatChanges) {
		toSerialize["pokeathlon_stat_changes"] = o.PokeathlonStatChanges
	}
	if !isNil(o.MoveBattleStylePreferences) {
		toSerialize["move_battle_style_preferences"] = o.MoveBattleStylePreferences
	}
	return json.Marshal(toSerialize)
}

type NullableNature struct {
	value *Nature
	isSet bool
}

func (v NullableNature) Get() *Nature {
	return v.value
}

func (v *NullableNature) Set(val *Nature) {
	v.value = val
	v.isSet = true
}

func (v NullableNature) IsSet() bool {
	return v.isSet
}

func (v *NullableNature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNature(val *Nature) *NullableNature {
	return &NullableNature{value: val, isSet: true}
}

func (v NullableNature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


