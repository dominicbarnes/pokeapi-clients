/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NatureStatAffect struct for NatureStatAffect
type NatureStatAffect struct {
	Increase []Nature `json:"increase,omitempty"`
	Decrease []Nature `json:"decrease,omitempty"`
}

// NewNatureStatAffect instantiates a new NatureStatAffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatureStatAffect() *NatureStatAffect {
	this := NatureStatAffect{}
	return &this
}

// NewNatureStatAffectWithDefaults instantiates a new NatureStatAffect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatureStatAffectWithDefaults() *NatureStatAffect {
	this := NatureStatAffect{}
	return &this
}

// GetIncrease returns the Increase field value if set, zero value otherwise.
func (o *NatureStatAffect) GetIncrease() []Nature {
	if o == nil || isNil(o.Increase) {
		var ret []Nature
		return ret
	}
	return o.Increase
}

// GetIncreaseOk returns a tuple with the Increase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatureStatAffect) GetIncreaseOk() ([]Nature, bool) {
	if o == nil || isNil(o.Increase) {
    return nil, false
	}
	return o.Increase, true
}

// HasIncrease returns a boolean if a field has been set.
func (o *NatureStatAffect) HasIncrease() bool {
	if o != nil && !isNil(o.Increase) {
		return true
	}

	return false
}

// SetIncrease gets a reference to the given []Nature and assigns it to the Increase field.
func (o *NatureStatAffect) SetIncrease(v []Nature) {
	o.Increase = v
}

// GetDecrease returns the Decrease field value if set, zero value otherwise.
func (o *NatureStatAffect) GetDecrease() []Nature {
	if o == nil || isNil(o.Decrease) {
		var ret []Nature
		return ret
	}
	return o.Decrease
}

// GetDecreaseOk returns a tuple with the Decrease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatureStatAffect) GetDecreaseOk() ([]Nature, bool) {
	if o == nil || isNil(o.Decrease) {
    return nil, false
	}
	return o.Decrease, true
}

// HasDecrease returns a boolean if a field has been set.
func (o *NatureStatAffect) HasDecrease() bool {
	if o != nil && !isNil(o.Decrease) {
		return true
	}

	return false
}

// SetDecrease gets a reference to the given []Nature and assigns it to the Decrease field.
func (o *NatureStatAffect) SetDecrease(v []Nature) {
	o.Decrease = v
}

func (o NatureStatAffect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Increase) {
		toSerialize["increase"] = o.Increase
	}
	if !isNil(o.Decrease) {
		toSerialize["decrease"] = o.Decrease
	}
	return json.Marshal(toSerialize)
}

type NullableNatureStatAffect struct {
	value *NatureStatAffect
	isSet bool
}

func (v NullableNatureStatAffect) Get() *NatureStatAffect {
	return v.value
}

func (v *NullableNatureStatAffect) Set(val *NatureStatAffect) {
	v.value = val
	v.isSet = true
}

func (v NullableNatureStatAffect) IsSet() bool {
	return v.isSet
}

func (v *NullableNatureStatAffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatureStatAffect(val *NatureStatAffect) *NullableNatureStatAffect {
	return &NullableNatureStatAffect{value: val, isSet: true}
}

func (v NullableNatureStatAffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatureStatAffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


