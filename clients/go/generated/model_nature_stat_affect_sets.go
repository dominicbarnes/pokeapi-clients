/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NatureStatAffectSets struct for NatureStatAffectSets
type NatureStatAffectSets struct {
	Increase []NatureStatAffect `json:"increase"`
	Decrease []NatureStatAffect `json:"decrease"`
}

// NewNatureStatAffectSets instantiates a new NatureStatAffectSets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatureStatAffectSets(increase []NatureStatAffect, decrease []NatureStatAffect) *NatureStatAffectSets {
	this := NatureStatAffectSets{}
	this.Increase = increase
	this.Decrease = decrease
	return &this
}

// NewNatureStatAffectSetsWithDefaults instantiates a new NatureStatAffectSets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatureStatAffectSetsWithDefaults() *NatureStatAffectSets {
	this := NatureStatAffectSets{}
	return &this
}

// GetIncrease returns the Increase field value
func (o *NatureStatAffectSets) GetIncrease() []NatureStatAffect {
	if o == nil {
		var ret []NatureStatAffect
		return ret
	}

	return o.Increase
}

// GetIncreaseOk returns a tuple with the Increase field value
// and a boolean to check if the value has been set.
func (o *NatureStatAffectSets) GetIncreaseOk() ([]NatureStatAffect, bool) {
	if o == nil {
    return nil, false
	}
	return o.Increase, true
}

// SetIncrease sets field value
func (o *NatureStatAffectSets) SetIncrease(v []NatureStatAffect) {
	o.Increase = v
}

// GetDecrease returns the Decrease field value
func (o *NatureStatAffectSets) GetDecrease() []NatureStatAffect {
	if o == nil {
		var ret []NatureStatAffect
		return ret
	}

	return o.Decrease
}

// GetDecreaseOk returns a tuple with the Decrease field value
// and a boolean to check if the value has been set.
func (o *NatureStatAffectSets) GetDecreaseOk() ([]NatureStatAffect, bool) {
	if o == nil {
    return nil, false
	}
	return o.Decrease, true
}

// SetDecrease sets field value
func (o *NatureStatAffectSets) SetDecrease(v []NatureStatAffect) {
	o.Decrease = v
}

func (o NatureStatAffectSets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["increase"] = o.Increase
	}
	if true {
		toSerialize["decrease"] = o.Decrease
	}
	return json.Marshal(toSerialize)
}

type NullableNatureStatAffectSets struct {
	value *NatureStatAffectSets
	isSet bool
}

func (v NullableNatureStatAffectSets) Get() *NatureStatAffectSets {
	return v.value
}

func (v *NullableNatureStatAffectSets) Set(val *NatureStatAffectSets) {
	v.value = val
	v.isSet = true
}

func (v NullableNatureStatAffectSets) IsSet() bool {
	return v.isSet
}

func (v *NullableNatureStatAffectSets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatureStatAffectSets(val *NatureStatAffectSets) *NullableNatureStatAffectSets {
	return &NullableNatureStatAffectSets{value: val, isSet: true}
}

func (v NullableNatureStatAffectSets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatureStatAffectSets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


