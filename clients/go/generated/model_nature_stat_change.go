/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NatureStatChange struct for NatureStatChange
type NatureStatChange struct {
	MaxChange *int32 `json:"max_change,omitempty"`
	PokeathlonStat *PokeathlonStatName `json:"pokeathlon_stat,omitempty"`
}

// NewNatureStatChange instantiates a new NatureStatChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatureStatChange() *NatureStatChange {
	this := NatureStatChange{}
	return &this
}

// NewNatureStatChangeWithDefaults instantiates a new NatureStatChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatureStatChangeWithDefaults() *NatureStatChange {
	this := NatureStatChange{}
	return &this
}

// GetMaxChange returns the MaxChange field value if set, zero value otherwise.
func (o *NatureStatChange) GetMaxChange() int32 {
	if o == nil || isNil(o.MaxChange) {
		var ret int32
		return ret
	}
	return *o.MaxChange
}

// GetMaxChangeOk returns a tuple with the MaxChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatureStatChange) GetMaxChangeOk() (*int32, bool) {
	if o == nil || isNil(o.MaxChange) {
    return nil, false
	}
	return o.MaxChange, true
}

// HasMaxChange returns a boolean if a field has been set.
func (o *NatureStatChange) HasMaxChange() bool {
	if o != nil && !isNil(o.MaxChange) {
		return true
	}

	return false
}

// SetMaxChange gets a reference to the given int32 and assigns it to the MaxChange field.
func (o *NatureStatChange) SetMaxChange(v int32) {
	o.MaxChange = &v
}

// GetPokeathlonStat returns the PokeathlonStat field value if set, zero value otherwise.
func (o *NatureStatChange) GetPokeathlonStat() PokeathlonStatName {
	if o == nil || isNil(o.PokeathlonStat) {
		var ret PokeathlonStatName
		return ret
	}
	return *o.PokeathlonStat
}

// GetPokeathlonStatOk returns a tuple with the PokeathlonStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatureStatChange) GetPokeathlonStatOk() (*PokeathlonStatName, bool) {
	if o == nil || isNil(o.PokeathlonStat) {
    return nil, false
	}
	return o.PokeathlonStat, true
}

// HasPokeathlonStat returns a boolean if a field has been set.
func (o *NatureStatChange) HasPokeathlonStat() bool {
	if o != nil && !isNil(o.PokeathlonStat) {
		return true
	}

	return false
}

// SetPokeathlonStat gets a reference to the given PokeathlonStatName and assigns it to the PokeathlonStat field.
func (o *NatureStatChange) SetPokeathlonStat(v PokeathlonStatName) {
	o.PokeathlonStat = &v
}

func (o NatureStatChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MaxChange) {
		toSerialize["max_change"] = o.MaxChange
	}
	if !isNil(o.PokeathlonStat) {
		toSerialize["pokeathlon_stat"] = o.PokeathlonStat
	}
	return json.Marshal(toSerialize)
}

type NullableNatureStatChange struct {
	value *NatureStatChange
	isSet bool
}

func (v NullableNatureStatChange) Get() *NatureStatChange {
	return v.value
}

func (v *NullableNatureStatChange) Set(val *NatureStatChange) {
	v.value = val
	v.isSet = true
}

func (v NullableNatureStatChange) IsSet() bool {
	return v.isSet
}

func (v *NullableNatureStatChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatureStatChange(val *NatureStatChange) *NullableNatureStatChange {
	return &NullableNatureStatChange{value: val, isSet: true}
}

func (v NullableNatureStatChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatureStatChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


