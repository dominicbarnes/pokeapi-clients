/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PastMoveStatValues struct for PastMoveStatValues
type PastMoveStatValues struct {
	// The percent value of how likely this move is to be successful.
	Accuracy int32 `json:"accuracy"`
	// The percent value of effect occurring.
	EffectChance *int32 `json:"effect_chance,omitempty"`
	// The base power of this move with a value of 0 if it does not have a base power.
	Power int32 `json:"power"`
	// The power points this move has left.
	Pp int32 `json:"pp"`
	// The list of previous effects this move has had across version groups.
	EffectEntries []PastMoveStatValuesEffectEntriesInner `json:"effect_entries,omitempty"`
	Type *Type `json:"type,omitempty"`
}

// NewPastMoveStatValues instantiates a new PastMoveStatValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPastMoveStatValues(accuracy int32, power int32, pp int32) *PastMoveStatValues {
	this := PastMoveStatValues{}
	this.Accuracy = accuracy
	this.Power = power
	this.Pp = pp
	return &this
}

// NewPastMoveStatValuesWithDefaults instantiates a new PastMoveStatValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPastMoveStatValuesWithDefaults() *PastMoveStatValues {
	this := PastMoveStatValues{}
	return &this
}

// GetAccuracy returns the Accuracy field value
func (o *PastMoveStatValues) GetAccuracy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Accuracy
}

// GetAccuracyOk returns a tuple with the Accuracy field value
// and a boolean to check if the value has been set.
func (o *PastMoveStatValues) GetAccuracyOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Accuracy, true
}

// SetAccuracy sets field value
func (o *PastMoveStatValues) SetAccuracy(v int32) {
	o.Accuracy = v
}

// GetEffectChance returns the EffectChance field value if set, zero value otherwise.
func (o *PastMoveStatValues) GetEffectChance() int32 {
	if o == nil || isNil(o.EffectChance) {
		var ret int32
		return ret
	}
	return *o.EffectChance
}

// GetEffectChanceOk returns a tuple with the EffectChance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PastMoveStatValues) GetEffectChanceOk() (*int32, bool) {
	if o == nil || isNil(o.EffectChance) {
    return nil, false
	}
	return o.EffectChance, true
}

// HasEffectChance returns a boolean if a field has been set.
func (o *PastMoveStatValues) HasEffectChance() bool {
	if o != nil && !isNil(o.EffectChance) {
		return true
	}

	return false
}

// SetEffectChance gets a reference to the given int32 and assigns it to the EffectChance field.
func (o *PastMoveStatValues) SetEffectChance(v int32) {
	o.EffectChance = &v
}

// GetPower returns the Power field value
func (o *PastMoveStatValues) GetPower() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Power
}

// GetPowerOk returns a tuple with the Power field value
// and a boolean to check if the value has been set.
func (o *PastMoveStatValues) GetPowerOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Power, true
}

// SetPower sets field value
func (o *PastMoveStatValues) SetPower(v int32) {
	o.Power = v
}

// GetPp returns the Pp field value
func (o *PastMoveStatValues) GetPp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pp
}

// GetPpOk returns a tuple with the Pp field value
// and a boolean to check if the value has been set.
func (o *PastMoveStatValues) GetPpOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Pp, true
}

// SetPp sets field value
func (o *PastMoveStatValues) SetPp(v int32) {
	o.Pp = v
}

// GetEffectEntries returns the EffectEntries field value if set, zero value otherwise.
func (o *PastMoveStatValues) GetEffectEntries() []PastMoveStatValuesEffectEntriesInner {
	if o == nil || isNil(o.EffectEntries) {
		var ret []PastMoveStatValuesEffectEntriesInner
		return ret
	}
	return o.EffectEntries
}

// GetEffectEntriesOk returns a tuple with the EffectEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PastMoveStatValues) GetEffectEntriesOk() ([]PastMoveStatValuesEffectEntriesInner, bool) {
	if o == nil || isNil(o.EffectEntries) {
    return nil, false
	}
	return o.EffectEntries, true
}

// HasEffectEntries returns a boolean if a field has been set.
func (o *PastMoveStatValues) HasEffectEntries() bool {
	if o != nil && !isNil(o.EffectEntries) {
		return true
	}

	return false
}

// SetEffectEntries gets a reference to the given []PastMoveStatValuesEffectEntriesInner and assigns it to the EffectEntries field.
func (o *PastMoveStatValues) SetEffectEntries(v []PastMoveStatValuesEffectEntriesInner) {
	o.EffectEntries = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PastMoveStatValues) GetType() Type {
	if o == nil || isNil(o.Type) {
		var ret Type
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PastMoveStatValues) GetTypeOk() (*Type, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PastMoveStatValues) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given Type and assigns it to the Type field.
func (o *PastMoveStatValues) SetType(v Type) {
	o.Type = &v
}

func (o PastMoveStatValues) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accuracy"] = o.Accuracy
	}
	if !isNil(o.EffectChance) {
		toSerialize["effect_chance"] = o.EffectChance
	}
	if true {
		toSerialize["power"] = o.Power
	}
	if true {
		toSerialize["pp"] = o.Pp
	}
	if !isNil(o.EffectEntries) {
		toSerialize["effect_entries"] = o.EffectEntries
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePastMoveStatValues struct {
	value *PastMoveStatValues
	isSet bool
}

func (v NullablePastMoveStatValues) Get() *PastMoveStatValues {
	return v.value
}

func (v *NullablePastMoveStatValues) Set(val *PastMoveStatValues) {
	v.value = val
	v.isSet = true
}

func (v NullablePastMoveStatValues) IsSet() bool {
	return v.isSet
}

func (v *NullablePastMoveStatValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePastMoveStatValues(val *PastMoveStatValues) *NullablePastMoveStatValues {
	return &NullablePastMoveStatValues{value: val, isSet: true}
}

func (v NullablePastMoveStatValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePastMoveStatValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


