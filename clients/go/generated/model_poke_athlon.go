/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokeAthlon struct for PokeAthlon
type PokeAthlon struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Names []PokeathlonStatName `json:"names"`
}

// NewPokeAthlon instantiates a new PokeAthlon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokeAthlon(id int32, name string, names []PokeathlonStatName) *PokeAthlon {
	this := PokeAthlon{}
	this.Id = id
	this.Name = name
	this.Names = names
	return &this
}

// NewPokeAthlonWithDefaults instantiates a new PokeAthlon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokeAthlonWithDefaults() *PokeAthlon {
	this := PokeAthlon{}
	return &this
}

// GetId returns the Id field value
func (o *PokeAthlon) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PokeAthlon) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PokeAthlon) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PokeAthlon) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PokeAthlon) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PokeAthlon) SetName(v string) {
	o.Name = v
}

// GetNames returns the Names field value
func (o *PokeAthlon) GetNames() []PokeathlonStatName {
	if o == nil {
		var ret []PokeathlonStatName
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *PokeAthlon) GetNamesOk() ([]PokeathlonStatName, bool) {
	if o == nil {
    return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *PokeAthlon) SetNames(v []PokeathlonStatName) {
	o.Names = v
}

func (o PokeAthlon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullablePokeAthlon struct {
	value *PokeAthlon
	isSet bool
}

func (v NullablePokeAthlon) Get() *PokeAthlon {
	return v.value
}

func (v *NullablePokeAthlon) Set(val *PokeAthlon) {
	v.value = val
	v.isSet = true
}

func (v NullablePokeAthlon) IsSet() bool {
	return v.isSet
}

func (v *NullablePokeAthlon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokeAthlon(val *PokeAthlon) *NullablePokeAthlon {
	return &NullablePokeAthlon{value: val, isSet: true}
}

func (v NullablePokeAthlon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokeAthlon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


