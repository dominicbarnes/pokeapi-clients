/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokeathlonStatAffect struct for PokeathlonStatAffect
type PokeathlonStatAffect struct {
	// The maximum amount of change to the referenced Pok√©athlon stat.
	MaxChange int32 `json:"max_change"`
	Nature Nature `json:"nature"`
}

// NewPokeathlonStatAffect instantiates a new PokeathlonStatAffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokeathlonStatAffect(maxChange int32, nature Nature) *PokeathlonStatAffect {
	this := PokeathlonStatAffect{}
	this.MaxChange = maxChange
	this.Nature = nature
	return &this
}

// NewPokeathlonStatAffectWithDefaults instantiates a new PokeathlonStatAffect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokeathlonStatAffectWithDefaults() *PokeathlonStatAffect {
	this := PokeathlonStatAffect{}
	return &this
}

// GetMaxChange returns the MaxChange field value
func (o *PokeathlonStatAffect) GetMaxChange() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxChange
}

// GetMaxChangeOk returns a tuple with the MaxChange field value
// and a boolean to check if the value has been set.
func (o *PokeathlonStatAffect) GetMaxChangeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MaxChange, true
}

// SetMaxChange sets field value
func (o *PokeathlonStatAffect) SetMaxChange(v int32) {
	o.MaxChange = v
}

// GetNature returns the Nature field value
func (o *PokeathlonStatAffect) GetNature() Nature {
	if o == nil {
		var ret Nature
		return ret
	}

	return o.Nature
}

// GetNatureOk returns a tuple with the Nature field value
// and a boolean to check if the value has been set.
func (o *PokeathlonStatAffect) GetNatureOk() (*Nature, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Nature, true
}

// SetNature sets field value
func (o *PokeathlonStatAffect) SetNature(v Nature) {
	o.Nature = v
}

func (o PokeathlonStatAffect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["max_change"] = o.MaxChange
	}
	if true {
		toSerialize["nature"] = o.Nature
	}
	return json.Marshal(toSerialize)
}

type NullablePokeathlonStatAffect struct {
	value *PokeathlonStatAffect
	isSet bool
}

func (v NullablePokeathlonStatAffect) Get() *PokeathlonStatAffect {
	return v.value
}

func (v *NullablePokeathlonStatAffect) Set(val *PokeathlonStatAffect) {
	v.value = val
	v.isSet = true
}

func (v NullablePokeathlonStatAffect) IsSet() bool {
	return v.isSet
}

func (v *NullablePokeathlonStatAffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokeathlonStatAffect(val *PokeathlonStatAffect) *NullablePokeathlonStatAffect {
	return &NullablePokeathlonStatAffect{value: val, isSet: true}
}

func (v NullablePokeathlonStatAffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokeathlonStatAffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


