/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokeathlonStatAffectingNatures A detail of natures which affect this Pokéathlon stat positively or negatively
type PokeathlonStatAffectingNatures struct {
	// A list of natures that positively affect this Pokéathlon stat
	Increase []NaturePokeathlonStatAffectSets `json:"increase,omitempty"`
	// A list of natures that negatively affect this Pokéathlon stat
	Decrease []NaturePokeathlonStatAffectSets `json:"decrease,omitempty"`
}

// NewPokeathlonStatAffectingNatures instantiates a new PokeathlonStatAffectingNatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokeathlonStatAffectingNatures() *PokeathlonStatAffectingNatures {
	this := PokeathlonStatAffectingNatures{}
	return &this
}

// NewPokeathlonStatAffectingNaturesWithDefaults instantiates a new PokeathlonStatAffectingNatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokeathlonStatAffectingNaturesWithDefaults() *PokeathlonStatAffectingNatures {
	this := PokeathlonStatAffectingNatures{}
	return &this
}

// GetIncrease returns the Increase field value if set, zero value otherwise.
func (o *PokeathlonStatAffectingNatures) GetIncrease() []NaturePokeathlonStatAffectSets {
	if o == nil || isNil(o.Increase) {
		var ret []NaturePokeathlonStatAffectSets
		return ret
	}
	return o.Increase
}

// GetIncreaseOk returns a tuple with the Increase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokeathlonStatAffectingNatures) GetIncreaseOk() ([]NaturePokeathlonStatAffectSets, bool) {
	if o == nil || isNil(o.Increase) {
    return nil, false
	}
	return o.Increase, true
}

// HasIncrease returns a boolean if a field has been set.
func (o *PokeathlonStatAffectingNatures) HasIncrease() bool {
	if o != nil && !isNil(o.Increase) {
		return true
	}

	return false
}

// SetIncrease gets a reference to the given []NaturePokeathlonStatAffectSets and assigns it to the Increase field.
func (o *PokeathlonStatAffectingNatures) SetIncrease(v []NaturePokeathlonStatAffectSets) {
	o.Increase = v
}

// GetDecrease returns the Decrease field value if set, zero value otherwise.
func (o *PokeathlonStatAffectingNatures) GetDecrease() []NaturePokeathlonStatAffectSets {
	if o == nil || isNil(o.Decrease) {
		var ret []NaturePokeathlonStatAffectSets
		return ret
	}
	return o.Decrease
}

// GetDecreaseOk returns a tuple with the Decrease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokeathlonStatAffectingNatures) GetDecreaseOk() ([]NaturePokeathlonStatAffectSets, bool) {
	if o == nil || isNil(o.Decrease) {
    return nil, false
	}
	return o.Decrease, true
}

// HasDecrease returns a boolean if a field has been set.
func (o *PokeathlonStatAffectingNatures) HasDecrease() bool {
	if o != nil && !isNil(o.Decrease) {
		return true
	}

	return false
}

// SetDecrease gets a reference to the given []NaturePokeathlonStatAffectSets and assigns it to the Decrease field.
func (o *PokeathlonStatAffectingNatures) SetDecrease(v []NaturePokeathlonStatAffectSets) {
	o.Decrease = v
}

func (o PokeathlonStatAffectingNatures) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Increase) {
		toSerialize["increase"] = o.Increase
	}
	if !isNil(o.Decrease) {
		toSerialize["decrease"] = o.Decrease
	}
	return json.Marshal(toSerialize)
}

type NullablePokeathlonStatAffectingNatures struct {
	value *PokeathlonStatAffectingNatures
	isSet bool
}

func (v NullablePokeathlonStatAffectingNatures) Get() *PokeathlonStatAffectingNatures {
	return v.value
}

func (v *NullablePokeathlonStatAffectingNatures) Set(val *PokeathlonStatAffectingNatures) {
	v.value = val
	v.isSet = true
}

func (v NullablePokeathlonStatAffectingNatures) IsSet() bool {
	return v.isSet
}

func (v *NullablePokeathlonStatAffectingNatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokeathlonStatAffectingNatures(val *PokeathlonStatAffectingNatures) *NullablePokeathlonStatAffectingNatures {
	return &NullablePokeathlonStatAffectingNatures{value: val, isSet: true}
}

func (v NullablePokeathlonStatAffectingNatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokeathlonStatAffectingNatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


