/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokemonAbility struct for PokemonAbility
type PokemonAbility struct {
	IsHidden *bool `json:"is_hidden,omitempty"`
	Slot *int32 `json:"slot,omitempty"`
	Ability *Ability `json:"ability,omitempty"`
}

// NewPokemonAbility instantiates a new PokemonAbility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokemonAbility() *PokemonAbility {
	this := PokemonAbility{}
	return &this
}

// NewPokemonAbilityWithDefaults instantiates a new PokemonAbility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokemonAbilityWithDefaults() *PokemonAbility {
	this := PokemonAbility{}
	return &this
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *PokemonAbility) GetIsHidden() bool {
	if o == nil || isNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonAbility) GetIsHiddenOk() (*bool, bool) {
	if o == nil || isNil(o.IsHidden) {
    return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *PokemonAbility) HasIsHidden() bool {
	if o != nil && !isNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *PokemonAbility) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *PokemonAbility) GetSlot() int32 {
	if o == nil || isNil(o.Slot) {
		var ret int32
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonAbility) GetSlotOk() (*int32, bool) {
	if o == nil || isNil(o.Slot) {
    return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *PokemonAbility) HasSlot() bool {
	if o != nil && !isNil(o.Slot) {
		return true
	}

	return false
}

// SetSlot gets a reference to the given int32 and assigns it to the Slot field.
func (o *PokemonAbility) SetSlot(v int32) {
	o.Slot = &v
}

// GetAbility returns the Ability field value if set, zero value otherwise.
func (o *PokemonAbility) GetAbility() Ability {
	if o == nil || isNil(o.Ability) {
		var ret Ability
		return ret
	}
	return *o.Ability
}

// GetAbilityOk returns a tuple with the Ability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonAbility) GetAbilityOk() (*Ability, bool) {
	if o == nil || isNil(o.Ability) {
    return nil, false
	}
	return o.Ability, true
}

// HasAbility returns a boolean if a field has been set.
func (o *PokemonAbility) HasAbility() bool {
	if o != nil && !isNil(o.Ability) {
		return true
	}

	return false
}

// SetAbility gets a reference to the given Ability and assigns it to the Ability field.
func (o *PokemonAbility) SetAbility(v Ability) {
	o.Ability = &v
}

func (o PokemonAbility) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsHidden) {
		toSerialize["is_hidden"] = o.IsHidden
	}
	if !isNil(o.Slot) {
		toSerialize["slot"] = o.Slot
	}
	if !isNil(o.Ability) {
		toSerialize["ability"] = o.Ability
	}
	return json.Marshal(toSerialize)
}

type NullablePokemonAbility struct {
	value *PokemonAbility
	isSet bool
}

func (v NullablePokemonAbility) Get() *PokemonAbility {
	return v.value
}

func (v *NullablePokemonAbility) Set(val *PokemonAbility) {
	v.value = val
	v.isSet = true
}

func (v NullablePokemonAbility) IsSet() bool {
	return v.isSet
}

func (v *NullablePokemonAbility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokemonAbility(val *PokemonAbility) *NullablePokemonAbility {
	return &NullablePokemonAbility{value: val, isSet: true}
}

func (v NullablePokemonAbility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokemonAbility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


