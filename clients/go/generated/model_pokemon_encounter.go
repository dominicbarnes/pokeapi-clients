/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokemonEncounter Encounters Pokemon that can be encountered in the game and the version groups in which they can be encountered.
type PokemonEncounter struct {
	Pokemon *NamedAPIResource `json:"pokemon,omitempty"`
	VersionDetails []EncounterVersionDetails `json:"version_details,omitempty"`
}

// NewPokemonEncounter instantiates a new PokemonEncounter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokemonEncounter() *PokemonEncounter {
	this := PokemonEncounter{}
	return &this
}

// NewPokemonEncounterWithDefaults instantiates a new PokemonEncounter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokemonEncounterWithDefaults() *PokemonEncounter {
	this := PokemonEncounter{}
	return &this
}

// GetPokemon returns the Pokemon field value if set, zero value otherwise.
func (o *PokemonEncounter) GetPokemon() NamedAPIResource {
	if o == nil || isNil(o.Pokemon) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Pokemon
}

// GetPokemonOk returns a tuple with the Pokemon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonEncounter) GetPokemonOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Pokemon) {
    return nil, false
	}
	return o.Pokemon, true
}

// HasPokemon returns a boolean if a field has been set.
func (o *PokemonEncounter) HasPokemon() bool {
	if o != nil && !isNil(o.Pokemon) {
		return true
	}

	return false
}

// SetPokemon gets a reference to the given NamedAPIResource and assigns it to the Pokemon field.
func (o *PokemonEncounter) SetPokemon(v NamedAPIResource) {
	o.Pokemon = &v
}

// GetVersionDetails returns the VersionDetails field value if set, zero value otherwise.
func (o *PokemonEncounter) GetVersionDetails() []EncounterVersionDetails {
	if o == nil || isNil(o.VersionDetails) {
		var ret []EncounterVersionDetails
		return ret
	}
	return o.VersionDetails
}

// GetVersionDetailsOk returns a tuple with the VersionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonEncounter) GetVersionDetailsOk() ([]EncounterVersionDetails, bool) {
	if o == nil || isNil(o.VersionDetails) {
    return nil, false
	}
	return o.VersionDetails, true
}

// HasVersionDetails returns a boolean if a field has been set.
func (o *PokemonEncounter) HasVersionDetails() bool {
	if o != nil && !isNil(o.VersionDetails) {
		return true
	}

	return false
}

// SetVersionDetails gets a reference to the given []EncounterVersionDetails and assigns it to the VersionDetails field.
func (o *PokemonEncounter) SetVersionDetails(v []EncounterVersionDetails) {
	o.VersionDetails = v
}

func (o PokemonEncounter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Pokemon) {
		toSerialize["pokemon"] = o.Pokemon
	}
	if !isNil(o.VersionDetails) {
		toSerialize["version_details"] = o.VersionDetails
	}
	return json.Marshal(toSerialize)
}

type NullablePokemonEncounter struct {
	value *PokemonEncounter
	isSet bool
}

func (v NullablePokemonEncounter) Get() *PokemonEncounter {
	return v.value
}

func (v *NullablePokemonEncounter) Set(val *PokemonEncounter) {
	v.value = val
	v.isSet = true
}

func (v NullablePokemonEncounter) IsSet() bool {
	return v.isSet
}

func (v *NullablePokemonEncounter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokemonEncounter(val *PokemonEncounter) *NullablePokemonEncounter {
	return &NullablePokemonEncounter{value: val, isSet: true}
}

func (v NullablePokemonEncounter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokemonEncounter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


