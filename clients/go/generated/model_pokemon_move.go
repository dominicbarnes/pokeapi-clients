/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokemonMove struct for PokemonMove
type PokemonMove struct {
	Move *NamedAPIResource `json:"move,omitempty"`
	// A list of details showing how the Pok√©mon can learn the move 
	VersionGroupDetails []PokemonMoveVersionGroupDetailsInner `json:"version_group_details,omitempty"`
}

// NewPokemonMove instantiates a new PokemonMove object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokemonMove() *PokemonMove {
	this := PokemonMove{}
	return &this
}

// NewPokemonMoveWithDefaults instantiates a new PokemonMove object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokemonMoveWithDefaults() *PokemonMove {
	this := PokemonMove{}
	return &this
}

// GetMove returns the Move field value if set, zero value otherwise.
func (o *PokemonMove) GetMove() NamedAPIResource {
	if o == nil || isNil(o.Move) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Move
}

// GetMoveOk returns a tuple with the Move field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonMove) GetMoveOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Move) {
    return nil, false
	}
	return o.Move, true
}

// HasMove returns a boolean if a field has been set.
func (o *PokemonMove) HasMove() bool {
	if o != nil && !isNil(o.Move) {
		return true
	}

	return false
}

// SetMove gets a reference to the given NamedAPIResource and assigns it to the Move field.
func (o *PokemonMove) SetMove(v NamedAPIResource) {
	o.Move = &v
}

// GetVersionGroupDetails returns the VersionGroupDetails field value if set, zero value otherwise.
func (o *PokemonMove) GetVersionGroupDetails() []PokemonMoveVersionGroupDetailsInner {
	if o == nil || isNil(o.VersionGroupDetails) {
		var ret []PokemonMoveVersionGroupDetailsInner
		return ret
	}
	return o.VersionGroupDetails
}

// GetVersionGroupDetailsOk returns a tuple with the VersionGroupDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonMove) GetVersionGroupDetailsOk() ([]PokemonMoveVersionGroupDetailsInner, bool) {
	if o == nil || isNil(o.VersionGroupDetails) {
    return nil, false
	}
	return o.VersionGroupDetails, true
}

// HasVersionGroupDetails returns a boolean if a field has been set.
func (o *PokemonMove) HasVersionGroupDetails() bool {
	if o != nil && !isNil(o.VersionGroupDetails) {
		return true
	}

	return false
}

// SetVersionGroupDetails gets a reference to the given []PokemonMoveVersionGroupDetailsInner and assigns it to the VersionGroupDetails field.
func (o *PokemonMove) SetVersionGroupDetails(v []PokemonMoveVersionGroupDetailsInner) {
	o.VersionGroupDetails = v
}

func (o PokemonMove) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Move) {
		toSerialize["move"] = o.Move
	}
	if !isNil(o.VersionGroupDetails) {
		toSerialize["version_group_details"] = o.VersionGroupDetails
	}
	return json.Marshal(toSerialize)
}

type NullablePokemonMove struct {
	value *PokemonMove
	isSet bool
}

func (v NullablePokemonMove) Get() *PokemonMove {
	return v.value
}

func (v *NullablePokemonMove) Set(val *PokemonMove) {
	v.value = val
	v.isSet = true
}

func (v NullablePokemonMove) IsSet() bool {
	return v.isSet
}

func (v *NullablePokemonMove) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokemonMove(val *PokemonMove) *NullablePokemonMove {
	return &NullablePokemonMove{value: val, isSet: true}
}

func (v NullablePokemonMove) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokemonMove) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


