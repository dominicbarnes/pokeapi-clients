/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokemonSpecies struct for PokemonSpecies
type PokemonSpecies struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Order *int32 `json:"order,omitempty"`
	GenderRate *int32 `json:"gender_rate,omitempty"`
	CaptureRate *int32 `json:"capture_rate,omitempty"`
	BaseHappiness *int32 `json:"base_happiness,omitempty"`
	IsBaby *bool `json:"is_baby,omitempty"`
	HatchCounter *int32 `json:"hatch_counter,omitempty"`
	HasGenderDifferences *bool `json:"has_gender_differences,omitempty"`
	FormsSwitchable *bool `json:"forms_switchable,omitempty"`
	GrowthRate *GrowthRate `json:"growth_rate,omitempty"`
	PokedexNumbers []PokemonSpeciesDexEntry `json:"pokedex_numbers,omitempty"`
	EggGroups []EggGroup `json:"egg_groups,omitempty"`
	Color *PokemonColor `json:"color,omitempty"`
	Shape *PokemonShape `json:"shape,omitempty"`
	EvolvesFromSpecies *PokemonSpecies `json:"evolves_from_species,omitempty"`
	EvolutionChain *EvolutionChain `json:"evolution_chain,omitempty"`
	Habitat *PokemonHabitat `json:"habitat,omitempty"`
	Generation *Generation `json:"generation,omitempty"`
	Names []Name `json:"names,omitempty"`
	PalParkEncounters []PalParkEncounterArea `json:"pal_park_encounters,omitempty"`
	FlavorTextEntries []FlavorText `json:"flavor_text_entries,omitempty"`
	FormDescriptions []Description `json:"form_descriptions,omitempty"`
	Genera []Genus `json:"genera,omitempty"`
	Varieties []PokemonSpeciesVariety `json:"varieties,omitempty"`
}

// NewPokemonSpecies instantiates a new PokemonSpecies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokemonSpecies() *PokemonSpecies {
	this := PokemonSpecies{}
	return &this
}

// NewPokemonSpeciesWithDefaults instantiates a new PokemonSpecies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokemonSpeciesWithDefaults() *PokemonSpecies {
	this := PokemonSpecies{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PokemonSpecies) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PokemonSpecies) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PokemonSpecies) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PokemonSpecies) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PokemonSpecies) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PokemonSpecies) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *PokemonSpecies) GetOrder() int32 {
	if o == nil || isNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetOrderOk() (*int32, bool) {
	if o == nil || isNil(o.Order) {
    return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *PokemonSpecies) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *PokemonSpecies) SetOrder(v int32) {
	o.Order = &v
}

// GetGenderRate returns the GenderRate field value if set, zero value otherwise.
func (o *PokemonSpecies) GetGenderRate() int32 {
	if o == nil || isNil(o.GenderRate) {
		var ret int32
		return ret
	}
	return *o.GenderRate
}

// GetGenderRateOk returns a tuple with the GenderRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetGenderRateOk() (*int32, bool) {
	if o == nil || isNil(o.GenderRate) {
    return nil, false
	}
	return o.GenderRate, true
}

// HasGenderRate returns a boolean if a field has been set.
func (o *PokemonSpecies) HasGenderRate() bool {
	if o != nil && !isNil(o.GenderRate) {
		return true
	}

	return false
}

// SetGenderRate gets a reference to the given int32 and assigns it to the GenderRate field.
func (o *PokemonSpecies) SetGenderRate(v int32) {
	o.GenderRate = &v
}

// GetCaptureRate returns the CaptureRate field value if set, zero value otherwise.
func (o *PokemonSpecies) GetCaptureRate() int32 {
	if o == nil || isNil(o.CaptureRate) {
		var ret int32
		return ret
	}
	return *o.CaptureRate
}

// GetCaptureRateOk returns a tuple with the CaptureRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetCaptureRateOk() (*int32, bool) {
	if o == nil || isNil(o.CaptureRate) {
    return nil, false
	}
	return o.CaptureRate, true
}

// HasCaptureRate returns a boolean if a field has been set.
func (o *PokemonSpecies) HasCaptureRate() bool {
	if o != nil && !isNil(o.CaptureRate) {
		return true
	}

	return false
}

// SetCaptureRate gets a reference to the given int32 and assigns it to the CaptureRate field.
func (o *PokemonSpecies) SetCaptureRate(v int32) {
	o.CaptureRate = &v
}

// GetBaseHappiness returns the BaseHappiness field value if set, zero value otherwise.
func (o *PokemonSpecies) GetBaseHappiness() int32 {
	if o == nil || isNil(o.BaseHappiness) {
		var ret int32
		return ret
	}
	return *o.BaseHappiness
}

// GetBaseHappinessOk returns a tuple with the BaseHappiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetBaseHappinessOk() (*int32, bool) {
	if o == nil || isNil(o.BaseHappiness) {
    return nil, false
	}
	return o.BaseHappiness, true
}

// HasBaseHappiness returns a boolean if a field has been set.
func (o *PokemonSpecies) HasBaseHappiness() bool {
	if o != nil && !isNil(o.BaseHappiness) {
		return true
	}

	return false
}

// SetBaseHappiness gets a reference to the given int32 and assigns it to the BaseHappiness field.
func (o *PokemonSpecies) SetBaseHappiness(v int32) {
	o.BaseHappiness = &v
}

// GetIsBaby returns the IsBaby field value if set, zero value otherwise.
func (o *PokemonSpecies) GetIsBaby() bool {
	if o == nil || isNil(o.IsBaby) {
		var ret bool
		return ret
	}
	return *o.IsBaby
}

// GetIsBabyOk returns a tuple with the IsBaby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetIsBabyOk() (*bool, bool) {
	if o == nil || isNil(o.IsBaby) {
    return nil, false
	}
	return o.IsBaby, true
}

// HasIsBaby returns a boolean if a field has been set.
func (o *PokemonSpecies) HasIsBaby() bool {
	if o != nil && !isNil(o.IsBaby) {
		return true
	}

	return false
}

// SetIsBaby gets a reference to the given bool and assigns it to the IsBaby field.
func (o *PokemonSpecies) SetIsBaby(v bool) {
	o.IsBaby = &v
}

// GetHatchCounter returns the HatchCounter field value if set, zero value otherwise.
func (o *PokemonSpecies) GetHatchCounter() int32 {
	if o == nil || isNil(o.HatchCounter) {
		var ret int32
		return ret
	}
	return *o.HatchCounter
}

// GetHatchCounterOk returns a tuple with the HatchCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetHatchCounterOk() (*int32, bool) {
	if o == nil || isNil(o.HatchCounter) {
    return nil, false
	}
	return o.HatchCounter, true
}

// HasHatchCounter returns a boolean if a field has been set.
func (o *PokemonSpecies) HasHatchCounter() bool {
	if o != nil && !isNil(o.HatchCounter) {
		return true
	}

	return false
}

// SetHatchCounter gets a reference to the given int32 and assigns it to the HatchCounter field.
func (o *PokemonSpecies) SetHatchCounter(v int32) {
	o.HatchCounter = &v
}

// GetHasGenderDifferences returns the HasGenderDifferences field value if set, zero value otherwise.
func (o *PokemonSpecies) GetHasGenderDifferences() bool {
	if o == nil || isNil(o.HasGenderDifferences) {
		var ret bool
		return ret
	}
	return *o.HasGenderDifferences
}

// GetHasGenderDifferencesOk returns a tuple with the HasGenderDifferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetHasGenderDifferencesOk() (*bool, bool) {
	if o == nil || isNil(o.HasGenderDifferences) {
    return nil, false
	}
	return o.HasGenderDifferences, true
}

// HasHasGenderDifferences returns a boolean if a field has been set.
func (o *PokemonSpecies) HasHasGenderDifferences() bool {
	if o != nil && !isNil(o.HasGenderDifferences) {
		return true
	}

	return false
}

// SetHasGenderDifferences gets a reference to the given bool and assigns it to the HasGenderDifferences field.
func (o *PokemonSpecies) SetHasGenderDifferences(v bool) {
	o.HasGenderDifferences = &v
}

// GetFormsSwitchable returns the FormsSwitchable field value if set, zero value otherwise.
func (o *PokemonSpecies) GetFormsSwitchable() bool {
	if o == nil || isNil(o.FormsSwitchable) {
		var ret bool
		return ret
	}
	return *o.FormsSwitchable
}

// GetFormsSwitchableOk returns a tuple with the FormsSwitchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetFormsSwitchableOk() (*bool, bool) {
	if o == nil || isNil(o.FormsSwitchable) {
    return nil, false
	}
	return o.FormsSwitchable, true
}

// HasFormsSwitchable returns a boolean if a field has been set.
func (o *PokemonSpecies) HasFormsSwitchable() bool {
	if o != nil && !isNil(o.FormsSwitchable) {
		return true
	}

	return false
}

// SetFormsSwitchable gets a reference to the given bool and assigns it to the FormsSwitchable field.
func (o *PokemonSpecies) SetFormsSwitchable(v bool) {
	o.FormsSwitchable = &v
}

// GetGrowthRate returns the GrowthRate field value if set, zero value otherwise.
func (o *PokemonSpecies) GetGrowthRate() GrowthRate {
	if o == nil || isNil(o.GrowthRate) {
		var ret GrowthRate
		return ret
	}
	return *o.GrowthRate
}

// GetGrowthRateOk returns a tuple with the GrowthRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetGrowthRateOk() (*GrowthRate, bool) {
	if o == nil || isNil(o.GrowthRate) {
    return nil, false
	}
	return o.GrowthRate, true
}

// HasGrowthRate returns a boolean if a field has been set.
func (o *PokemonSpecies) HasGrowthRate() bool {
	if o != nil && !isNil(o.GrowthRate) {
		return true
	}

	return false
}

// SetGrowthRate gets a reference to the given GrowthRate and assigns it to the GrowthRate field.
func (o *PokemonSpecies) SetGrowthRate(v GrowthRate) {
	o.GrowthRate = &v
}

// GetPokedexNumbers returns the PokedexNumbers field value if set, zero value otherwise.
func (o *PokemonSpecies) GetPokedexNumbers() []PokemonSpeciesDexEntry {
	if o == nil || isNil(o.PokedexNumbers) {
		var ret []PokemonSpeciesDexEntry
		return ret
	}
	return o.PokedexNumbers
}

// GetPokedexNumbersOk returns a tuple with the PokedexNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetPokedexNumbersOk() ([]PokemonSpeciesDexEntry, bool) {
	if o == nil || isNil(o.PokedexNumbers) {
    return nil, false
	}
	return o.PokedexNumbers, true
}

// HasPokedexNumbers returns a boolean if a field has been set.
func (o *PokemonSpecies) HasPokedexNumbers() bool {
	if o != nil && !isNil(o.PokedexNumbers) {
		return true
	}

	return false
}

// SetPokedexNumbers gets a reference to the given []PokemonSpeciesDexEntry and assigns it to the PokedexNumbers field.
func (o *PokemonSpecies) SetPokedexNumbers(v []PokemonSpeciesDexEntry) {
	o.PokedexNumbers = v
}

// GetEggGroups returns the EggGroups field value if set, zero value otherwise.
func (o *PokemonSpecies) GetEggGroups() []EggGroup {
	if o == nil || isNil(o.EggGroups) {
		var ret []EggGroup
		return ret
	}
	return o.EggGroups
}

// GetEggGroupsOk returns a tuple with the EggGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetEggGroupsOk() ([]EggGroup, bool) {
	if o == nil || isNil(o.EggGroups) {
    return nil, false
	}
	return o.EggGroups, true
}

// HasEggGroups returns a boolean if a field has been set.
func (o *PokemonSpecies) HasEggGroups() bool {
	if o != nil && !isNil(o.EggGroups) {
		return true
	}

	return false
}

// SetEggGroups gets a reference to the given []EggGroup and assigns it to the EggGroups field.
func (o *PokemonSpecies) SetEggGroups(v []EggGroup) {
	o.EggGroups = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *PokemonSpecies) GetColor() PokemonColor {
	if o == nil || isNil(o.Color) {
		var ret PokemonColor
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetColorOk() (*PokemonColor, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *PokemonSpecies) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given PokemonColor and assigns it to the Color field.
func (o *PokemonSpecies) SetColor(v PokemonColor) {
	o.Color = &v
}

// GetShape returns the Shape field value if set, zero value otherwise.
func (o *PokemonSpecies) GetShape() PokemonShape {
	if o == nil || isNil(o.Shape) {
		var ret PokemonShape
		return ret
	}
	return *o.Shape
}

// GetShapeOk returns a tuple with the Shape field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetShapeOk() (*PokemonShape, bool) {
	if o == nil || isNil(o.Shape) {
    return nil, false
	}
	return o.Shape, true
}

// HasShape returns a boolean if a field has been set.
func (o *PokemonSpecies) HasShape() bool {
	if o != nil && !isNil(o.Shape) {
		return true
	}

	return false
}

// SetShape gets a reference to the given PokemonShape and assigns it to the Shape field.
func (o *PokemonSpecies) SetShape(v PokemonShape) {
	o.Shape = &v
}

// GetEvolvesFromSpecies returns the EvolvesFromSpecies field value if set, zero value otherwise.
func (o *PokemonSpecies) GetEvolvesFromSpecies() PokemonSpecies {
	if o == nil || isNil(o.EvolvesFromSpecies) {
		var ret PokemonSpecies
		return ret
	}
	return *o.EvolvesFromSpecies
}

// GetEvolvesFromSpeciesOk returns a tuple with the EvolvesFromSpecies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetEvolvesFromSpeciesOk() (*PokemonSpecies, bool) {
	if o == nil || isNil(o.EvolvesFromSpecies) {
    return nil, false
	}
	return o.EvolvesFromSpecies, true
}

// HasEvolvesFromSpecies returns a boolean if a field has been set.
func (o *PokemonSpecies) HasEvolvesFromSpecies() bool {
	if o != nil && !isNil(o.EvolvesFromSpecies) {
		return true
	}

	return false
}

// SetEvolvesFromSpecies gets a reference to the given PokemonSpecies and assigns it to the EvolvesFromSpecies field.
func (o *PokemonSpecies) SetEvolvesFromSpecies(v PokemonSpecies) {
	o.EvolvesFromSpecies = &v
}

// GetEvolutionChain returns the EvolutionChain field value if set, zero value otherwise.
func (o *PokemonSpecies) GetEvolutionChain() EvolutionChain {
	if o == nil || isNil(o.EvolutionChain) {
		var ret EvolutionChain
		return ret
	}
	return *o.EvolutionChain
}

// GetEvolutionChainOk returns a tuple with the EvolutionChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetEvolutionChainOk() (*EvolutionChain, bool) {
	if o == nil || isNil(o.EvolutionChain) {
    return nil, false
	}
	return o.EvolutionChain, true
}

// HasEvolutionChain returns a boolean if a field has been set.
func (o *PokemonSpecies) HasEvolutionChain() bool {
	if o != nil && !isNil(o.EvolutionChain) {
		return true
	}

	return false
}

// SetEvolutionChain gets a reference to the given EvolutionChain and assigns it to the EvolutionChain field.
func (o *PokemonSpecies) SetEvolutionChain(v EvolutionChain) {
	o.EvolutionChain = &v
}

// GetHabitat returns the Habitat field value if set, zero value otherwise.
func (o *PokemonSpecies) GetHabitat() PokemonHabitat {
	if o == nil || isNil(o.Habitat) {
		var ret PokemonHabitat
		return ret
	}
	return *o.Habitat
}

// GetHabitatOk returns a tuple with the Habitat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetHabitatOk() (*PokemonHabitat, bool) {
	if o == nil || isNil(o.Habitat) {
    return nil, false
	}
	return o.Habitat, true
}

// HasHabitat returns a boolean if a field has been set.
func (o *PokemonSpecies) HasHabitat() bool {
	if o != nil && !isNil(o.Habitat) {
		return true
	}

	return false
}

// SetHabitat gets a reference to the given PokemonHabitat and assigns it to the Habitat field.
func (o *PokemonSpecies) SetHabitat(v PokemonHabitat) {
	o.Habitat = &v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *PokemonSpecies) GetGeneration() Generation {
	if o == nil || isNil(o.Generation) {
		var ret Generation
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetGenerationOk() (*Generation, bool) {
	if o == nil || isNil(o.Generation) {
    return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *PokemonSpecies) HasGeneration() bool {
	if o != nil && !isNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given Generation and assigns it to the Generation field.
func (o *PokemonSpecies) SetGeneration(v Generation) {
	o.Generation = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *PokemonSpecies) GetNames() []Name {
	if o == nil || isNil(o.Names) {
		var ret []Name
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetNamesOk() ([]Name, bool) {
	if o == nil || isNil(o.Names) {
    return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *PokemonSpecies) HasNames() bool {
	if o != nil && !isNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []Name and assigns it to the Names field.
func (o *PokemonSpecies) SetNames(v []Name) {
	o.Names = v
}

// GetPalParkEncounters returns the PalParkEncounters field value if set, zero value otherwise.
func (o *PokemonSpecies) GetPalParkEncounters() []PalParkEncounterArea {
	if o == nil || isNil(o.PalParkEncounters) {
		var ret []PalParkEncounterArea
		return ret
	}
	return o.PalParkEncounters
}

// GetPalParkEncountersOk returns a tuple with the PalParkEncounters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetPalParkEncountersOk() ([]PalParkEncounterArea, bool) {
	if o == nil || isNil(o.PalParkEncounters) {
    return nil, false
	}
	return o.PalParkEncounters, true
}

// HasPalParkEncounters returns a boolean if a field has been set.
func (o *PokemonSpecies) HasPalParkEncounters() bool {
	if o != nil && !isNil(o.PalParkEncounters) {
		return true
	}

	return false
}

// SetPalParkEncounters gets a reference to the given []PalParkEncounterArea and assigns it to the PalParkEncounters field.
func (o *PokemonSpecies) SetPalParkEncounters(v []PalParkEncounterArea) {
	o.PalParkEncounters = v
}

// GetFlavorTextEntries returns the FlavorTextEntries field value if set, zero value otherwise.
func (o *PokemonSpecies) GetFlavorTextEntries() []FlavorText {
	if o == nil || isNil(o.FlavorTextEntries) {
		var ret []FlavorText
		return ret
	}
	return o.FlavorTextEntries
}

// GetFlavorTextEntriesOk returns a tuple with the FlavorTextEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetFlavorTextEntriesOk() ([]FlavorText, bool) {
	if o == nil || isNil(o.FlavorTextEntries) {
    return nil, false
	}
	return o.FlavorTextEntries, true
}

// HasFlavorTextEntries returns a boolean if a field has been set.
func (o *PokemonSpecies) HasFlavorTextEntries() bool {
	if o != nil && !isNil(o.FlavorTextEntries) {
		return true
	}

	return false
}

// SetFlavorTextEntries gets a reference to the given []FlavorText and assigns it to the FlavorTextEntries field.
func (o *PokemonSpecies) SetFlavorTextEntries(v []FlavorText) {
	o.FlavorTextEntries = v
}

// GetFormDescriptions returns the FormDescriptions field value if set, zero value otherwise.
func (o *PokemonSpecies) GetFormDescriptions() []Description {
	if o == nil || isNil(o.FormDescriptions) {
		var ret []Description
		return ret
	}
	return o.FormDescriptions
}

// GetFormDescriptionsOk returns a tuple with the FormDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetFormDescriptionsOk() ([]Description, bool) {
	if o == nil || isNil(o.FormDescriptions) {
    return nil, false
	}
	return o.FormDescriptions, true
}

// HasFormDescriptions returns a boolean if a field has been set.
func (o *PokemonSpecies) HasFormDescriptions() bool {
	if o != nil && !isNil(o.FormDescriptions) {
		return true
	}

	return false
}

// SetFormDescriptions gets a reference to the given []Description and assigns it to the FormDescriptions field.
func (o *PokemonSpecies) SetFormDescriptions(v []Description) {
	o.FormDescriptions = v
}

// GetGenera returns the Genera field value if set, zero value otherwise.
func (o *PokemonSpecies) GetGenera() []Genus {
	if o == nil || isNil(o.Genera) {
		var ret []Genus
		return ret
	}
	return o.Genera
}

// GetGeneraOk returns a tuple with the Genera field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetGeneraOk() ([]Genus, bool) {
	if o == nil || isNil(o.Genera) {
    return nil, false
	}
	return o.Genera, true
}

// HasGenera returns a boolean if a field has been set.
func (o *PokemonSpecies) HasGenera() bool {
	if o != nil && !isNil(o.Genera) {
		return true
	}

	return false
}

// SetGenera gets a reference to the given []Genus and assigns it to the Genera field.
func (o *PokemonSpecies) SetGenera(v []Genus) {
	o.Genera = v
}

// GetVarieties returns the Varieties field value if set, zero value otherwise.
func (o *PokemonSpecies) GetVarieties() []PokemonSpeciesVariety {
	if o == nil || isNil(o.Varieties) {
		var ret []PokemonSpeciesVariety
		return ret
	}
	return o.Varieties
}

// GetVarietiesOk returns a tuple with the Varieties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpecies) GetVarietiesOk() ([]PokemonSpeciesVariety, bool) {
	if o == nil || isNil(o.Varieties) {
    return nil, false
	}
	return o.Varieties, true
}

// HasVarieties returns a boolean if a field has been set.
func (o *PokemonSpecies) HasVarieties() bool {
	if o != nil && !isNil(o.Varieties) {
		return true
	}

	return false
}

// SetVarieties gets a reference to the given []PokemonSpeciesVariety and assigns it to the Varieties field.
func (o *PokemonSpecies) SetVarieties(v []PokemonSpeciesVariety) {
	o.Varieties = v
}

func (o PokemonSpecies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !isNil(o.GenderRate) {
		toSerialize["gender_rate"] = o.GenderRate
	}
	if !isNil(o.CaptureRate) {
		toSerialize["capture_rate"] = o.CaptureRate
	}
	if !isNil(o.BaseHappiness) {
		toSerialize["base_happiness"] = o.BaseHappiness
	}
	if !isNil(o.IsBaby) {
		toSerialize["is_baby"] = o.IsBaby
	}
	if !isNil(o.HatchCounter) {
		toSerialize["hatch_counter"] = o.HatchCounter
	}
	if !isNil(o.HasGenderDifferences) {
		toSerialize["has_gender_differences"] = o.HasGenderDifferences
	}
	if !isNil(o.FormsSwitchable) {
		toSerialize["forms_switchable"] = o.FormsSwitchable
	}
	if !isNil(o.GrowthRate) {
		toSerialize["growth_rate"] = o.GrowthRate
	}
	if !isNil(o.PokedexNumbers) {
		toSerialize["pokedex_numbers"] = o.PokedexNumbers
	}
	if !isNil(o.EggGroups) {
		toSerialize["egg_groups"] = o.EggGroups
	}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !isNil(o.Shape) {
		toSerialize["shape"] = o.Shape
	}
	if !isNil(o.EvolvesFromSpecies) {
		toSerialize["evolves_from_species"] = o.EvolvesFromSpecies
	}
	if !isNil(o.EvolutionChain) {
		toSerialize["evolution_chain"] = o.EvolutionChain
	}
	if !isNil(o.Habitat) {
		toSerialize["habitat"] = o.Habitat
	}
	if !isNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !isNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !isNil(o.PalParkEncounters) {
		toSerialize["pal_park_encounters"] = o.PalParkEncounters
	}
	if !isNil(o.FlavorTextEntries) {
		toSerialize["flavor_text_entries"] = o.FlavorTextEntries
	}
	if !isNil(o.FormDescriptions) {
		toSerialize["form_descriptions"] = o.FormDescriptions
	}
	if !isNil(o.Genera) {
		toSerialize["genera"] = o.Genera
	}
	if !isNil(o.Varieties) {
		toSerialize["varieties"] = o.Varieties
	}
	return json.Marshal(toSerialize)
}

type NullablePokemonSpecies struct {
	value *PokemonSpecies
	isSet bool
}

func (v NullablePokemonSpecies) Get() *PokemonSpecies {
	return v.value
}

func (v *NullablePokemonSpecies) Set(val *PokemonSpecies) {
	v.value = val
	v.isSet = true
}

func (v NullablePokemonSpecies) IsSet() bool {
	return v.isSet
}

func (v *NullablePokemonSpecies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokemonSpecies(val *PokemonSpecies) *NullablePokemonSpecies {
	return &NullablePokemonSpecies{value: val, isSet: true}
}

func (v NullablePokemonSpecies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokemonSpecies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


