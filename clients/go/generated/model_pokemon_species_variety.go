/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokemonSpeciesVariety struct for PokemonSpeciesVariety
type PokemonSpeciesVariety struct {
	// Whether this is the default \"natural\" variety of this species. Note that \"default\" is subjective and that it may not match the Pokémon games' official status. 
	IsDefault *bool `json:"is_default,omitempty"`
	Pokemon *Pokemon `json:"pokemon,omitempty"`
	// The name of this Pokémon species variety
	Name *string `json:"name,omitempty"`
}

// NewPokemonSpeciesVariety instantiates a new PokemonSpeciesVariety object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokemonSpeciesVariety() *PokemonSpeciesVariety {
	this := PokemonSpeciesVariety{}
	return &this
}

// NewPokemonSpeciesVarietyWithDefaults instantiates a new PokemonSpeciesVariety object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokemonSpeciesVarietyWithDefaults() *PokemonSpeciesVariety {
	this := PokemonSpeciesVariety{}
	return &this
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *PokemonSpeciesVariety) GetIsDefault() bool {
	if o == nil || isNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpeciesVariety) GetIsDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.IsDefault) {
    return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *PokemonSpeciesVariety) HasIsDefault() bool {
	if o != nil && !isNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *PokemonSpeciesVariety) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetPokemon returns the Pokemon field value if set, zero value otherwise.
func (o *PokemonSpeciesVariety) GetPokemon() Pokemon {
	if o == nil || isNil(o.Pokemon) {
		var ret Pokemon
		return ret
	}
	return *o.Pokemon
}

// GetPokemonOk returns a tuple with the Pokemon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpeciesVariety) GetPokemonOk() (*Pokemon, bool) {
	if o == nil || isNil(o.Pokemon) {
    return nil, false
	}
	return o.Pokemon, true
}

// HasPokemon returns a boolean if a field has been set.
func (o *PokemonSpeciesVariety) HasPokemon() bool {
	if o != nil && !isNil(o.Pokemon) {
		return true
	}

	return false
}

// SetPokemon gets a reference to the given Pokemon and assigns it to the Pokemon field.
func (o *PokemonSpeciesVariety) SetPokemon(v Pokemon) {
	o.Pokemon = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PokemonSpeciesVariety) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonSpeciesVariety) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PokemonSpeciesVariety) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PokemonSpeciesVariety) SetName(v string) {
	o.Name = &v
}

func (o PokemonSpeciesVariety) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !isNil(o.Pokemon) {
		toSerialize["pokemon"] = o.Pokemon
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullablePokemonSpeciesVariety struct {
	value *PokemonSpeciesVariety
	isSet bool
}

func (v NullablePokemonSpeciesVariety) Get() *PokemonSpeciesVariety {
	return v.value
}

func (v *NullablePokemonSpeciesVariety) Set(val *PokemonSpeciesVariety) {
	v.value = val
	v.isSet = true
}

func (v NullablePokemonSpeciesVariety) IsSet() bool {
	return v.isSet
}

func (v *NullablePokemonSpeciesVariety) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokemonSpeciesVariety(val *PokemonSpeciesVariety) *NullablePokemonSpeciesVariety {
	return &NullablePokemonSpeciesVariety{value: val, isSet: true}
}

func (v NullablePokemonSpeciesVariety) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokemonSpeciesVariety) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


