/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokemonStat struct for PokemonStat
type PokemonStat struct {
	Stat *NamedAPIResource `json:"stat,omitempty"`
	// The effort points (EV) the Pok√©mon has in the stat.
	Effort *int32 `json:"effort,omitempty"`
	// The base value of the stat.
	BaseStat *int32 `json:"base_stat,omitempty"`
}

// NewPokemonStat instantiates a new PokemonStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokemonStat() *PokemonStat {
	this := PokemonStat{}
	return &this
}

// NewPokemonStatWithDefaults instantiates a new PokemonStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokemonStatWithDefaults() *PokemonStat {
	this := PokemonStat{}
	return &this
}

// GetStat returns the Stat field value if set, zero value otherwise.
func (o *PokemonStat) GetStat() NamedAPIResource {
	if o == nil || isNil(o.Stat) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Stat
}

// GetStatOk returns a tuple with the Stat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonStat) GetStatOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Stat) {
    return nil, false
	}
	return o.Stat, true
}

// HasStat returns a boolean if a field has been set.
func (o *PokemonStat) HasStat() bool {
	if o != nil && !isNil(o.Stat) {
		return true
	}

	return false
}

// SetStat gets a reference to the given NamedAPIResource and assigns it to the Stat field.
func (o *PokemonStat) SetStat(v NamedAPIResource) {
	o.Stat = &v
}

// GetEffort returns the Effort field value if set, zero value otherwise.
func (o *PokemonStat) GetEffort() int32 {
	if o == nil || isNil(o.Effort) {
		var ret int32
		return ret
	}
	return *o.Effort
}

// GetEffortOk returns a tuple with the Effort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonStat) GetEffortOk() (*int32, bool) {
	if o == nil || isNil(o.Effort) {
    return nil, false
	}
	return o.Effort, true
}

// HasEffort returns a boolean if a field has been set.
func (o *PokemonStat) HasEffort() bool {
	if o != nil && !isNil(o.Effort) {
		return true
	}

	return false
}

// SetEffort gets a reference to the given int32 and assigns it to the Effort field.
func (o *PokemonStat) SetEffort(v int32) {
	o.Effort = &v
}

// GetBaseStat returns the BaseStat field value if set, zero value otherwise.
func (o *PokemonStat) GetBaseStat() int32 {
	if o == nil || isNil(o.BaseStat) {
		var ret int32
		return ret
	}
	return *o.BaseStat
}

// GetBaseStatOk returns a tuple with the BaseStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonStat) GetBaseStatOk() (*int32, bool) {
	if o == nil || isNil(o.BaseStat) {
    return nil, false
	}
	return o.BaseStat, true
}

// HasBaseStat returns a boolean if a field has been set.
func (o *PokemonStat) HasBaseStat() bool {
	if o != nil && !isNil(o.BaseStat) {
		return true
	}

	return false
}

// SetBaseStat gets a reference to the given int32 and assigns it to the BaseStat field.
func (o *PokemonStat) SetBaseStat(v int32) {
	o.BaseStat = &v
}

func (o PokemonStat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Stat) {
		toSerialize["stat"] = o.Stat
	}
	if !isNil(o.Effort) {
		toSerialize["effort"] = o.Effort
	}
	if !isNil(o.BaseStat) {
		toSerialize["base_stat"] = o.BaseStat
	}
	return json.Marshal(toSerialize)
}

type NullablePokemonStat struct {
	value *PokemonStat
	isSet bool
}

func (v NullablePokemonStat) Get() *PokemonStat {
	return v.value
}

func (v *NullablePokemonStat) Set(val *PokemonStat) {
	v.value = val
	v.isSet = true
}

func (v NullablePokemonStat) IsSet() bool {
	return v.isSet
}

func (v *NullablePokemonStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokemonStat(val *PokemonStat) *NullablePokemonStat {
	return &NullablePokemonStat{value: val, isSet: true}
}

func (v NullablePokemonStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokemonStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


