/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PokemonType struct for PokemonType
type PokemonType struct {
	// The order the Pok√©mon's types are listed in.
	Slot *int32 `json:"slot,omitempty"`
	Type *NamedAPIResource `json:"type,omitempty"`
}

// NewPokemonType instantiates a new PokemonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPokemonType() *PokemonType {
	this := PokemonType{}
	return &this
}

// NewPokemonTypeWithDefaults instantiates a new PokemonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPokemonTypeWithDefaults() *PokemonType {
	this := PokemonType{}
	return &this
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *PokemonType) GetSlot() int32 {
	if o == nil || isNil(o.Slot) {
		var ret int32
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonType) GetSlotOk() (*int32, bool) {
	if o == nil || isNil(o.Slot) {
    return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *PokemonType) HasSlot() bool {
	if o != nil && !isNil(o.Slot) {
		return true
	}

	return false
}

// SetSlot gets a reference to the given int32 and assigns it to the Slot field.
func (o *PokemonType) SetSlot(v int32) {
	o.Slot = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PokemonType) GetType() NamedAPIResource {
	if o == nil || isNil(o.Type) {
		var ret NamedAPIResource
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PokemonType) GetTypeOk() (*NamedAPIResource, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PokemonType) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NamedAPIResource and assigns it to the Type field.
func (o *PokemonType) SetType(v NamedAPIResource) {
	o.Type = &v
}

func (o PokemonType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Slot) {
		toSerialize["slot"] = o.Slot
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePokemonType struct {
	value *PokemonType
	isSet bool
}

func (v NullablePokemonType) Get() *PokemonType {
	return v.value
}

func (v *NullablePokemonType) Set(val *PokemonType) {
	v.value = val
	v.isSet = true
}

func (v NullablePokemonType) IsSet() bool {
	return v.isSet
}

func (v *NullablePokemonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePokemonType(val *PokemonType) *NullablePokemonType {
	return &NullablePokemonType{value: val, isSet: true}
}

func (v NullablePokemonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePokemonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


