/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Region struct for Region
type Region struct {
	Id int32 `json:"id"`
	Locations []NamedAPIResource `json:"locations"`
	Name string `json:"name"`
	Names []Name `json:"names"`
	MainGeneration NamedAPIResource `json:"main_generation"`
	Pokedexes []NamedAPIResource `json:"pokedexes"`
	VersionGroups []NamedAPIResource `json:"version_groups"`
}

// NewRegion instantiates a new Region object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion(id int32, locations []NamedAPIResource, name string, names []Name, mainGeneration NamedAPIResource, pokedexes []NamedAPIResource, versionGroups []NamedAPIResource) *Region {
	this := Region{}
	this.Id = id
	this.Locations = locations
	this.Name = name
	this.Names = names
	this.MainGeneration = mainGeneration
	this.Pokedexes = pokedexes
	this.VersionGroups = versionGroups
	return &this
}

// NewRegionWithDefaults instantiates a new Region object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	this := Region{}
	return &this
}

// GetId returns the Id field value
func (o *Region) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Region) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Region) SetId(v int32) {
	o.Id = v
}

// GetLocations returns the Locations field value
func (o *Region) GetLocations() []NamedAPIResource {
	if o == nil {
		var ret []NamedAPIResource
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *Region) GetLocationsOk() ([]NamedAPIResource, bool) {
	if o == nil {
    return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *Region) SetLocations(v []NamedAPIResource) {
	o.Locations = v
}

// GetName returns the Name field value
func (o *Region) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Region) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Region) SetName(v string) {
	o.Name = v
}

// GetNames returns the Names field value
func (o *Region) GetNames() []Name {
	if o == nil {
		var ret []Name
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *Region) GetNamesOk() ([]Name, bool) {
	if o == nil {
    return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *Region) SetNames(v []Name) {
	o.Names = v
}

// GetMainGeneration returns the MainGeneration field value
func (o *Region) GetMainGeneration() NamedAPIResource {
	if o == nil {
		var ret NamedAPIResource
		return ret
	}

	return o.MainGeneration
}

// GetMainGenerationOk returns a tuple with the MainGeneration field value
// and a boolean to check if the value has been set.
func (o *Region) GetMainGenerationOk() (*NamedAPIResource, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MainGeneration, true
}

// SetMainGeneration sets field value
func (o *Region) SetMainGeneration(v NamedAPIResource) {
	o.MainGeneration = v
}

// GetPokedexes returns the Pokedexes field value
func (o *Region) GetPokedexes() []NamedAPIResource {
	if o == nil {
		var ret []NamedAPIResource
		return ret
	}

	return o.Pokedexes
}

// GetPokedexesOk returns a tuple with the Pokedexes field value
// and a boolean to check if the value has been set.
func (o *Region) GetPokedexesOk() ([]NamedAPIResource, bool) {
	if o == nil {
    return nil, false
	}
	return o.Pokedexes, true
}

// SetPokedexes sets field value
func (o *Region) SetPokedexes(v []NamedAPIResource) {
	o.Pokedexes = v
}

// GetVersionGroups returns the VersionGroups field value
func (o *Region) GetVersionGroups() []NamedAPIResource {
	if o == nil {
		var ret []NamedAPIResource
		return ret
	}

	return o.VersionGroups
}

// GetVersionGroupsOk returns a tuple with the VersionGroups field value
// and a boolean to check if the value has been set.
func (o *Region) GetVersionGroupsOk() ([]NamedAPIResource, bool) {
	if o == nil {
    return nil, false
	}
	return o.VersionGroups, true
}

// SetVersionGroups sets field value
func (o *Region) SetVersionGroups(v []NamedAPIResource) {
	o.VersionGroups = v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["locations"] = o.Locations
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["names"] = o.Names
	}
	if true {
		toSerialize["main_generation"] = o.MainGeneration
	}
	if true {
		toSerialize["pokedexes"] = o.Pokedexes
	}
	if true {
		toSerialize["version_groups"] = o.VersionGroups
	}
	return json.Marshal(toSerialize)
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


