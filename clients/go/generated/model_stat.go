/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Stat struct for Stat
type Stat struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	GameIndex int32 `json:"game_index"`
	IsBattleOnly *bool `json:"is_battle_only,omitempty"`
	AffectingMoves *MoveStatAffectSets `json:"affecting_moves,omitempty"`
	AffectingNatures *NatureStatAffectSets `json:"affecting_natures,omitempty"`
}

// NewStat instantiates a new Stat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStat(id int32, name string, gameIndex int32) *Stat {
	this := Stat{}
	this.Id = id
	this.Name = name
	this.GameIndex = gameIndex
	return &this
}

// NewStatWithDefaults instantiates a new Stat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatWithDefaults() *Stat {
	this := Stat{}
	return &this
}

// GetId returns the Id field value
func (o *Stat) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Stat) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Stat) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Stat) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Stat) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Stat) SetName(v string) {
	o.Name = v
}

// GetGameIndex returns the GameIndex field value
func (o *Stat) GetGameIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GameIndex
}

// GetGameIndexOk returns a tuple with the GameIndex field value
// and a boolean to check if the value has been set.
func (o *Stat) GetGameIndexOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GameIndex, true
}

// SetGameIndex sets field value
func (o *Stat) SetGameIndex(v int32) {
	o.GameIndex = v
}

// GetIsBattleOnly returns the IsBattleOnly field value if set, zero value otherwise.
func (o *Stat) GetIsBattleOnly() bool {
	if o == nil || isNil(o.IsBattleOnly) {
		var ret bool
		return ret
	}
	return *o.IsBattleOnly
}

// GetIsBattleOnlyOk returns a tuple with the IsBattleOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetIsBattleOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.IsBattleOnly) {
    return nil, false
	}
	return o.IsBattleOnly, true
}

// HasIsBattleOnly returns a boolean if a field has been set.
func (o *Stat) HasIsBattleOnly() bool {
	if o != nil && !isNil(o.IsBattleOnly) {
		return true
	}

	return false
}

// SetIsBattleOnly gets a reference to the given bool and assigns it to the IsBattleOnly field.
func (o *Stat) SetIsBattleOnly(v bool) {
	o.IsBattleOnly = &v
}

// GetAffectingMoves returns the AffectingMoves field value if set, zero value otherwise.
func (o *Stat) GetAffectingMoves() MoveStatAffectSets {
	if o == nil || isNil(o.AffectingMoves) {
		var ret MoveStatAffectSets
		return ret
	}
	return *o.AffectingMoves
}

// GetAffectingMovesOk returns a tuple with the AffectingMoves field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetAffectingMovesOk() (*MoveStatAffectSets, bool) {
	if o == nil || isNil(o.AffectingMoves) {
    return nil, false
	}
	return o.AffectingMoves, true
}

// HasAffectingMoves returns a boolean if a field has been set.
func (o *Stat) HasAffectingMoves() bool {
	if o != nil && !isNil(o.AffectingMoves) {
		return true
	}

	return false
}

// SetAffectingMoves gets a reference to the given MoveStatAffectSets and assigns it to the AffectingMoves field.
func (o *Stat) SetAffectingMoves(v MoveStatAffectSets) {
	o.AffectingMoves = &v
}

// GetAffectingNatures returns the AffectingNatures field value if set, zero value otherwise.
func (o *Stat) GetAffectingNatures() NatureStatAffectSets {
	if o == nil || isNil(o.AffectingNatures) {
		var ret NatureStatAffectSets
		return ret
	}
	return *o.AffectingNatures
}

// GetAffectingNaturesOk returns a tuple with the AffectingNatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetAffectingNaturesOk() (*NatureStatAffectSets, bool) {
	if o == nil || isNil(o.AffectingNatures) {
    return nil, false
	}
	return o.AffectingNatures, true
}

// HasAffectingNatures returns a boolean if a field has been set.
func (o *Stat) HasAffectingNatures() bool {
	if o != nil && !isNil(o.AffectingNatures) {
		return true
	}

	return false
}

// SetAffectingNatures gets a reference to the given NatureStatAffectSets and assigns it to the AffectingNatures field.
func (o *Stat) SetAffectingNatures(v NatureStatAffectSets) {
	o.AffectingNatures = &v
}

func (o Stat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["game_index"] = o.GameIndex
	}
	if !isNil(o.IsBattleOnly) {
		toSerialize["is_battle_only"] = o.IsBattleOnly
	}
	if !isNil(o.AffectingMoves) {
		toSerialize["affecting_moves"] = o.AffectingMoves
	}
	if !isNil(o.AffectingNatures) {
		toSerialize["affecting_natures"] = o.AffectingNatures
	}
	return json.Marshal(toSerialize)
}

type NullableStat struct {
	value *Stat
	isSet bool
}

func (v NullableStat) Get() *Stat {
	return v.value
}

func (v *NullableStat) Set(val *Stat) {
	v.value = val
	v.isSet = true
}

func (v NullableStat) IsSet() bool {
	return v.isSet
}

func (v *NullableStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStat(val *Stat) *NullableStat {
	return &NullableStat{value: val, isSet: true}
}

func (v NullableStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


