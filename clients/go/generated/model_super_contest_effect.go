/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SuperContestEffect struct for SuperContestEffect
type SuperContestEffect struct {
	Id int32 `json:"id"`
	Appeal int32 `json:"appeal"`
	FlavorTextEntries []FlavorText `json:"flavor_text_entries"`
	Moves []NamedAPIResource `json:"moves"`
}

// NewSuperContestEffect instantiates a new SuperContestEffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperContestEffect(id int32, appeal int32, flavorTextEntries []FlavorText, moves []NamedAPIResource) *SuperContestEffect {
	this := SuperContestEffect{}
	this.Id = id
	this.Appeal = appeal
	this.FlavorTextEntries = flavorTextEntries
	this.Moves = moves
	return &this
}

// NewSuperContestEffectWithDefaults instantiates a new SuperContestEffect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperContestEffectWithDefaults() *SuperContestEffect {
	this := SuperContestEffect{}
	return &this
}

// GetId returns the Id field value
func (o *SuperContestEffect) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SuperContestEffect) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SuperContestEffect) SetId(v int32) {
	o.Id = v
}

// GetAppeal returns the Appeal field value
func (o *SuperContestEffect) GetAppeal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Appeal
}

// GetAppealOk returns a tuple with the Appeal field value
// and a boolean to check if the value has been set.
func (o *SuperContestEffect) GetAppealOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Appeal, true
}

// SetAppeal sets field value
func (o *SuperContestEffect) SetAppeal(v int32) {
	o.Appeal = v
}

// GetFlavorTextEntries returns the FlavorTextEntries field value
func (o *SuperContestEffect) GetFlavorTextEntries() []FlavorText {
	if o == nil {
		var ret []FlavorText
		return ret
	}

	return o.FlavorTextEntries
}

// GetFlavorTextEntriesOk returns a tuple with the FlavorTextEntries field value
// and a boolean to check if the value has been set.
func (o *SuperContestEffect) GetFlavorTextEntriesOk() ([]FlavorText, bool) {
	if o == nil {
    return nil, false
	}
	return o.FlavorTextEntries, true
}

// SetFlavorTextEntries sets field value
func (o *SuperContestEffect) SetFlavorTextEntries(v []FlavorText) {
	o.FlavorTextEntries = v
}

// GetMoves returns the Moves field value
func (o *SuperContestEffect) GetMoves() []NamedAPIResource {
	if o == nil {
		var ret []NamedAPIResource
		return ret
	}

	return o.Moves
}

// GetMovesOk returns a tuple with the Moves field value
// and a boolean to check if the value has been set.
func (o *SuperContestEffect) GetMovesOk() ([]NamedAPIResource, bool) {
	if o == nil {
    return nil, false
	}
	return o.Moves, true
}

// SetMoves sets field value
func (o *SuperContestEffect) SetMoves(v []NamedAPIResource) {
	o.Moves = v
}

func (o SuperContestEffect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["appeal"] = o.Appeal
	}
	if true {
		toSerialize["flavor_text_entries"] = o.FlavorTextEntries
	}
	if true {
		toSerialize["moves"] = o.Moves
	}
	return json.Marshal(toSerialize)
}

type NullableSuperContestEffect struct {
	value *SuperContestEffect
	isSet bool
}

func (v NullableSuperContestEffect) Get() *SuperContestEffect {
	return v.value
}

func (v *NullableSuperContestEffect) Set(val *SuperContestEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperContestEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperContestEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperContestEffect(val *SuperContestEffect) *NullableSuperContestEffect {
	return &NullableSuperContestEffect{value: val, isSet: true}
}

func (v NullableSuperContestEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperContestEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


