/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Type struct for Type
type Type struct {
	// The identifier for this type resource.
	Id *int32 `json:"id,omitempty"`
	// The name for this type resource.
	Name *string `json:"name,omitempty"`
	DamageRelations *TypeDamageRelations `json:"damage_relations,omitempty"`
	GameIndices []TypeGameIndicesInner `json:"game_indices,omitempty"`
	Generation *TypeGeneration `json:"generation,omitempty"`
	MoveDamageClass *TypeMoveDamageClass `json:"move_damage_class,omitempty"`
	Names []AbilityNamesInner `json:"names,omitempty"`
	Pokemon []TypePokemonInner `json:"pokemon,omitempty"`
}

// NewType instantiates a new Type object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewType() *Type {
	this := Type{}
	return &this
}

// NewTypeWithDefaults instantiates a new Type object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeWithDefaults() *Type {
	this := Type{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Type) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Type) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Type) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Type) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Type) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Type) SetName(v string) {
	o.Name = &v
}

// GetDamageRelations returns the DamageRelations field value if set, zero value otherwise.
func (o *Type) GetDamageRelations() TypeDamageRelations {
	if o == nil || isNil(o.DamageRelations) {
		var ret TypeDamageRelations
		return ret
	}
	return *o.DamageRelations
}

// GetDamageRelationsOk returns a tuple with the DamageRelations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetDamageRelationsOk() (*TypeDamageRelations, bool) {
	if o == nil || isNil(o.DamageRelations) {
    return nil, false
	}
	return o.DamageRelations, true
}

// HasDamageRelations returns a boolean if a field has been set.
func (o *Type) HasDamageRelations() bool {
	if o != nil && !isNil(o.DamageRelations) {
		return true
	}

	return false
}

// SetDamageRelations gets a reference to the given TypeDamageRelations and assigns it to the DamageRelations field.
func (o *Type) SetDamageRelations(v TypeDamageRelations) {
	o.DamageRelations = &v
}

// GetGameIndices returns the GameIndices field value if set, zero value otherwise.
func (o *Type) GetGameIndices() []TypeGameIndicesInner {
	if o == nil || isNil(o.GameIndices) {
		var ret []TypeGameIndicesInner
		return ret
	}
	return o.GameIndices
}

// GetGameIndicesOk returns a tuple with the GameIndices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetGameIndicesOk() ([]TypeGameIndicesInner, bool) {
	if o == nil || isNil(o.GameIndices) {
    return nil, false
	}
	return o.GameIndices, true
}

// HasGameIndices returns a boolean if a field has been set.
func (o *Type) HasGameIndices() bool {
	if o != nil && !isNil(o.GameIndices) {
		return true
	}

	return false
}

// SetGameIndices gets a reference to the given []TypeGameIndicesInner and assigns it to the GameIndices field.
func (o *Type) SetGameIndices(v []TypeGameIndicesInner) {
	o.GameIndices = v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *Type) GetGeneration() TypeGeneration {
	if o == nil || isNil(o.Generation) {
		var ret TypeGeneration
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetGenerationOk() (*TypeGeneration, bool) {
	if o == nil || isNil(o.Generation) {
    return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *Type) HasGeneration() bool {
	if o != nil && !isNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given TypeGeneration and assigns it to the Generation field.
func (o *Type) SetGeneration(v TypeGeneration) {
	o.Generation = &v
}

// GetMoveDamageClass returns the MoveDamageClass field value if set, zero value otherwise.
func (o *Type) GetMoveDamageClass() TypeMoveDamageClass {
	if o == nil || isNil(o.MoveDamageClass) {
		var ret TypeMoveDamageClass
		return ret
	}
	return *o.MoveDamageClass
}

// GetMoveDamageClassOk returns a tuple with the MoveDamageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetMoveDamageClassOk() (*TypeMoveDamageClass, bool) {
	if o == nil || isNil(o.MoveDamageClass) {
    return nil, false
	}
	return o.MoveDamageClass, true
}

// HasMoveDamageClass returns a boolean if a field has been set.
func (o *Type) HasMoveDamageClass() bool {
	if o != nil && !isNil(o.MoveDamageClass) {
		return true
	}

	return false
}

// SetMoveDamageClass gets a reference to the given TypeMoveDamageClass and assigns it to the MoveDamageClass field.
func (o *Type) SetMoveDamageClass(v TypeMoveDamageClass) {
	o.MoveDamageClass = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *Type) GetNames() []AbilityNamesInner {
	if o == nil || isNil(o.Names) {
		var ret []AbilityNamesInner
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetNamesOk() ([]AbilityNamesInner, bool) {
	if o == nil || isNil(o.Names) {
    return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Type) HasNames() bool {
	if o != nil && !isNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []AbilityNamesInner and assigns it to the Names field.
func (o *Type) SetNames(v []AbilityNamesInner) {
	o.Names = v
}

// GetPokemon returns the Pokemon field value if set, zero value otherwise.
func (o *Type) GetPokemon() []TypePokemonInner {
	if o == nil || isNil(o.Pokemon) {
		var ret []TypePokemonInner
		return ret
	}
	return o.Pokemon
}

// GetPokemonOk returns a tuple with the Pokemon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetPokemonOk() ([]TypePokemonInner, bool) {
	if o == nil || isNil(o.Pokemon) {
    return nil, false
	}
	return o.Pokemon, true
}

// HasPokemon returns a boolean if a field has been set.
func (o *Type) HasPokemon() bool {
	if o != nil && !isNil(o.Pokemon) {
		return true
	}

	return false
}

// SetPokemon gets a reference to the given []TypePokemonInner and assigns it to the Pokemon field.
func (o *Type) SetPokemon(v []TypePokemonInner) {
	o.Pokemon = v
}

func (o Type) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.DamageRelations) {
		toSerialize["damage_relations"] = o.DamageRelations
	}
	if !isNil(o.GameIndices) {
		toSerialize["game_indices"] = o.GameIndices
	}
	if !isNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !isNil(o.MoveDamageClass) {
		toSerialize["move_damage_class"] = o.MoveDamageClass
	}
	if !isNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !isNil(o.Pokemon) {
		toSerialize["pokemon"] = o.Pokemon
	}
	return json.Marshal(toSerialize)
}

type NullableType struct {
	value *Type
	isSet bool
}

func (v NullableType) Get() *Type {
	return v.value
}

func (v *NullableType) Set(val *Type) {
	v.value = val
	v.isSet = true
}

func (v NullableType) IsSet() bool {
	return v.isSet
}

func (v *NullableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableType(val *Type) *NullableType {
	return &NullableType{value: val, isSet: true}
}

func (v NullableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


