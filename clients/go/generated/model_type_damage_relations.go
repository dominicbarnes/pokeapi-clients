/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TypeDamageRelations struct for TypeDamageRelations
type TypeDamageRelations struct {
	DoubleDamageFrom []TypeDamageRelationsDoubleDamageFromInner `json:"double_damage_from,omitempty"`
	DoubleDamageTo []TypeDamageRelationsDoubleDamageFromInner `json:"double_damage_to,omitempty"`
	HalfDamageFrom []TypeDamageRelationsDoubleDamageFromInner `json:"half_damage_from,omitempty"`
	HalfDamageTo []TypeDamageRelationsDoubleDamageFromInner `json:"half_damage_to,omitempty"`
	NoDamageFrom []TypeDamageRelationsDoubleDamageFromInner `json:"no_damage_from,omitempty"`
	NoDamageTo []TypeDamageRelationsDoubleDamageFromInner `json:"no_damage_to,omitempty"`
}

// NewTypeDamageRelations instantiates a new TypeDamageRelations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeDamageRelations() *TypeDamageRelations {
	this := TypeDamageRelations{}
	return &this
}

// NewTypeDamageRelationsWithDefaults instantiates a new TypeDamageRelations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeDamageRelationsWithDefaults() *TypeDamageRelations {
	this := TypeDamageRelations{}
	return &this
}

// GetDoubleDamageFrom returns the DoubleDamageFrom field value if set, zero value otherwise.
func (o *TypeDamageRelations) GetDoubleDamageFrom() []TypeDamageRelationsDoubleDamageFromInner {
	if o == nil || isNil(o.DoubleDamageFrom) {
		var ret []TypeDamageRelationsDoubleDamageFromInner
		return ret
	}
	return o.DoubleDamageFrom
}

// GetDoubleDamageFromOk returns a tuple with the DoubleDamageFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeDamageRelations) GetDoubleDamageFromOk() ([]TypeDamageRelationsDoubleDamageFromInner, bool) {
	if o == nil || isNil(o.DoubleDamageFrom) {
    return nil, false
	}
	return o.DoubleDamageFrom, true
}

// HasDoubleDamageFrom returns a boolean if a field has been set.
func (o *TypeDamageRelations) HasDoubleDamageFrom() bool {
	if o != nil && !isNil(o.DoubleDamageFrom) {
		return true
	}

	return false
}

// SetDoubleDamageFrom gets a reference to the given []TypeDamageRelationsDoubleDamageFromInner and assigns it to the DoubleDamageFrom field.
func (o *TypeDamageRelations) SetDoubleDamageFrom(v []TypeDamageRelationsDoubleDamageFromInner) {
	o.DoubleDamageFrom = v
}

// GetDoubleDamageTo returns the DoubleDamageTo field value if set, zero value otherwise.
func (o *TypeDamageRelations) GetDoubleDamageTo() []TypeDamageRelationsDoubleDamageFromInner {
	if o == nil || isNil(o.DoubleDamageTo) {
		var ret []TypeDamageRelationsDoubleDamageFromInner
		return ret
	}
	return o.DoubleDamageTo
}

// GetDoubleDamageToOk returns a tuple with the DoubleDamageTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeDamageRelations) GetDoubleDamageToOk() ([]TypeDamageRelationsDoubleDamageFromInner, bool) {
	if o == nil || isNil(o.DoubleDamageTo) {
    return nil, false
	}
	return o.DoubleDamageTo, true
}

// HasDoubleDamageTo returns a boolean if a field has been set.
func (o *TypeDamageRelations) HasDoubleDamageTo() bool {
	if o != nil && !isNil(o.DoubleDamageTo) {
		return true
	}

	return false
}

// SetDoubleDamageTo gets a reference to the given []TypeDamageRelationsDoubleDamageFromInner and assigns it to the DoubleDamageTo field.
func (o *TypeDamageRelations) SetDoubleDamageTo(v []TypeDamageRelationsDoubleDamageFromInner) {
	o.DoubleDamageTo = v
}

// GetHalfDamageFrom returns the HalfDamageFrom field value if set, zero value otherwise.
func (o *TypeDamageRelations) GetHalfDamageFrom() []TypeDamageRelationsDoubleDamageFromInner {
	if o == nil || isNil(o.HalfDamageFrom) {
		var ret []TypeDamageRelationsDoubleDamageFromInner
		return ret
	}
	return o.HalfDamageFrom
}

// GetHalfDamageFromOk returns a tuple with the HalfDamageFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeDamageRelations) GetHalfDamageFromOk() ([]TypeDamageRelationsDoubleDamageFromInner, bool) {
	if o == nil || isNil(o.HalfDamageFrom) {
    return nil, false
	}
	return o.HalfDamageFrom, true
}

// HasHalfDamageFrom returns a boolean if a field has been set.
func (o *TypeDamageRelations) HasHalfDamageFrom() bool {
	if o != nil && !isNil(o.HalfDamageFrom) {
		return true
	}

	return false
}

// SetHalfDamageFrom gets a reference to the given []TypeDamageRelationsDoubleDamageFromInner and assigns it to the HalfDamageFrom field.
func (o *TypeDamageRelations) SetHalfDamageFrom(v []TypeDamageRelationsDoubleDamageFromInner) {
	o.HalfDamageFrom = v
}

// GetHalfDamageTo returns the HalfDamageTo field value if set, zero value otherwise.
func (o *TypeDamageRelations) GetHalfDamageTo() []TypeDamageRelationsDoubleDamageFromInner {
	if o == nil || isNil(o.HalfDamageTo) {
		var ret []TypeDamageRelationsDoubleDamageFromInner
		return ret
	}
	return o.HalfDamageTo
}

// GetHalfDamageToOk returns a tuple with the HalfDamageTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeDamageRelations) GetHalfDamageToOk() ([]TypeDamageRelationsDoubleDamageFromInner, bool) {
	if o == nil || isNil(o.HalfDamageTo) {
    return nil, false
	}
	return o.HalfDamageTo, true
}

// HasHalfDamageTo returns a boolean if a field has been set.
func (o *TypeDamageRelations) HasHalfDamageTo() bool {
	if o != nil && !isNil(o.HalfDamageTo) {
		return true
	}

	return false
}

// SetHalfDamageTo gets a reference to the given []TypeDamageRelationsDoubleDamageFromInner and assigns it to the HalfDamageTo field.
func (o *TypeDamageRelations) SetHalfDamageTo(v []TypeDamageRelationsDoubleDamageFromInner) {
	o.HalfDamageTo = v
}

// GetNoDamageFrom returns the NoDamageFrom field value if set, zero value otherwise.
func (o *TypeDamageRelations) GetNoDamageFrom() []TypeDamageRelationsDoubleDamageFromInner {
	if o == nil || isNil(o.NoDamageFrom) {
		var ret []TypeDamageRelationsDoubleDamageFromInner
		return ret
	}
	return o.NoDamageFrom
}

// GetNoDamageFromOk returns a tuple with the NoDamageFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeDamageRelations) GetNoDamageFromOk() ([]TypeDamageRelationsDoubleDamageFromInner, bool) {
	if o == nil || isNil(o.NoDamageFrom) {
    return nil, false
	}
	return o.NoDamageFrom, true
}

// HasNoDamageFrom returns a boolean if a field has been set.
func (o *TypeDamageRelations) HasNoDamageFrom() bool {
	if o != nil && !isNil(o.NoDamageFrom) {
		return true
	}

	return false
}

// SetNoDamageFrom gets a reference to the given []TypeDamageRelationsDoubleDamageFromInner and assigns it to the NoDamageFrom field.
func (o *TypeDamageRelations) SetNoDamageFrom(v []TypeDamageRelationsDoubleDamageFromInner) {
	o.NoDamageFrom = v
}

// GetNoDamageTo returns the NoDamageTo field value if set, zero value otherwise.
func (o *TypeDamageRelations) GetNoDamageTo() []TypeDamageRelationsDoubleDamageFromInner {
	if o == nil || isNil(o.NoDamageTo) {
		var ret []TypeDamageRelationsDoubleDamageFromInner
		return ret
	}
	return o.NoDamageTo
}

// GetNoDamageToOk returns a tuple with the NoDamageTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeDamageRelations) GetNoDamageToOk() ([]TypeDamageRelationsDoubleDamageFromInner, bool) {
	if o == nil || isNil(o.NoDamageTo) {
    return nil, false
	}
	return o.NoDamageTo, true
}

// HasNoDamageTo returns a boolean if a field has been set.
func (o *TypeDamageRelations) HasNoDamageTo() bool {
	if o != nil && !isNil(o.NoDamageTo) {
		return true
	}

	return false
}

// SetNoDamageTo gets a reference to the given []TypeDamageRelationsDoubleDamageFromInner and assigns it to the NoDamageTo field.
func (o *TypeDamageRelations) SetNoDamageTo(v []TypeDamageRelationsDoubleDamageFromInner) {
	o.NoDamageTo = v
}

func (o TypeDamageRelations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DoubleDamageFrom) {
		toSerialize["double_damage_from"] = o.DoubleDamageFrom
	}
	if !isNil(o.DoubleDamageTo) {
		toSerialize["double_damage_to"] = o.DoubleDamageTo
	}
	if !isNil(o.HalfDamageFrom) {
		toSerialize["half_damage_from"] = o.HalfDamageFrom
	}
	if !isNil(o.HalfDamageTo) {
		toSerialize["half_damage_to"] = o.HalfDamageTo
	}
	if !isNil(o.NoDamageFrom) {
		toSerialize["no_damage_from"] = o.NoDamageFrom
	}
	if !isNil(o.NoDamageTo) {
		toSerialize["no_damage_to"] = o.NoDamageTo
	}
	return json.Marshal(toSerialize)
}

type NullableTypeDamageRelations struct {
	value *TypeDamageRelations
	isSet bool
}

func (v NullableTypeDamageRelations) Get() *TypeDamageRelations {
	return v.value
}

func (v *NullableTypeDamageRelations) Set(val *TypeDamageRelations) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeDamageRelations) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeDamageRelations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeDamageRelations(val *TypeDamageRelations) *NullableTypeDamageRelations {
	return &NullableTypeDamageRelations{value: val, isSet: true}
}

func (v NullableTypeDamageRelations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeDamageRelations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


