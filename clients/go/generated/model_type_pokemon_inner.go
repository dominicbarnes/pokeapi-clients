/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TypePokemonInner struct for TypePokemonInner
type TypePokemonInner struct {
	Slot *int32 `json:"slot,omitempty"`
}

// NewTypePokemonInner instantiates a new TypePokemonInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypePokemonInner() *TypePokemonInner {
	this := TypePokemonInner{}
	return &this
}

// NewTypePokemonInnerWithDefaults instantiates a new TypePokemonInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypePokemonInnerWithDefaults() *TypePokemonInner {
	this := TypePokemonInner{}
	return &this
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *TypePokemonInner) GetSlot() int32 {
	if o == nil || isNil(o.Slot) {
		var ret int32
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypePokemonInner) GetSlotOk() (*int32, bool) {
	if o == nil || isNil(o.Slot) {
    return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *TypePokemonInner) HasSlot() bool {
	if o != nil && !isNil(o.Slot) {
		return true
	}

	return false
}

// SetSlot gets a reference to the given int32 and assigns it to the Slot field.
func (o *TypePokemonInner) SetSlot(v int32) {
	o.Slot = &v
}

func (o TypePokemonInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Slot) {
		toSerialize["slot"] = o.Slot
	}
	return json.Marshal(toSerialize)
}

type NullableTypePokemonInner struct {
	value *TypePokemonInner
	isSet bool
}

func (v NullableTypePokemonInner) Get() *TypePokemonInner {
	return v.value
}

func (v *NullableTypePokemonInner) Set(val *TypePokemonInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTypePokemonInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTypePokemonInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypePokemonInner(val *TypePokemonInner) *NullableTypePokemonInner {
	return &NullableTypePokemonInner{value: val, isSet: true}
}

func (v NullableTypePokemonInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypePokemonInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


