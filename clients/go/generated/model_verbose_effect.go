/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 20220523
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VerboseEffect struct for VerboseEffect
type VerboseEffect struct {
	// The localized effect text for an API resource in a specific language.
	Effect *string `json:"effect,omitempty"`
}

// NewVerboseEffect instantiates a new VerboseEffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerboseEffect() *VerboseEffect {
	this := VerboseEffect{}
	return &this
}

// NewVerboseEffectWithDefaults instantiates a new VerboseEffect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerboseEffectWithDefaults() *VerboseEffect {
	this := VerboseEffect{}
	return &this
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *VerboseEffect) GetEffect() string {
	if o == nil || isNil(o.Effect) {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerboseEffect) GetEffectOk() (*string, bool) {
	if o == nil || isNil(o.Effect) {
    return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *VerboseEffect) HasEffect() bool {
	if o != nil && !isNil(o.Effect) {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *VerboseEffect) SetEffect(v string) {
	o.Effect = &v
}

func (o VerboseEffect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Effect) {
		toSerialize["effect"] = o.Effect
	}
	return json.Marshal(toSerialize)
}

type NullableVerboseEffect struct {
	value *VerboseEffect
	isSet bool
}

func (v NullableVerboseEffect) Get() *VerboseEffect {
	return v.value
}

func (v *NullableVerboseEffect) Set(val *VerboseEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableVerboseEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableVerboseEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerboseEffect(val *VerboseEffect) *NullableVerboseEffect {
	return &NullableVerboseEffect{value: val, isSet: true}
}

func (v NullableVerboseEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerboseEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


